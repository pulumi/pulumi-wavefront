// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    /// <summary>
    /// Provides a Wavefront Dashboard resource. This allows dashboards to be created, updated, and deleted.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Dashboards can be imported by using the `id`, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import wavefront:index/dashboard:Dashboard dashboard tftestimport
    /// ```
    /// </summary>
    [WavefrontResourceType("wavefront:index/dashboard:Dashboard")]
    public partial class Dashboard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of users/groups/roles that can modify the dashboard.
        /// </summary>
        [Output("canModifies")]
        public Output<ImmutableArray<string>> CanModifies { get; private set; } = null!;

        /// <summary>
        /// A list of users/groups/roles that can view the dashboard.
        /// </summary>
        [Output("canViews")]
        public Output<ImmutableArray<string>> CanViews { get; private set; } = null!;

        /// <summary>
        /// Human-readable description of the dashboard.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the dashboard parameters section is opened by default when the dashboard
        /// is shown.
        /// </summary>
        [Output("displayQueryParameters")]
        public Output<bool?> DisplayQueryParameters { get; private set; } = null!;

        /// <summary>
        /// Whether the "pills" quick-linked the sections of the dashboard are
        /// displayed by default when the dashboard is shown.
        /// </summary>
        [Output("displaySectionTableOfContents")]
        public Output<bool?> DisplaySectionTableOfContents { get; private set; } = null!;

        /// <summary>
        /// How charts belonging to this dashboard should display events. `BYCHART` is default if
        /// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        /// </summary>
        [Output("eventFilterType")]
        public Output<string?> EventFilterType { get; private set; } = null!;

        /// <summary>
        /// Name of the dashboard.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The current JSON representation of dashboard parameters. See parameter details.
        /// </summary>
        [Output("parameterDetails")]
        public Output<ImmutableArray<Outputs.DashboardParameterDetail>> ParameterDetails { get; private set; } = null!;

        /// <summary>
        /// Dashboard chart sections. See dashboard sections.
        /// </summary>
        [Output("sections")]
        public Output<ImmutableArray<Outputs.DashboardSection>> Sections { get; private set; } = null!;

        /// <summary>
        /// A set of tags to assign to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Unique identifier, also a URL slug of the dashboard.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Dashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dashboard(string name, DashboardArgs args, CustomResourceOptions? options = null)
            : base("wavefront:index/dashboard:Dashboard", name, args ?? new DashboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dashboard(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
            : base("wavefront:index/dashboard:Dashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dashboard Get(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new Dashboard(name, id, state, options);
        }
    }

    public sealed class DashboardArgs : global::Pulumi.ResourceArgs
    {
        [Input("canModifies")]
        private InputList<string>? _canModifies;

        /// <summary>
        /// A list of users/groups/roles that can modify the dashboard.
        /// </summary>
        public InputList<string> CanModifies
        {
            get => _canModifies ?? (_canModifies = new InputList<string>());
            set => _canModifies = value;
        }

        [Input("canViews")]
        private InputList<string>? _canViews;

        /// <summary>
        /// A list of users/groups/roles that can view the dashboard.
        /// </summary>
        public InputList<string> CanViews
        {
            get => _canViews ?? (_canViews = new InputList<string>());
            set => _canViews = value;
        }

        /// <summary>
        /// Human-readable description of the dashboard.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Whether the dashboard parameters section is opened by default when the dashboard
        /// is shown.
        /// </summary>
        [Input("displayQueryParameters")]
        public Input<bool>? DisplayQueryParameters { get; set; }

        /// <summary>
        /// Whether the "pills" quick-linked the sections of the dashboard are
        /// displayed by default when the dashboard is shown.
        /// </summary>
        [Input("displaySectionTableOfContents")]
        public Input<bool>? DisplaySectionTableOfContents { get; set; }

        /// <summary>
        /// How charts belonging to this dashboard should display events. `BYCHART` is default if
        /// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        /// </summary>
        [Input("eventFilterType")]
        public Input<string>? EventFilterType { get; set; }

        /// <summary>
        /// Name of the dashboard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameterDetails")]
        private InputList<Inputs.DashboardParameterDetailArgs>? _parameterDetails;

        /// <summary>
        /// The current JSON representation of dashboard parameters. See parameter details.
        /// </summary>
        public InputList<Inputs.DashboardParameterDetailArgs> ParameterDetails
        {
            get => _parameterDetails ?? (_parameterDetails = new InputList<Inputs.DashboardParameterDetailArgs>());
            set => _parameterDetails = value;
        }

        [Input("sections", required: true)]
        private InputList<Inputs.DashboardSectionArgs>? _sections;

        /// <summary>
        /// Dashboard chart sections. See dashboard sections.
        /// </summary>
        public InputList<Inputs.DashboardSectionArgs> Sections
        {
            get => _sections ?? (_sections = new InputList<Inputs.DashboardSectionArgs>());
            set => _sections = value;
        }

        [Input("tags", required: true)]
        private InputList<string>? _tags;

        /// <summary>
        /// A set of tags to assign to this resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Unique identifier, also a URL slug of the dashboard.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public DashboardArgs()
        {
        }
        public static new DashboardArgs Empty => new DashboardArgs();
    }

    public sealed class DashboardState : global::Pulumi.ResourceArgs
    {
        [Input("canModifies")]
        private InputList<string>? _canModifies;

        /// <summary>
        /// A list of users/groups/roles that can modify the dashboard.
        /// </summary>
        public InputList<string> CanModifies
        {
            get => _canModifies ?? (_canModifies = new InputList<string>());
            set => _canModifies = value;
        }

        [Input("canViews")]
        private InputList<string>? _canViews;

        /// <summary>
        /// A list of users/groups/roles that can view the dashboard.
        /// </summary>
        public InputList<string> CanViews
        {
            get => _canViews ?? (_canViews = new InputList<string>());
            set => _canViews = value;
        }

        /// <summary>
        /// Human-readable description of the dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the dashboard parameters section is opened by default when the dashboard
        /// is shown.
        /// </summary>
        [Input("displayQueryParameters")]
        public Input<bool>? DisplayQueryParameters { get; set; }

        /// <summary>
        /// Whether the "pills" quick-linked the sections of the dashboard are
        /// displayed by default when the dashboard is shown.
        /// </summary>
        [Input("displaySectionTableOfContents")]
        public Input<bool>? DisplaySectionTableOfContents { get; set; }

        /// <summary>
        /// How charts belonging to this dashboard should display events. `BYCHART` is default if
        /// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        /// </summary>
        [Input("eventFilterType")]
        public Input<string>? EventFilterType { get; set; }

        /// <summary>
        /// Name of the dashboard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameterDetails")]
        private InputList<Inputs.DashboardParameterDetailGetArgs>? _parameterDetails;

        /// <summary>
        /// The current JSON representation of dashboard parameters. See parameter details.
        /// </summary>
        public InputList<Inputs.DashboardParameterDetailGetArgs> ParameterDetails
        {
            get => _parameterDetails ?? (_parameterDetails = new InputList<Inputs.DashboardParameterDetailGetArgs>());
            set => _parameterDetails = value;
        }

        [Input("sections")]
        private InputList<Inputs.DashboardSectionGetArgs>? _sections;

        /// <summary>
        /// Dashboard chart sections. See dashboard sections.
        /// </summary>
        public InputList<Inputs.DashboardSectionGetArgs> Sections
        {
            get => _sections ?? (_sections = new InputList<Inputs.DashboardSectionGetArgs>());
            set => _sections = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A set of tags to assign to this resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Unique identifier, also a URL slug of the dashboard.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public DashboardState()
        {
        }
        public static new DashboardState Empty => new DashboardState();
    }
}
