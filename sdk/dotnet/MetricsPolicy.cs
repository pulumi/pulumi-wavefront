// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    /// <summary>
    /// Provides a Wavefront Metrics Policy Resource. This allows management of Metrics Policy to control access to time series, histograms, and delta counters
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Wavefront = Pulumi.Wavefront;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var everyone = Wavefront.GetDefaultUserGroup.Invoke();
    /// 
    ///     var main = new Wavefront.MetricsPolicy("main", new()
    ///     {
    ///         PolicyRules = new[]
    ///         {
    ///             new Wavefront.Inputs.MetricsPolicyPolicyRuleArgs
    ///             {
    ///                 Name = "Allow All Metrics",
    ///                 Description = "Predefined policy rule. Allows access to all metrics (timeseries, histograms, and counters) for all accounts. If this rule is removed, all accounts can access all metrics if there are no matching blocking rules.",
    ///                 Prefixes = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 TagsAnded = false,
    ///                 AccessType = "ALLOW",
    ///                 UserGroupIds = new[]
    ///                 {
    ///                     everyone.Apply(getDefaultUserGroupResult =&gt; getDefaultUserGroupResult.GroupId),
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Data Source
    /// 
    /// Provides a Wavefront Metrics Policy Data Source. This allows looking up the current policy and associated rules.
    /// 
    /// ### Example
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Wavefront = Pulumi.Wavefront;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policy = Wavefront.GetMetricsPolicy.Invoke();
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["policy"] = policy,
    ///     };
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Users can be imported by using the `updated_epoch_millis`, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import wavefront:index/metricsPolicy:MetricsPolicy some_metrics_policy 1651846476678
    /// ```
    /// </summary>
    [WavefrontResourceType("wavefront:index/metricsPolicy:MetricsPolicy")]
    public partial class MetricsPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The customer the user is associated with.
        /// </summary>
        [Output("customer")]
        public Output<string> Customer { get; private set; } = null!;

        /// <summary>
        /// List of Metrics Policies, must have at least one entry.
        /// </summary>
        [Output("policyRules")]
        public Output<ImmutableArray<Outputs.MetricsPolicyPolicyRule>> PolicyRules { get; private set; } = null!;

        /// <summary>
        /// When the policy was applied in epoch_millis.
        /// </summary>
        [Output("updatedEpochMillis")]
        public Output<int> UpdatedEpochMillis { get; private set; } = null!;

        /// <summary>
        /// The account_id who applied the current policy.
        /// </summary>
        [Output("updaterId")]
        public Output<string> UpdaterId { get; private set; } = null!;


        /// <summary>
        /// Create a MetricsPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricsPolicy(string name, MetricsPolicyArgs args, CustomResourceOptions? options = null)
            : base("wavefront:index/metricsPolicy:MetricsPolicy", name, args ?? new MetricsPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetricsPolicy(string name, Input<string> id, MetricsPolicyState? state = null, CustomResourceOptions? options = null)
            : base("wavefront:index/metricsPolicy:MetricsPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricsPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricsPolicy Get(string name, Input<string> id, MetricsPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new MetricsPolicy(name, id, state, options);
        }
    }

    public sealed class MetricsPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("policyRules", required: true)]
        private InputList<Inputs.MetricsPolicyPolicyRuleArgs>? _policyRules;

        /// <summary>
        /// List of Metrics Policies, must have at least one entry.
        /// </summary>
        public InputList<Inputs.MetricsPolicyPolicyRuleArgs> PolicyRules
        {
            get => _policyRules ?? (_policyRules = new InputList<Inputs.MetricsPolicyPolicyRuleArgs>());
            set => _policyRules = value;
        }

        public MetricsPolicyArgs()
        {
        }
        public static new MetricsPolicyArgs Empty => new MetricsPolicyArgs();
    }

    public sealed class MetricsPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The customer the user is associated with.
        /// </summary>
        [Input("customer")]
        public Input<string>? Customer { get; set; }

        [Input("policyRules")]
        private InputList<Inputs.MetricsPolicyPolicyRuleGetArgs>? _policyRules;

        /// <summary>
        /// List of Metrics Policies, must have at least one entry.
        /// </summary>
        public InputList<Inputs.MetricsPolicyPolicyRuleGetArgs> PolicyRules
        {
            get => _policyRules ?? (_policyRules = new InputList<Inputs.MetricsPolicyPolicyRuleGetArgs>());
            set => _policyRules = value;
        }

        /// <summary>
        /// When the policy was applied in epoch_millis.
        /// </summary>
        [Input("updatedEpochMillis")]
        public Input<int>? UpdatedEpochMillis { get; set; }

        /// <summary>
        /// The account_id who applied the current policy.
        /// </summary>
        [Input("updaterId")]
        public Input<string>? UpdaterId { get; set; }

        public MetricsPolicyState()
        {
        }
        public static new MetricsPolicyState Empty => new MetricsPolicyState();
    }
}
