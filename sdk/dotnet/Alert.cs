// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    public partial class Alert : Pulumi.CustomResource
    {
        [Output("additionalInformation")]
        public Output<string?> AdditionalInformation { get; private set; } = null!;

        [Output("alertType")]
        public Output<string?> AlertType { get; private set; } = null!;

        [Output("canModifies")]
        public Output<ImmutableArray<string>> CanModifies { get; private set; } = null!;

        [Output("canViews")]
        public Output<ImmutableArray<string>> CanViews { get; private set; } = null!;

        [Output("condition")]
        public Output<string?> Condition { get; private set; } = null!;

        [Output("conditions")]
        public Output<ImmutableDictionary<string, string>?> Conditions { get; private set; } = null!;

        [Output("displayExpression")]
        public Output<string?> DisplayExpression { get; private set; } = null!;

        [Output("minutes")]
        public Output<int> Minutes { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("notificationResendFrequencyMinutes")]
        public Output<int?> NotificationResendFrequencyMinutes { get; private set; } = null!;

        [Output("resolveAfterMinutes")]
        public Output<int?> ResolveAfterMinutes { get; private set; } = null!;

        [Output("severity")]
        public Output<string?> Severity { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("target")]
        public Output<string?> Target { get; private set; } = null!;

        [Output("thresholdTargets")]
        public Output<ImmutableDictionary<string, string>?> ThresholdTargets { get; private set; } = null!;


        /// <summary>
        /// Create a Alert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Alert(string name, AlertArgs args, CustomResourceOptions? options = null)
            : base("wavefront:index/alert:Alert", name, args ?? new AlertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Alert(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
            : base("wavefront:index/alert:Alert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Alert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Alert Get(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
        {
            return new Alert(name, id, state, options);
        }
    }

    public sealed class AlertArgs : Pulumi.ResourceArgs
    {
        [Input("additionalInformation")]
        public Input<string>? AdditionalInformation { get; set; }

        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        [Input("canModifies")]
        private InputList<string>? _canModifies;
        public InputList<string> CanModifies
        {
            get => _canModifies ?? (_canModifies = new InputList<string>());
            set => _canModifies = value;
        }

        [Input("canViews")]
        private InputList<string>? _canViews;
        public InputList<string> CanViews
        {
            get => _canViews ?? (_canViews = new InputList<string>());
            set => _canViews = value;
        }

        [Input("condition")]
        public Input<string>? Condition { get; set; }

        [Input("conditions")]
        private InputMap<string>? _conditions;
        public InputMap<string> Conditions
        {
            get => _conditions ?? (_conditions = new InputMap<string>());
            set => _conditions = value;
        }

        [Input("displayExpression")]
        public Input<string>? DisplayExpression { get; set; }

        [Input("minutes", required: true)]
        public Input<int> Minutes { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationResendFrequencyMinutes")]
        public Input<int>? NotificationResendFrequencyMinutes { get; set; }

        [Input("resolveAfterMinutes")]
        public Input<int>? ResolveAfterMinutes { get; set; }

        [Input("severity")]
        public Input<string>? Severity { get; set; }

        [Input("tags", required: true)]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("target")]
        public Input<string>? Target { get; set; }

        [Input("thresholdTargets")]
        private InputMap<string>? _thresholdTargets;
        public InputMap<string> ThresholdTargets
        {
            get => _thresholdTargets ?? (_thresholdTargets = new InputMap<string>());
            set => _thresholdTargets = value;
        }

        public AlertArgs()
        {
        }
    }

    public sealed class AlertState : Pulumi.ResourceArgs
    {
        [Input("additionalInformation")]
        public Input<string>? AdditionalInformation { get; set; }

        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        [Input("canModifies")]
        private InputList<string>? _canModifies;
        public InputList<string> CanModifies
        {
            get => _canModifies ?? (_canModifies = new InputList<string>());
            set => _canModifies = value;
        }

        [Input("canViews")]
        private InputList<string>? _canViews;
        public InputList<string> CanViews
        {
            get => _canViews ?? (_canViews = new InputList<string>());
            set => _canViews = value;
        }

        [Input("condition")]
        public Input<string>? Condition { get; set; }

        [Input("conditions")]
        private InputMap<string>? _conditions;
        public InputMap<string> Conditions
        {
            get => _conditions ?? (_conditions = new InputMap<string>());
            set => _conditions = value;
        }

        [Input("displayExpression")]
        public Input<string>? DisplayExpression { get; set; }

        [Input("minutes")]
        public Input<int>? Minutes { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationResendFrequencyMinutes")]
        public Input<int>? NotificationResendFrequencyMinutes { get; set; }

        [Input("resolveAfterMinutes")]
        public Input<int>? ResolveAfterMinutes { get; set; }

        [Input("severity")]
        public Input<string>? Severity { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("target")]
        public Input<string>? Target { get; set; }

        [Input("thresholdTargets")]
        private InputMap<string>? _thresholdTargets;
        public InputMap<string> ThresholdTargets
        {
            get => _thresholdTargets ?? (_thresholdTargets = new InputMap<string>());
            set => _thresholdTargets = value;
        }

        public AlertState()
        {
        }
    }
}
