// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    /// <summary>
    /// Provides a Wavefront Alert resource. This allows alerts to be created, updated, and deleted.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Wavefront = Pulumi.Wavefront;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new Wavefront.Alert("foobar", new()
    ///     {
    ///         Condition = "100-ts(\"cpu.usage_idle\", environment=preprod and cpu=cpu-total ) &gt; 80",
    ///         DisplayExpression = "100-ts(\"cpu.usage_idle\", environment=preprod and cpu=cpu-total )",
    ///         Minutes = 5,
    ///         ResolveAfterMinutes = 5,
    ///         Severity = "WARN",
    ///         Tags = new[]
    ///         {
    ///             "terraform",
    ///             "test",
    ///         },
    ///         Target = "test@example.com,target:alert-target-id",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Alerts can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import wavefront:index/alert:Alert alert_target 1479868728473
    /// ```
    /// </summary>
    [WavefrontResourceType("wavefront:index/alert:Alert")]
    public partial class Alert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// User-supplied additional explanatory information for this alert.
        /// Useful for linking runbooks, migrations, etc.
        /// </summary>
        [Output("additionalInformation")]
        public Output<string?> AdditionalInformation { get; private set; } = null!;

        /// <summary>
        /// A set of user-supplied dashboard and parameters to create dashboard links for triaging alerts.
        /// </summary>
        [Output("alertTriageDashboards")]
        public Output<ImmutableArray<Outputs.AlertAlertTriageDashboard>> AlertTriageDashboards { get; private set; } = null!;

        /// <summary>
        /// The type of alert in Wavefront. Either `CLASSIC` (default)
        /// or `THRESHOLD`.
        /// </summary>
        [Output("alertType")]
        public Output<string?> AlertType { get; private set; } = null!;

        /// <summary>
        /// A list of valid users or groups that can modify this resource on a tenant.
        /// </summary>
        [Output("canModifies")]
        public Output<ImmutableArray<string>> CanModifies { get; private set; } = null!;

        /// <summary>
        /// A list of valid users or groups that can view this resource on a tenant. Default is Empty list.
        /// </summary>
        [Output("canViews")]
        public Output<ImmutableArray<string>> CanViews { get; private set; } = null!;

        /// <summary>
        /// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
        /// The alert fires and notifications are triggered when a data series matching this query evaluates
        /// to a non-zero value for a set number of consecutive minutes.
        /// </summary>
        [Output("condition")]
        public Output<string?> Condition { get; private set; } = null!;

        /// <summary>
        /// a string-&gt;string map of `severity` to `condition`
        /// for which this alert will trigger.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableDictionary<string, string>?> Conditions { get; private set; } = null!;

        /// <summary>
        /// A second query whose results are displayed in the alert user
        /// interface instead of the condition query. This field is often used to display a version
        /// of the condition query with Boolean operators removed so that numerical values are plotted.
        /// </summary>
        [Output("displayExpression")]
        public Output<string?> DisplayExpression { get; private set; } = null!;

        /// <summary>
        /// The number of consecutive minutes that a series matching the condition query must
        /// evaluate to "true" (non-zero value) before the alert fires.
        /// </summary>
        [Output("minutes")]
        public Output<int> Minutes { get; private set; } = null!;

        /// <summary>
        /// The name of the alert as it is displayed in Wavefront.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// How often to re-trigger a continually failing alert.
        /// If absent or &lt;= 0, no re-triggering occurs.
        /// </summary>
        [Output("notificationResendFrequencyMinutes")]
        public Output<int?> NotificationResendFrequencyMinutes { get; private set; } = null!;

        /// <summary>
        /// The specified query is executed every `process_rate_minutes` minutes. Default value is 5 minutes.
        /// </summary>
        [Output("processRateMinutes")]
        public Output<int?> ProcessRateMinutes { get; private set; } = null!;

        /// <summary>
        /// The number of consecutive minutes that a firing series matching the condition
        /// query must evaluate to "false" (zero value) before the alert resolves. When unset, this defaults to
        /// the same value as `minutes`.
        /// </summary>
        [Output("resolveAfterMinutes")]
        public Output<int?> ResolveAfterMinutes { get; private set; } = null!;

        /// <summary>
        /// A list of user-supplied runbook links for this alert.
        /// </summary>
        [Output("runbookLinks")]
        public Output<ImmutableArray<string>> RunbookLinks { get; private set; } = null!;

        /// <summary>
        /// Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
        /// </summary>
        [Output("severity")]
        public Output<string> Severity { get; private set; } = null!;

        /// <summary>
        /// A set of tags to assign to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// A comma-separated list of the email address or integration endpoint
        /// (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
        /// Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
        /// </summary>
        [Output("target")]
        public Output<string?> Target { get; private set; } = null!;

        /// <summary>
        /// A string to string map of Targets for severity.
        /// </summary>
        [Output("thresholdTargets")]
        public Output<ImmutableDictionary<string, string>?> ThresholdTargets { get; private set; } = null!;


        /// <summary>
        /// Create a Alert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Alert(string name, AlertArgs args, CustomResourceOptions? options = null)
            : base("wavefront:index/alert:Alert", name, args ?? new AlertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Alert(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
            : base("wavefront:index/alert:Alert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Alert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Alert Get(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
        {
            return new Alert(name, id, state, options);
        }
    }

    public sealed class AlertArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-supplied additional explanatory information for this alert.
        /// Useful for linking runbooks, migrations, etc.
        /// </summary>
        [Input("additionalInformation")]
        public Input<string>? AdditionalInformation { get; set; }

        [Input("alertTriageDashboards")]
        private InputList<Inputs.AlertAlertTriageDashboardArgs>? _alertTriageDashboards;

        /// <summary>
        /// A set of user-supplied dashboard and parameters to create dashboard links for triaging alerts.
        /// </summary>
        public InputList<Inputs.AlertAlertTriageDashboardArgs> AlertTriageDashboards
        {
            get => _alertTriageDashboards ?? (_alertTriageDashboards = new InputList<Inputs.AlertAlertTriageDashboardArgs>());
            set => _alertTriageDashboards = value;
        }

        /// <summary>
        /// The type of alert in Wavefront. Either `CLASSIC` (default)
        /// or `THRESHOLD`.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        [Input("canModifies")]
        private InputList<string>? _canModifies;

        /// <summary>
        /// A list of valid users or groups that can modify this resource on a tenant.
        /// </summary>
        public InputList<string> CanModifies
        {
            get => _canModifies ?? (_canModifies = new InputList<string>());
            set => _canModifies = value;
        }

        [Input("canViews")]
        private InputList<string>? _canViews;

        /// <summary>
        /// A list of valid users or groups that can view this resource on a tenant. Default is Empty list.
        /// </summary>
        public InputList<string> CanViews
        {
            get => _canViews ?? (_canViews = new InputList<string>());
            set => _canViews = value;
        }

        /// <summary>
        /// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
        /// The alert fires and notifications are triggered when a data series matching this query evaluates
        /// to a non-zero value for a set number of consecutive minutes.
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        [Input("conditions")]
        private InputMap<string>? _conditions;

        /// <summary>
        /// a string-&gt;string map of `severity` to `condition`
        /// for which this alert will trigger.
        /// </summary>
        public InputMap<string> Conditions
        {
            get => _conditions ?? (_conditions = new InputMap<string>());
            set => _conditions = value;
        }

        /// <summary>
        /// A second query whose results are displayed in the alert user
        /// interface instead of the condition query. This field is often used to display a version
        /// of the condition query with Boolean operators removed so that numerical values are plotted.
        /// </summary>
        [Input("displayExpression")]
        public Input<string>? DisplayExpression { get; set; }

        /// <summary>
        /// The number of consecutive minutes that a series matching the condition query must
        /// evaluate to "true" (non-zero value) before the alert fires.
        /// </summary>
        [Input("minutes", required: true)]
        public Input<int> Minutes { get; set; } = null!;

        /// <summary>
        /// The name of the alert as it is displayed in Wavefront.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// How often to re-trigger a continually failing alert.
        /// If absent or &lt;= 0, no re-triggering occurs.
        /// </summary>
        [Input("notificationResendFrequencyMinutes")]
        public Input<int>? NotificationResendFrequencyMinutes { get; set; }

        /// <summary>
        /// The specified query is executed every `process_rate_minutes` minutes. Default value is 5 minutes.
        /// </summary>
        [Input("processRateMinutes")]
        public Input<int>? ProcessRateMinutes { get; set; }

        /// <summary>
        /// The number of consecutive minutes that a firing series matching the condition
        /// query must evaluate to "false" (zero value) before the alert resolves. When unset, this defaults to
        /// the same value as `minutes`.
        /// </summary>
        [Input("resolveAfterMinutes")]
        public Input<int>? ResolveAfterMinutes { get; set; }

        [Input("runbookLinks")]
        private InputList<string>? _runbookLinks;

        /// <summary>
        /// A list of user-supplied runbook links for this alert.
        /// </summary>
        public InputList<string> RunbookLinks
        {
            get => _runbookLinks ?? (_runbookLinks = new InputList<string>());
            set => _runbookLinks = value;
        }

        /// <summary>
        /// Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        [Input("tags", required: true)]
        private InputList<string>? _tags;

        /// <summary>
        /// A set of tags to assign to this resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A comma-separated list of the email address or integration endpoint
        /// (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
        /// Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        [Input("thresholdTargets")]
        private InputMap<string>? _thresholdTargets;

        /// <summary>
        /// A string to string map of Targets for severity.
        /// </summary>
        public InputMap<string> ThresholdTargets
        {
            get => _thresholdTargets ?? (_thresholdTargets = new InputMap<string>());
            set => _thresholdTargets = value;
        }

        public AlertArgs()
        {
        }
        public static new AlertArgs Empty => new AlertArgs();
    }

    public sealed class AlertState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-supplied additional explanatory information for this alert.
        /// Useful for linking runbooks, migrations, etc.
        /// </summary>
        [Input("additionalInformation")]
        public Input<string>? AdditionalInformation { get; set; }

        [Input("alertTriageDashboards")]
        private InputList<Inputs.AlertAlertTriageDashboardGetArgs>? _alertTriageDashboards;

        /// <summary>
        /// A set of user-supplied dashboard and parameters to create dashboard links for triaging alerts.
        /// </summary>
        public InputList<Inputs.AlertAlertTriageDashboardGetArgs> AlertTriageDashboards
        {
            get => _alertTriageDashboards ?? (_alertTriageDashboards = new InputList<Inputs.AlertAlertTriageDashboardGetArgs>());
            set => _alertTriageDashboards = value;
        }

        /// <summary>
        /// The type of alert in Wavefront. Either `CLASSIC` (default)
        /// or `THRESHOLD`.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        [Input("canModifies")]
        private InputList<string>? _canModifies;

        /// <summary>
        /// A list of valid users or groups that can modify this resource on a tenant.
        /// </summary>
        public InputList<string> CanModifies
        {
            get => _canModifies ?? (_canModifies = new InputList<string>());
            set => _canModifies = value;
        }

        [Input("canViews")]
        private InputList<string>? _canViews;

        /// <summary>
        /// A list of valid users or groups that can view this resource on a tenant. Default is Empty list.
        /// </summary>
        public InputList<string> CanViews
        {
            get => _canViews ?? (_canViews = new InputList<string>());
            set => _canViews = value;
        }

        /// <summary>
        /// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
        /// The alert fires and notifications are triggered when a data series matching this query evaluates
        /// to a non-zero value for a set number of consecutive minutes.
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        [Input("conditions")]
        private InputMap<string>? _conditions;

        /// <summary>
        /// a string-&gt;string map of `severity` to `condition`
        /// for which this alert will trigger.
        /// </summary>
        public InputMap<string> Conditions
        {
            get => _conditions ?? (_conditions = new InputMap<string>());
            set => _conditions = value;
        }

        /// <summary>
        /// A second query whose results are displayed in the alert user
        /// interface instead of the condition query. This field is often used to display a version
        /// of the condition query with Boolean operators removed so that numerical values are plotted.
        /// </summary>
        [Input("displayExpression")]
        public Input<string>? DisplayExpression { get; set; }

        /// <summary>
        /// The number of consecutive minutes that a series matching the condition query must
        /// evaluate to "true" (non-zero value) before the alert fires.
        /// </summary>
        [Input("minutes")]
        public Input<int>? Minutes { get; set; }

        /// <summary>
        /// The name of the alert as it is displayed in Wavefront.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// How often to re-trigger a continually failing alert.
        /// If absent or &lt;= 0, no re-triggering occurs.
        /// </summary>
        [Input("notificationResendFrequencyMinutes")]
        public Input<int>? NotificationResendFrequencyMinutes { get; set; }

        /// <summary>
        /// The specified query is executed every `process_rate_minutes` minutes. Default value is 5 minutes.
        /// </summary>
        [Input("processRateMinutes")]
        public Input<int>? ProcessRateMinutes { get; set; }

        /// <summary>
        /// The number of consecutive minutes that a firing series matching the condition
        /// query must evaluate to "false" (zero value) before the alert resolves. When unset, this defaults to
        /// the same value as `minutes`.
        /// </summary>
        [Input("resolveAfterMinutes")]
        public Input<int>? ResolveAfterMinutes { get; set; }

        [Input("runbookLinks")]
        private InputList<string>? _runbookLinks;

        /// <summary>
        /// A list of user-supplied runbook links for this alert.
        /// </summary>
        public InputList<string> RunbookLinks
        {
            get => _runbookLinks ?? (_runbookLinks = new InputList<string>());
            set => _runbookLinks = value;
        }

        /// <summary>
        /// Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A set of tags to assign to this resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A comma-separated list of the email address or integration endpoint
        /// (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
        /// Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        [Input("thresholdTargets")]
        private InputMap<string>? _thresholdTargets;

        /// <summary>
        /// A string to string map of Targets for severity.
        /// </summary>
        public InputMap<string> ThresholdTargets
        {
            get => _thresholdTargets ?? (_thresholdTargets = new InputMap<string>());
            set => _thresholdTargets = value;
        }

        public AlertState()
        {
        }
        public static new AlertState Empty => new AlertState();
    }
}
