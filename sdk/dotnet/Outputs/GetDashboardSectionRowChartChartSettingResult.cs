// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront.Outputs
{

    [OutputType]
    public sealed class GetDashboardSectionRowChartChartSettingResult
    {
        /// <summary>
        /// This setting is deprecated.
        /// </summary>
        public readonly bool AutoColumnTags;
        /// <summary>
        /// This setting is deprecated.
        /// </summary>
        public readonly string ColumnTags;
        /// <summary>
        /// For the tabular view, a list of point tags to display when using the `Custom` tag display mode.
        /// </summary>
        public readonly ImmutableArray<string> CustomTags;
        /// <summary>
        /// Threshold (in seconds) for time delta between consecutive points in a series above which a dotted line will replace a solid in line plots. Default is 60.
        /// </summary>
        public readonly int ExpectedDataSpacing;
        /// <summary>
        /// (Optional) For a chart with a fixed legend, a list of statistics to display in the legend.
        /// </summary>
        public readonly ImmutableArray<string> FixedLegendDisplayStats;
        /// <summary>
        /// (Optional) Whether to enable a fixed tabular legend adjacent to the chart.
        /// </summary>
        public readonly bool FixedLegendEnabled;
        /// <summary>
        /// (Optional) Statistic to use for determining whether a series is displayed on the fixed legend. Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
        /// </summary>
        public readonly string FixedLegendFilterField;
        /// <summary>
        /// (Optional) Number of series to include in the fixed legend.
        /// </summary>
        public readonly int FixedLegendFilterLimit;
        /// <summary>
        /// (Optional) Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options are `TOP`, and `BOTTOM`.
        /// </summary>
        public readonly string FixedLegendFilterSort;
        /// <summary>
        /// (Optional) This setting is deprecated.
        /// </summary>
        public readonly bool FixedLegendHideLabel;
        /// <summary>
        /// (Optional)  Where the fixed legend should be displayed with respect to the chart. Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
        /// </summary>
        public readonly string FixedLegendPosition;
        /// <summary>
        /// (Optional) If `True`, the legend uses non-summarized stats instead of summarized.
        /// </summary>
        public readonly bool FixedLegendUseRawStats;
        /// <summary>
        /// For the tabular view, whether to group multi metrics into a single row by a common source. If set to `False`, each source is displayed in its own row. If set to `True`, multiple metrics for the same host are displayed as different columns in the same row.
        /// </summary>
        public readonly bool GroupBySource;
        /// <summary>
        /// (Optional) Whether to disable the display of the floating legend (but reenable it when the ctrl-key is pressed).
        /// </summary>
        public readonly bool InvertDynamicLegendHoverControl;
        /// <summary>
        /// Plot interpolation type.  `Linear` is default. Valid options are `Linear`, `step-before`, `step-after`, `Basis`, `Cardinal`, and `Monotone`.
        /// </summary>
        public readonly string LineType;
        /// <summary>
        /// Max value of the Y-axis. Set to null or leave blank for auto.
        /// </summary>
        public readonly double Max;
        /// <summary>
        /// Min value of the Y-axis. Set to null or leave blank for auto.
        /// </summary>
        public readonly double Min;
        /// <summary>
        /// For the tabular view defines how many point tags to display.
        /// </summary>
        public readonly int NumTags;
        /// <summary>
        /// The markdown content for a Markdown display, in plain text.
        /// </summary>
        public readonly string PlainMarkdownContent;
        /// <summary>
        /// For the tabular view, whether to display sources. Default is `True`.
        /// </summary>
        public readonly bool ShowHosts;
        /// <summary>
        /// For the tabular view, whether to display labels. Default is `True`.
        /// </summary>
        public readonly bool ShowLabels;
        /// <summary>
        /// For the tabular view, whether to display raw values. Default is `False`.
        /// </summary>
        public readonly bool ShowRawValues;
        /// <summary>
        /// For the tabular view, whether to display values in descending order. Default is `False`.
        /// </summary>
        public readonly bool SortValuesDescending;
        /// <summary>
        /// For the single stat view, the decimal precision of the displayed number.
        /// </summary>
        public readonly int SparklineDecimalPrecision;
        /// <summary>
        /// For the single stat view, the color of the displayed text (when not dynamically determined). Values should be in RGBA format.
        /// </summary>
        public readonly string SparklineDisplayColor;
        /// <summary>
        /// For the single stat view, the font size of the displayed text, in percent.
        /// </summary>
        public readonly string SparklineDisplayFontSize;
        /// <summary>
        /// For the single stat view, the horizontal position of the displayed text. Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
        /// </summary>
        public readonly string SparklineDisplayHorizontalPosition;
        /// <summary>
        /// For the single stat view, a string to append to the displayed text.
        /// </summary>
        public readonly string SparklineDisplayPostfix;
        /// <summary>
        /// For the single stat view, a string to add before the displayed text.
        /// </summary>
        public readonly string SparklineDisplayPrefix;
        /// <summary>
        /// For the single stat view, where to display the name of the query or the value of the query. Valid options are `VALUE` or `LABEL`.
        /// </summary>
        public readonly string SparklineDisplayValueType;
        /// <summary>
        /// This setting is deprecated.
        /// </summary>
        public readonly string SparklineDisplayVerticalPosition;
        /// <summary>
        /// For the single stat view, the color of the background fill. Values should be in RGBA format.
        /// </summary>
        public readonly string SparklineFillColor;
        /// <summary>
        /// For the single stat view, the color of the line. Values should be in RGBA format.
        /// </summary>
        public readonly string SparklineLineColor;
        /// <summary>
        /// For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart. Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
        /// </summary>
        public readonly string SparklineSize;
        /// <summary>
        /// For the single stat view, whether to apply dynamic color settings to the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
        /// </summary>
        public readonly string SparklineValueColorMapApplyTo;
        /// <summary>
        /// For the single stat view, a list of colors that differing query values map to. Must contain one more element than `SparklineValueColorMapValuesV2`. Values should be in RGBA format.
        /// </summary>
        public readonly ImmutableArray<string> SparklineValueColorMapColors;
        /// <summary>
        /// This setting is deprecated.
        /// </summary>
        public readonly ImmutableArray<int> SparklineValueColorMapValues;
        /// <summary>
        /// For the single stat view, a list of boundaries for mapping different query values to colors. Must contain one element less than `SparklineValueColorMapColors`.
        /// </summary>
        public readonly ImmutableArray<double> SparklineValueColorMapValuesV2s;
        /// <summary>
        /// For the single stat view, a list of display text values that different query values map to. Must contain one more element than `SparklineValueTextMapThresholds`.
        /// </summary>
        public readonly ImmutableArray<string> SparklineValueTextMapTexts;
        /// <summary>
        /// For the single stat view, a list of threshold boundaries for mapping different query values to display text. Must contain one element less than `SparklineValueTextMapText`.
        /// </summary>
        public readonly ImmutableArray<double> SparklineValueTextMapThresholds;
        /// <summary>
        /// Type of stacked chart (applicable only if chart type is `Stacked`). `Zero` (default) means stacked from y=0. `Expand` means normalized from 0 to 1.  `Wiggle` means minimize weighted changes. `Silhouette` means to center the stream. Valid options are `Zero`, `Expand`, `Wiggle`, `Silhouette`, and `Bars`.
        /// </summary>
        public readonly string StackType;
        /// <summary>
        /// For the tabular view, which mode to use to determine which point tags to display. Valid options are `All`, `Top`, or `Custom`.
        /// </summary>
        public readonly string TagMode;
        /// <summary>
        /// For x-y scatterplots, whether to color more recent points as darker than older points.
        /// </summary>
        public readonly bool TimeBasedColoring;
        /// <summary>
        /// Chart Type. `Line` refers to the Line Plot, `Scatter` to the Point Plot, `stacked-area` to the Stacked Area plot, `Table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the Markdown display, and `Sparkline` to the Single Stat view. Valid options are`Line`, `Scatterplot`,
        /// `stacked-area`, `stacked-column`, `Table`, `scatterplot-xy`, `markdown-widget`, `Sparkline`, `Globe`, `Nodemap`, `top-k`, `status-list`, and `Histogram`.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Width, in minutes, of the time window to use for `Last` windowing.
        /// </summary>
        public readonly int WindowSize;
        /// <summary>
        /// For the tabular view, whether to use the full time window for the query or the last X minutes. Valid options are `Full` or `Last`.
        /// </summary>
        public readonly string Windowing;
        /// <summary>
        /// For x-y scatterplots, max value for the X-axis. Set to null for auto.
        /// </summary>
        public readonly double Xmax;
        /// <summary>
        /// For x-y scatterplots, min value for the X-axis. Set to null for auto.
        /// </summary>
        public readonly double Xmin;
        public readonly bool Y0ScaleSiBy1024;
        /// <summary>
        /// (Optional) Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
        /// </summary>
        public readonly bool Y0UnitAutoscaling;
        public readonly double Y1Max;
        public readonly double Y1Min;
        public readonly bool Y1ScaleSiBy1024;
        /// <summary>
        /// (Optional) Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
        /// </summary>
        public readonly bool Y1UnitAutoscaling;
        /// <summary>
        /// For plots with multiple Y-axes, units for right side Y-axis.
        /// </summary>
        public readonly string Y1Units;
        /// <summary>
        /// For x-y scatterplots, max value for the Y-axis. Set to null for auto.
        /// </summary>
        public readonly double Ymax;
        /// <summary>
        /// For x-y scatterplots, min value for the Y-axis. Set to null for auto.
        /// </summary>
        public readonly double Ymin;

        [OutputConstructor]
        private GetDashboardSectionRowChartChartSettingResult(
            bool autoColumnTags,

            string columnTags,

            ImmutableArray<string> customTags,

            int expectedDataSpacing,

            ImmutableArray<string> fixedLegendDisplayStats,

            bool fixedLegendEnabled,

            string fixedLegendFilterField,

            int fixedLegendFilterLimit,

            string fixedLegendFilterSort,

            bool fixedLegendHideLabel,

            string fixedLegendPosition,

            bool fixedLegendUseRawStats,

            bool groupBySource,

            bool invertDynamicLegendHoverControl,

            string lineType,

            double max,

            double min,

            int numTags,

            string plainMarkdownContent,

            bool showHosts,

            bool showLabels,

            bool showRawValues,

            bool sortValuesDescending,

            int sparklineDecimalPrecision,

            string sparklineDisplayColor,

            string sparklineDisplayFontSize,

            string sparklineDisplayHorizontalPosition,

            string sparklineDisplayPostfix,

            string sparklineDisplayPrefix,

            string sparklineDisplayValueType,

            string sparklineDisplayVerticalPosition,

            string sparklineFillColor,

            string sparklineLineColor,

            string sparklineSize,

            string sparklineValueColorMapApplyTo,

            ImmutableArray<string> sparklineValueColorMapColors,

            ImmutableArray<int> sparklineValueColorMapValues,

            ImmutableArray<double> sparklineValueColorMapValuesV2s,

            ImmutableArray<string> sparklineValueTextMapTexts,

            ImmutableArray<double> sparklineValueTextMapThresholds,

            string stackType,

            string tagMode,

            bool timeBasedColoring,

            string type,

            int windowSize,

            string windowing,

            double xmax,

            double xmin,

            bool y0ScaleSiBy1024,

            bool y0UnitAutoscaling,

            double y1Max,

            double y1Min,

            bool y1ScaleSiBy1024,

            bool y1UnitAutoscaling,

            string y1Units,

            double ymax,

            double ymin)
        {
            AutoColumnTags = autoColumnTags;
            ColumnTags = columnTags;
            CustomTags = customTags;
            ExpectedDataSpacing = expectedDataSpacing;
            FixedLegendDisplayStats = fixedLegendDisplayStats;
            FixedLegendEnabled = fixedLegendEnabled;
            FixedLegendFilterField = fixedLegendFilterField;
            FixedLegendFilterLimit = fixedLegendFilterLimit;
            FixedLegendFilterSort = fixedLegendFilterSort;
            FixedLegendHideLabel = fixedLegendHideLabel;
            FixedLegendPosition = fixedLegendPosition;
            FixedLegendUseRawStats = fixedLegendUseRawStats;
            GroupBySource = groupBySource;
            InvertDynamicLegendHoverControl = invertDynamicLegendHoverControl;
            LineType = lineType;
            Max = max;
            Min = min;
            NumTags = numTags;
            PlainMarkdownContent = plainMarkdownContent;
            ShowHosts = showHosts;
            ShowLabels = showLabels;
            ShowRawValues = showRawValues;
            SortValuesDescending = sortValuesDescending;
            SparklineDecimalPrecision = sparklineDecimalPrecision;
            SparklineDisplayColor = sparklineDisplayColor;
            SparklineDisplayFontSize = sparklineDisplayFontSize;
            SparklineDisplayHorizontalPosition = sparklineDisplayHorizontalPosition;
            SparklineDisplayPostfix = sparklineDisplayPostfix;
            SparklineDisplayPrefix = sparklineDisplayPrefix;
            SparklineDisplayValueType = sparklineDisplayValueType;
            SparklineDisplayVerticalPosition = sparklineDisplayVerticalPosition;
            SparklineFillColor = sparklineFillColor;
            SparklineLineColor = sparklineLineColor;
            SparklineSize = sparklineSize;
            SparklineValueColorMapApplyTo = sparklineValueColorMapApplyTo;
            SparklineValueColorMapColors = sparklineValueColorMapColors;
            SparklineValueColorMapValues = sparklineValueColorMapValues;
            SparklineValueColorMapValuesV2s = sparklineValueColorMapValuesV2s;
            SparklineValueTextMapTexts = sparklineValueTextMapTexts;
            SparklineValueTextMapThresholds = sparklineValueTextMapThresholds;
            StackType = stackType;
            TagMode = tagMode;
            TimeBasedColoring = timeBasedColoring;
            Type = type;
            WindowSize = windowSize;
            Windowing = windowing;
            Xmax = xmax;
            Xmin = xmin;
            Y0ScaleSiBy1024 = y0ScaleSiBy1024;
            Y0UnitAutoscaling = y0UnitAutoscaling;
            Y1Max = y1Max;
            Y1Min = y1Min;
            Y1ScaleSiBy1024 = y1ScaleSiBy1024;
            Y1UnitAutoscaling = y1UnitAutoscaling;
            Y1Units = y1Units;
            Ymax = ymax;
            Ymin = ymin;
        }
    }
}
