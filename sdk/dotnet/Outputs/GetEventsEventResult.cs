// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront.Outputs
{

    [OutputType]
    public sealed class GetEventsEventResult
    {
        /// <summary>
        /// Annotations associated with the event.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// The description of the event.
        /// </summary>
        public readonly string Details;
        public readonly int EndtimeKey;
        /// <summary>
        /// The ID of the event in Wavefront.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A Boolean flag. If set to `true`, creates a point-in-time event (i.e. with no duration).
        /// </summary>
        public readonly bool IsEphemeral;
        /// <summary>
        /// The name of the event in Wavefront.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The severity category of the event.
        /// </summary>
        public readonly string Severity;
        /// <summary>
        /// The start time of the event in epoch milliseconds.
        /// </summary>
        public readonly int StartTime;
        /// <summary>
        /// A set of tags assigned to the event.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The type of the event.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEventsEventResult(
            ImmutableDictionary<string, string> annotations,

            string details,

            int endtimeKey,

            string id,

            bool isEphemeral,

            string name,

            string severity,

            int startTime,

            ImmutableArray<string> tags,

            string type)
        {
            Annotations = annotations;
            Details = details;
            EndtimeKey = endtimeKey;
            Id = id;
            IsEphemeral = isEphemeral;
            Name = name;
            Severity = severity;
            StartTime = startTime;
            Tags = tags;
            Type = type;
        }
    }
}
