// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    /// <summary>
    /// Provides a Wavefront Maintenance Window Resource. This allows maintenance windows to be created, updated, and deleted.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Wavefront = Pulumi.Wavefront;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var basic = new Wavefront.MaintenanceWindow("basic", new Wavefront.MaintenanceWindowArgs
    ///         {
    ///             EndTimeInSeconds = 1601123456,
    ///             Reason = "Routine maintenance for 2020",
    ///             RelevantHostNames = 
    ///             {
    ///                 "my_hostname",
    ///                 "my_other_hostname",
    ///             },
    ///             StartTimeInSeconds = 1600123456,
    ///             Title = "Routine maintenance",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Maintenance windows can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import wavefront:index/maintenanceWindow:MaintenanceWindow basic 1600383357095
    /// ```
    /// </summary>
    [WavefrontResourceType("wavefront:index/maintenanceWindow:MaintenanceWindow")]
    public partial class MaintenanceWindow : Pulumi.CustomResource
    {
        /// <summary>
        /// end time in seconds after 1 Jan 1970 GMT.
        /// </summary>
        [Output("endTimeInSeconds")]
        public Output<int> EndTimeInSeconds { get; private set; } = null!;

        /// <summary>
        /// If true, a source/host must be in 'relevantHostNames' and have tags matching the specification formed by 'relevantHostTags' and 'relevantHostTagsAnded' in order for this maintenance window to apply. If false, a source/host must either be in 'relevantHostNames' or match 'relevantHostTags' and 'relevantHostTagsAnded'. Default: false
        /// </summary>
        [Output("hostTagGroupHostNamesGroupAnded")]
        public Output<bool?> HostTagGroupHostNamesGroupAnded { get; private set; } = null!;

        /// <summary>
        /// The reason for the maintenance window
        /// </summary>
        [Output("reason")]
        public Output<string> Reason { get; private set; } = null!;

        /// <summary>
        /// List of alert tags whose matching alerts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.
        /// </summary>
        [Output("relevantCustomerTags")]
        public Output<ImmutableArray<string>> RelevantCustomerTags { get; private set; } = null!;

        /// <summary>
        /// List of source/host names that will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.
        /// </summary>
        [Output("relevantHostNames")]
        public Output<ImmutableArray<string>> RelevantHostNames { get; private set; } = null!;

        /// <summary>
        /// List of source/host tags whose matching sources/hosts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.
        /// </summary>
        [Output("relevantHostTags")]
        public Output<ImmutableArray<string>> RelevantHostTags { get; private set; } = null!;

        /// <summary>
        /// Whether to AND source/host tags listed in relevantHostTags. If true, a source/host must contain all tags in order for the maintenance window to apply. If false, the tags are OR'ed, and a source/host must contain one of the tags. Default: false
        /// </summary>
        [Output("relevantHostTagsAnded")]
        public Output<bool?> RelevantHostTagsAnded { get; private set; } = null!;

        /// <summary>
        /// start time in seconds after 1 Jan 1970 GMT.
        /// </summary>
        [Output("startTimeInSeconds")]
        public Output<int> StartTimeInSeconds { get; private set; } = null!;

        /// <summary>
        /// The title of the maintenance window
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;


        /// <summary>
        /// Create a MaintenanceWindow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MaintenanceWindow(string name, MaintenanceWindowArgs args, CustomResourceOptions? options = null)
            : base("wavefront:index/maintenanceWindow:MaintenanceWindow", name, args ?? new MaintenanceWindowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MaintenanceWindow(string name, Input<string> id, MaintenanceWindowState? state = null, CustomResourceOptions? options = null)
            : base("wavefront:index/maintenanceWindow:MaintenanceWindow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MaintenanceWindow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MaintenanceWindow Get(string name, Input<string> id, MaintenanceWindowState? state = null, CustomResourceOptions? options = null)
        {
            return new MaintenanceWindow(name, id, state, options);
        }
    }

    public sealed class MaintenanceWindowArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// end time in seconds after 1 Jan 1970 GMT.
        /// </summary>
        [Input("endTimeInSeconds", required: true)]
        public Input<int> EndTimeInSeconds { get; set; } = null!;

        /// <summary>
        /// If true, a source/host must be in 'relevantHostNames' and have tags matching the specification formed by 'relevantHostTags' and 'relevantHostTagsAnded' in order for this maintenance window to apply. If false, a source/host must either be in 'relevantHostNames' or match 'relevantHostTags' and 'relevantHostTagsAnded'. Default: false
        /// </summary>
        [Input("hostTagGroupHostNamesGroupAnded")]
        public Input<bool>? HostTagGroupHostNamesGroupAnded { get; set; }

        /// <summary>
        /// The reason for the maintenance window
        /// </summary>
        [Input("reason", required: true)]
        public Input<string> Reason { get; set; } = null!;

        [Input("relevantCustomerTags")]
        private InputList<string>? _relevantCustomerTags;

        /// <summary>
        /// List of alert tags whose matching alerts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.
        /// </summary>
        public InputList<string> RelevantCustomerTags
        {
            get => _relevantCustomerTags ?? (_relevantCustomerTags = new InputList<string>());
            set => _relevantCustomerTags = value;
        }

        [Input("relevantHostNames")]
        private InputList<string>? _relevantHostNames;

        /// <summary>
        /// List of source/host names that will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.
        /// </summary>
        public InputList<string> RelevantHostNames
        {
            get => _relevantHostNames ?? (_relevantHostNames = new InputList<string>());
            set => _relevantHostNames = value;
        }

        [Input("relevantHostTags")]
        private InputList<string>? _relevantHostTags;

        /// <summary>
        /// List of source/host tags whose matching sources/hosts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.
        /// </summary>
        public InputList<string> RelevantHostTags
        {
            get => _relevantHostTags ?? (_relevantHostTags = new InputList<string>());
            set => _relevantHostTags = value;
        }

        /// <summary>
        /// Whether to AND source/host tags listed in relevantHostTags. If true, a source/host must contain all tags in order for the maintenance window to apply. If false, the tags are OR'ed, and a source/host must contain one of the tags. Default: false
        /// </summary>
        [Input("relevantHostTagsAnded")]
        public Input<bool>? RelevantHostTagsAnded { get; set; }

        /// <summary>
        /// start time in seconds after 1 Jan 1970 GMT.
        /// </summary>
        [Input("startTimeInSeconds", required: true)]
        public Input<int> StartTimeInSeconds { get; set; } = null!;

        /// <summary>
        /// The title of the maintenance window
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public MaintenanceWindowArgs()
        {
        }
    }

    public sealed class MaintenanceWindowState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// end time in seconds after 1 Jan 1970 GMT.
        /// </summary>
        [Input("endTimeInSeconds")]
        public Input<int>? EndTimeInSeconds { get; set; }

        /// <summary>
        /// If true, a source/host must be in 'relevantHostNames' and have tags matching the specification formed by 'relevantHostTags' and 'relevantHostTagsAnded' in order for this maintenance window to apply. If false, a source/host must either be in 'relevantHostNames' or match 'relevantHostTags' and 'relevantHostTagsAnded'. Default: false
        /// </summary>
        [Input("hostTagGroupHostNamesGroupAnded")]
        public Input<bool>? HostTagGroupHostNamesGroupAnded { get; set; }

        /// <summary>
        /// The reason for the maintenance window
        /// </summary>
        [Input("reason")]
        public Input<string>? Reason { get; set; }

        [Input("relevantCustomerTags")]
        private InputList<string>? _relevantCustomerTags;

        /// <summary>
        /// List of alert tags whose matching alerts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.
        /// </summary>
        public InputList<string> RelevantCustomerTags
        {
            get => _relevantCustomerTags ?? (_relevantCustomerTags = new InputList<string>());
            set => _relevantCustomerTags = value;
        }

        [Input("relevantHostNames")]
        private InputList<string>? _relevantHostNames;

        /// <summary>
        /// List of source/host names that will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.
        /// </summary>
        public InputList<string> RelevantHostNames
        {
            get => _relevantHostNames ?? (_relevantHostNames = new InputList<string>());
            set => _relevantHostNames = value;
        }

        [Input("relevantHostTags")]
        private InputList<string>? _relevantHostTags;

        /// <summary>
        /// List of source/host tags whose matching sources/hosts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.
        /// </summary>
        public InputList<string> RelevantHostTags
        {
            get => _relevantHostTags ?? (_relevantHostTags = new InputList<string>());
            set => _relevantHostTags = value;
        }

        /// <summary>
        /// Whether to AND source/host tags listed in relevantHostTags. If true, a source/host must contain all tags in order for the maintenance window to apply. If false, the tags are OR'ed, and a source/host must contain one of the tags. Default: false
        /// </summary>
        [Input("relevantHostTagsAnded")]
        public Input<bool>? RelevantHostTagsAnded { get; set; }

        /// <summary>
        /// start time in seconds after 1 Jan 1970 GMT.
        /// </summary>
        [Input("startTimeInSeconds")]
        public Input<int>? StartTimeInSeconds { get; set; }

        /// <summary>
        /// The title of the maintenance window
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public MaintenanceWindowState()
        {
        }
    }
}
