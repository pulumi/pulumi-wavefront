// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    public static class GetDerivedMetric
    {
        /// <summary>
        /// Use this data source to get information about a certain Wavefront derived metric by its ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Wavefront = Pulumi.Wavefront;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     //Get the information about a derived metric.
        ///     var example = Wavefront.GetDerivedMetric.Invoke(new()
        ///     {
        ///         Id = "derived_metric_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDerivedMetricResult> InvokeAsync(GetDerivedMetricArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDerivedMetricResult>("wavefront:index/getDerivedMetric:getDerivedMetric", args ?? new GetDerivedMetricArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a certain Wavefront derived metric by its ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Wavefront = Pulumi.Wavefront;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     //Get the information about a derived metric.
        ///     var example = Wavefront.GetDerivedMetric.Invoke(new()
        ///     {
        ///         Id = "derived_metric_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDerivedMetricResult> Invoke(GetDerivedMetricInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDerivedMetricResult>("wavefront:index/getDerivedMetric:getDerivedMetric", args ?? new GetDerivedMetricInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDerivedMetricArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID associated with the derived metric data to be fetched.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetDerivedMetricArgs()
        {
        }
        public static new GetDerivedMetricArgs Empty => new GetDerivedMetricArgs();
    }

    public sealed class GetDerivedMetricInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID associated with the derived metric data to be fetched.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetDerivedMetricInvokeArgs()
        {
        }
        public static new GetDerivedMetricInvokeArgs Empty => new GetDerivedMetricInvokeArgs();
    }


    [OutputType]
    public sealed class GetDerivedMetricResult
    {
        /// <summary>
        /// User-supplied additional explanatory information about the derived metric.
        /// </summary>
        public readonly string AdditionalInformation;
        /// <summary>
        /// The ID of the user who created the derived metric.
        /// </summary>
        public readonly string CreateUserId;
        /// <summary>
        /// The timestamp in epoch milliseconds indicating when the derived metric is created.
        /// </summary>
        public readonly int CreatedEpochMillis;
        /// <summary>
        /// A Boolean flag indicating whether the derived metric is deleted or not.
        /// </summary>
        public readonly bool Deleted;
        /// <summary>
        /// A list of hosts used in the derived metric.
        /// </summary>
        public readonly ImmutableArray<string> HostsUseds;
        /// <summary>
        /// The ID of the derived metric in Wavefront.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A Boolean variable indicating trash status.
        /// </summary>
        public readonly bool InTrash;
        /// <summary>
        /// A Boolean flag indicating whether to include obsolete metrics or not.
        /// </summary>
        public readonly bool IncludeObsoleteMetrics;
        /// <summary>
        /// Last error message occurred.
        /// </summary>
        public readonly string LastErrorMessage;
        /// <summary>
        /// Timestamp of the last failed derived metric.
        /// </summary>
        public readonly int LastFailedTime;
        /// <summary>
        /// The last processed timestamp.
        /// </summary>
        public readonly int LastProcessedMillis;
        /// <summary>
        /// The timestamp indicating the last time the query was executed.
        /// </summary>
        public readonly int LastQueryTime;
        /// <summary>
        /// A list of metrics used in the derived metric.
        /// </summary>
        public readonly ImmutableArray<string> MetricsUseds;
        /// <summary>
        /// How frequently the query generating the derived metric is run.
        /// </summary>
        public readonly int Minutes;
        /// <summary>
        /// The name of the derived metric in Wavefront.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of points scanned when last query was executed.
        /// </summary>
        public readonly int PointsScannedAtLastQuery;
        /// <summary>
        /// The specified query is executed every `process_rate_minutes` minutes.
        /// </summary>
        public readonly int ProcessRateMinutes;
        /// <summary>
        /// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
        /// </summary>
        public readonly string Query;
        /// <summary>
        /// A Boolean variable indicating whether query is failing for the derived metric.
        /// </summary>
        public readonly bool QueryFailing;
        /// <summary>
        /// A Boolean flag for enabling `query_qb`
        /// </summary>
        public readonly bool QueryQbEnabled;
        /// <summary>
        /// The status of the derived metric.
        /// </summary>
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// A set of tags assigned to the derived metric.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The ID of the user who updated the derived metric.
        /// </summary>
        public readonly string UpdateUserId;
        /// <summary>
        /// The timestamp in epoch milliseconds indicating when the derived metric is updated.
        /// </summary>
        public readonly int UpdatedEpochMillis;

        [OutputConstructor]
        private GetDerivedMetricResult(
            string additionalInformation,

            string createUserId,

            int createdEpochMillis,

            bool deleted,

            ImmutableArray<string> hostsUseds,

            string id,

            bool inTrash,

            bool includeObsoleteMetrics,

            string lastErrorMessage,

            int lastFailedTime,

            int lastProcessedMillis,

            int lastQueryTime,

            ImmutableArray<string> metricsUseds,

            int minutes,

            string name,

            int pointsScannedAtLastQuery,

            int processRateMinutes,

            string query,

            bool queryFailing,

            bool queryQbEnabled,

            ImmutableArray<string> statuses,

            ImmutableArray<string> tags,

            string updateUserId,

            int updatedEpochMillis)
        {
            AdditionalInformation = additionalInformation;
            CreateUserId = createUserId;
            CreatedEpochMillis = createdEpochMillis;
            Deleted = deleted;
            HostsUseds = hostsUseds;
            Id = id;
            InTrash = inTrash;
            IncludeObsoleteMetrics = includeObsoleteMetrics;
            LastErrorMessage = lastErrorMessage;
            LastFailedTime = lastFailedTime;
            LastProcessedMillis = lastProcessedMillis;
            LastQueryTime = lastQueryTime;
            MetricsUseds = metricsUseds;
            Minutes = minutes;
            Name = name;
            PointsScannedAtLastQuery = pointsScannedAtLastQuery;
            ProcessRateMinutes = processRateMinutes;
            Query = query;
            QueryFailing = queryFailing;
            QueryQbEnabled = queryQbEnabled;
            Statuses = statuses;
            Tags = tags;
            UpdateUserId = updateUserId;
            UpdatedEpochMillis = updatedEpochMillis;
        }
    }
}
