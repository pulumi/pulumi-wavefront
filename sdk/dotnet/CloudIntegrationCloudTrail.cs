// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    /// <summary>
    /// Provides a Wavefront Cloud Integration for CloudTrail. This allows CloudTrail cloud integrations to be created,
    /// updated, and deleted.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Wavefront = Pulumi.Wavefront;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var extId = new Wavefront.CloudIntegrationAwsExternalId("ext_id");
    /// 
    ///     var cloudtrail = new Wavefront.CloudIntegrationCloudTrail("cloudtrail", new()
    ///     {
    ///         Name = "Test Integration",
    ///         RoleArn = "arn:aws::1234567:role/example-arn",
    ///         ExternalId = extId.Id,
    ///         Region = "us-west-2",
    ///         BucketName = "example-s3-bucket",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// CloudTrail Cloud Integrations can be imported by using the `id`, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail cloudtrail a411c16b-3cf7-4f03-bf11-8ca05aab898d
    /// ```
    /// </summary>
    [WavefrontResourceType("wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail")]
    public partial class CloudIntegrationCloudTrail : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of point tag key-values to add to every point ingested using this integration.
        /// </summary>
        [Output("additionalTags")]
        public Output<ImmutableDictionary<string, string>?> AdditionalTags { get; private set; } = null!;

        /// <summary>
        /// Name of the S3 bucket where CloudTrail logs are stored.
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
        /// </summary>
        [Output("externalId")]
        public Output<string> ExternalId { get; private set; } = null!;

        /// <summary>
        /// Rule to filter CloudTrail log event.
        /// </summary>
        [Output("filterRule")]
        public Output<string?> FilterRule { get; private set; } = null!;

        /// <summary>
        /// Forces this resource to save, even if errors are present.
        /// </summary>
        [Output("forceSave")]
        public Output<bool?> ForceSave { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of this integration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The common prefix, if any, appended to all CloudTrail log files.
        /// </summary>
        [Output("prefix")]
        public Output<string?> Prefix { get; private set; } = null!;

        /// <summary>
        /// The AWS region of the S3 bucket where CloudTrail logs are stored.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The external ID corresponding to the Role ARN.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// A value denoting which cloud service this service integrates with.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// How often, in minutes, to refresh the service.
        /// </summary>
        [Output("serviceRefreshRateInMinutes")]
        public Output<int?> ServiceRefreshRateInMinutes { get; private set; } = null!;


        /// <summary>
        /// Create a CloudIntegrationCloudTrail resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudIntegrationCloudTrail(string name, CloudIntegrationCloudTrailArgs args, CustomResourceOptions? options = null)
            : base("wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail", name, args ?? new CloudIntegrationCloudTrailArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudIntegrationCloudTrail(string name, Input<string> id, CloudIntegrationCloudTrailState? state = null, CustomResourceOptions? options = null)
            : base("wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudIntegrationCloudTrail resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudIntegrationCloudTrail Get(string name, Input<string> id, CloudIntegrationCloudTrailState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudIntegrationCloudTrail(name, id, state, options);
        }
    }

    public sealed class CloudIntegrationCloudTrailArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalTags")]
        private InputMap<string>? _additionalTags;

        /// <summary>
        /// A list of point tag key-values to add to every point ingested using this integration.
        /// </summary>
        public InputMap<string> AdditionalTags
        {
            get => _additionalTags ?? (_additionalTags = new InputMap<string>());
            set => _additionalTags = value;
        }

        /// <summary>
        /// Name of the S3 bucket where CloudTrail logs are stored.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
        /// </summary>
        [Input("externalId", required: true)]
        public Input<string> ExternalId { get; set; } = null!;

        /// <summary>
        /// Rule to filter CloudTrail log event.
        /// </summary>
        [Input("filterRule")]
        public Input<string>? FilterRule { get; set; }

        /// <summary>
        /// Forces this resource to save, even if errors are present.
        /// </summary>
        [Input("forceSave")]
        public Input<bool>? ForceSave { get; set; }

        /// <summary>
        /// The human-readable name of this integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The common prefix, if any, appended to all CloudTrail log files.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// The AWS region of the S3 bucket where CloudTrail logs are stored.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The external ID corresponding to the Role ARN.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// A value denoting which cloud service this service integrates with.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        /// <summary>
        /// How often, in minutes, to refresh the service.
        /// </summary>
        [Input("serviceRefreshRateInMinutes")]
        public Input<int>? ServiceRefreshRateInMinutes { get; set; }

        public CloudIntegrationCloudTrailArgs()
        {
        }
        public static new CloudIntegrationCloudTrailArgs Empty => new CloudIntegrationCloudTrailArgs();
    }

    public sealed class CloudIntegrationCloudTrailState : global::Pulumi.ResourceArgs
    {
        [Input("additionalTags")]
        private InputMap<string>? _additionalTags;

        /// <summary>
        /// A list of point tag key-values to add to every point ingested using this integration.
        /// </summary>
        public InputMap<string> AdditionalTags
        {
            get => _additionalTags ?? (_additionalTags = new InputMap<string>());
            set => _additionalTags = value;
        }

        /// <summary>
        /// Name of the S3 bucket where CloudTrail logs are stored.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Rule to filter CloudTrail log event.
        /// </summary>
        [Input("filterRule")]
        public Input<string>? FilterRule { get; set; }

        /// <summary>
        /// Forces this resource to save, even if errors are present.
        /// </summary>
        [Input("forceSave")]
        public Input<bool>? ForceSave { get; set; }

        /// <summary>
        /// The human-readable name of this integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The common prefix, if any, appended to all CloudTrail log files.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// The AWS region of the S3 bucket where CloudTrail logs are stored.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The external ID corresponding to the Role ARN.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// A value denoting which cloud service this service integrates with.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// How often, in minutes, to refresh the service.
        /// </summary>
        [Input("serviceRefreshRateInMinutes")]
        public Input<int>? ServiceRefreshRateInMinutes { get; set; }

        public CloudIntegrationCloudTrailState()
        {
        }
        public static new CloudIntegrationCloudTrailState Empty => new CloudIntegrationCloudTrailState();
    }
}
