// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    public static class GetDashboard
    {
        /// <summary>
        /// Use this data source to get information about a certain Wavefront dashboard by its ID.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Wavefront = Pulumi.Wavefront;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Wavefront.GetDashboard.Invoke(new()
        ///     {
        ///         Id = "dashboard-id",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDashboardResult> InvokeAsync(GetDashboardArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDashboardResult>("wavefront:index/getDashboard:getDashboard", args ?? new GetDashboardArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a certain Wavefront dashboard by its ID.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Wavefront = Pulumi.Wavefront;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Wavefront.GetDashboard.Invoke(new()
        ///     {
        ///         Id = "dashboard-id",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDashboardResult> Invoke(GetDashboardInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDashboardResult>("wavefront:index/getDashboard:getDashboard", args ?? new GetDashboardInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDashboardArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID associated with the dashboard data to be fetched.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetDashboardArgs()
        {
        }
        public static new GetDashboardArgs Empty => new GetDashboardArgs();
    }

    public sealed class GetDashboardInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID associated with the dashboard data to be fetched.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetDashboardInvokeArgs()
        {
        }
        public static new GetDashboardInvokeArgs Empty => new GetDashboardInvokeArgs();
    }


    [OutputType]
    public sealed class GetDashboardResult
    {
        /// <summary>
        /// A list of users that have modify ACL access to the dashboard.
        /// </summary>
        public readonly ImmutableArray<string> CanModifies;
        /// <summary>
        /// A list of users that have view ACL access to the dashboard.
        /// </summary>
        public readonly ImmutableArray<string> CanViews;
        public readonly string ChartTitleBgColor;
        public readonly string ChartTitleColor;
        public readonly int ChartTitleScalar;
        public readonly int CreatedEpochMillis;
        public readonly string CreatorId;
        public readonly string Customer;
        public readonly int DefaultEndTime;
        public readonly int DefaultStartTime;
        public readonly string DefaultTimeWindow;
        public readonly bool Deleted;
        /// <summary>
        /// Description of the chart.
        /// </summary>
        public readonly string Description;
        public readonly bool DisplayDescription;
        /// <summary>
        /// Whether the dashboard parameters section is opened by default when the dashboard
        /// is shown.
        /// </summary>
        public readonly bool DisplayQueryParameters;
        /// <summary>
        /// Whether the "pills" quick-linked the sections of the dashboard are
        /// displayed by default when the dashboard is shown.
        /// </summary>
        public readonly bool DisplaySectionTableOfContents;
        /// <summary>
        /// How charts belonging to this dashboard should display events. `BYCHART` is default if
        /// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        /// </summary>
        public readonly string EventFilterType;
        public readonly string EventQuery;
        public readonly bool Favorite;
        public readonly bool Hidden;
        public readonly string Id;
        /// <summary>
        /// The name of the parameters.
        /// </summary>
        public readonly string Name;
        public readonly int NumCharts;
        public readonly int NumFavorites;
        /// <summary>
        /// The current JSON representation of dashboard parameters. See parameter details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDashboardParameterDetailResult> ParameterDetails;
        public readonly ImmutableDictionary<string, object> Parameters;
        public readonly ImmutableArray<Outputs.GetDashboardSectionResult> Sections;
        public readonly bool SystemOwned;
        /// <summary>
        /// A set of tags to assign to this resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly int UpdatedEpochMillis;
        public readonly string UpdaterId;
        /// <summary>
        /// Unique identifier, also a URL slug of the dashboard.
        /// </summary>
        public readonly string Url;
        public readonly int ViewsLastDay;
        public readonly int ViewsLastMonth;
        public readonly int ViewsLastWeek;

        [OutputConstructor]
        private GetDashboardResult(
            ImmutableArray<string> canModifies,

            ImmutableArray<string> canViews,

            string chartTitleBgColor,

            string chartTitleColor,

            int chartTitleScalar,

            int createdEpochMillis,

            string creatorId,

            string customer,

            int defaultEndTime,

            int defaultStartTime,

            string defaultTimeWindow,

            bool deleted,

            string description,

            bool displayDescription,

            bool displayQueryParameters,

            bool displaySectionTableOfContents,

            string eventFilterType,

            string eventQuery,

            bool favorite,

            bool hidden,

            string id,

            string name,

            int numCharts,

            int numFavorites,

            ImmutableArray<Outputs.GetDashboardParameterDetailResult> parameterDetails,

            ImmutableDictionary<string, object> parameters,

            ImmutableArray<Outputs.GetDashboardSectionResult> sections,

            bool systemOwned,

            ImmutableArray<string> tags,

            int updatedEpochMillis,

            string updaterId,

            string url,

            int viewsLastDay,

            int viewsLastMonth,

            int viewsLastWeek)
        {
            CanModifies = canModifies;
            CanViews = canViews;
            ChartTitleBgColor = chartTitleBgColor;
            ChartTitleColor = chartTitleColor;
            ChartTitleScalar = chartTitleScalar;
            CreatedEpochMillis = createdEpochMillis;
            CreatorId = creatorId;
            Customer = customer;
            DefaultEndTime = defaultEndTime;
            DefaultStartTime = defaultStartTime;
            DefaultTimeWindow = defaultTimeWindow;
            Deleted = deleted;
            Description = description;
            DisplayDescription = displayDescription;
            DisplayQueryParameters = displayQueryParameters;
            DisplaySectionTableOfContents = displaySectionTableOfContents;
            EventFilterType = eventFilterType;
            EventQuery = eventQuery;
            Favorite = favorite;
            Hidden = hidden;
            Id = id;
            Name = name;
            NumCharts = numCharts;
            NumFavorites = numFavorites;
            ParameterDetails = parameterDetails;
            Parameters = parameters;
            Sections = sections;
            SystemOwned = systemOwned;
            Tags = tags;
            UpdatedEpochMillis = updatedEpochMillis;
            UpdaterId = updaterId;
            Url = url;
            ViewsLastDay = viewsLastDay;
            ViewsLastMonth = viewsLastMonth;
            ViewsLastWeek = viewsLastWeek;
        }
    }
}
