// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront.Inputs
{

    public sealed class DashboardSectionRowChartChartSettingArgs : Pulumi.ResourceArgs
    {
        [Input("autoColumnTags")]
        public Input<bool>? AutoColumnTags { get; set; }

        [Input("columnTags")]
        public Input<string>? ColumnTags { get; set; }

        [Input("customTags")]
        private InputList<string>? _customTags;
        public InputList<string> CustomTags
        {
            get => _customTags ?? (_customTags = new InputList<string>());
            set => _customTags = value;
        }

        [Input("expectedDataSpacing")]
        public Input<int>? ExpectedDataSpacing { get; set; }

        [Input("fixedLegendDisplayStats")]
        private InputList<string>? _fixedLegendDisplayStats;
        public InputList<string> FixedLegendDisplayStats
        {
            get => _fixedLegendDisplayStats ?? (_fixedLegendDisplayStats = new InputList<string>());
            set => _fixedLegendDisplayStats = value;
        }

        [Input("fixedLegendEnabled")]
        public Input<bool>? FixedLegendEnabled { get; set; }

        [Input("fixedLegendFilterField")]
        public Input<string>? FixedLegendFilterField { get; set; }

        [Input("fixedLegendFilterLimit")]
        public Input<int>? FixedLegendFilterLimit { get; set; }

        [Input("fixedLegendFilterSort")]
        public Input<string>? FixedLegendFilterSort { get; set; }

        [Input("fixedLegendHideLabel")]
        public Input<bool>? FixedLegendHideLabel { get; set; }

        [Input("fixedLegendPosition")]
        public Input<string>? FixedLegendPosition { get; set; }

        [Input("fixedLegendUseRawStats")]
        public Input<bool>? FixedLegendUseRawStats { get; set; }

        [Input("groupBySource")]
        public Input<bool>? GroupBySource { get; set; }

        [Input("invertDynamicLegendHoverControl")]
        public Input<bool>? InvertDynamicLegendHoverControl { get; set; }

        [Input("lineType")]
        public Input<string>? LineType { get; set; }

        [Input("max")]
        public Input<double>? Max { get; set; }

        [Input("min")]
        public Input<double>? Min { get; set; }

        [Input("numTags")]
        public Input<int>? NumTags { get; set; }

        [Input("plainMarkdownContent")]
        public Input<string>? PlainMarkdownContent { get; set; }

        [Input("showHosts")]
        public Input<bool>? ShowHosts { get; set; }

        [Input("showLabels")]
        public Input<bool>? ShowLabels { get; set; }

        [Input("showRawValues")]
        public Input<bool>? ShowRawValues { get; set; }

        [Input("sortValuesDescending")]
        public Input<bool>? SortValuesDescending { get; set; }

        [Input("sparklineDecimalPrecision")]
        public Input<int>? SparklineDecimalPrecision { get; set; }

        [Input("sparklineDisplayColor")]
        public Input<string>? SparklineDisplayColor { get; set; }

        [Input("sparklineDisplayFontSize")]
        public Input<string>? SparklineDisplayFontSize { get; set; }

        [Input("sparklineDisplayHorizontalPosition")]
        public Input<string>? SparklineDisplayHorizontalPosition { get; set; }

        [Input("sparklineDisplayPostfix")]
        public Input<string>? SparklineDisplayPostfix { get; set; }

        [Input("sparklineDisplayPrefix")]
        public Input<string>? SparklineDisplayPrefix { get; set; }

        [Input("sparklineDisplayValueType")]
        public Input<string>? SparklineDisplayValueType { get; set; }

        [Input("sparklineDisplayVerticalPosition")]
        public Input<string>? SparklineDisplayVerticalPosition { get; set; }

        [Input("sparklineFillColor")]
        public Input<string>? SparklineFillColor { get; set; }

        [Input("sparklineLineColor")]
        public Input<string>? SparklineLineColor { get; set; }

        [Input("sparklineSize")]
        public Input<string>? SparklineSize { get; set; }

        [Input("sparklineValueColorMapApplyTo")]
        public Input<string>? SparklineValueColorMapApplyTo { get; set; }

        [Input("sparklineValueColorMapColors")]
        private InputList<string>? _sparklineValueColorMapColors;
        public InputList<string> SparklineValueColorMapColors
        {
            get => _sparklineValueColorMapColors ?? (_sparklineValueColorMapColors = new InputList<string>());
            set => _sparklineValueColorMapColors = value;
        }

        [Input("sparklineValueColorMapValues")]
        private InputList<int>? _sparklineValueColorMapValues;
        public InputList<int> SparklineValueColorMapValues
        {
            get => _sparklineValueColorMapValues ?? (_sparklineValueColorMapValues = new InputList<int>());
            set => _sparklineValueColorMapValues = value;
        }

        [Input("sparklineValueColorMapValuesV2s")]
        private InputList<double>? _sparklineValueColorMapValuesV2s;
        public InputList<double> SparklineValueColorMapValuesV2s
        {
            get => _sparklineValueColorMapValuesV2s ?? (_sparklineValueColorMapValuesV2s = new InputList<double>());
            set => _sparklineValueColorMapValuesV2s = value;
        }

        [Input("sparklineValueTextMapTexts")]
        private InputList<string>? _sparklineValueTextMapTexts;
        public InputList<string> SparklineValueTextMapTexts
        {
            get => _sparklineValueTextMapTexts ?? (_sparklineValueTextMapTexts = new InputList<string>());
            set => _sparklineValueTextMapTexts = value;
        }

        [Input("sparklineValueTextMapThresholds")]
        private InputList<double>? _sparklineValueTextMapThresholds;
        public InputList<double> SparklineValueTextMapThresholds
        {
            get => _sparklineValueTextMapThresholds ?? (_sparklineValueTextMapThresholds = new InputList<double>());
            set => _sparklineValueTextMapThresholds = value;
        }

        [Input("stackType")]
        public Input<string>? StackType { get; set; }

        [Input("tagMode")]
        public Input<string>? TagMode { get; set; }

        [Input("timeBasedColoring")]
        public Input<bool>? TimeBasedColoring { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("windowSize")]
        public Input<int>? WindowSize { get; set; }

        [Input("windowing")]
        public Input<string>? Windowing { get; set; }

        [Input("xmax")]
        public Input<double>? Xmax { get; set; }

        [Input("xmin")]
        public Input<double>? Xmin { get; set; }

        [Input("y0ScaleSiBy1024")]
        public Input<bool>? Y0ScaleSiBy1024 { get; set; }

        [Input("y0UnitAutoscaling")]
        public Input<bool>? Y0UnitAutoscaling { get; set; }

        [Input("y1ScaleSiBy1024")]
        public Input<bool>? Y1ScaleSiBy1024 { get; set; }

        [Input("y1UnitAutoscaling")]
        public Input<bool>? Y1UnitAutoscaling { get; set; }

        [Input("y1Units")]
        public Input<string>? Y1Units { get; set; }

        [Input("y1max")]
        public Input<double>? Y1max { get; set; }

        [Input("y1min")]
        public Input<double>? Y1min { get; set; }

        [Input("ymax")]
        public Input<double>? Ymax { get; set; }

        [Input("ymin")]
        public Input<double>? Ymin { get; set; }

        public DashboardSectionRowChartChartSettingArgs()
        {
        }
    }
}
