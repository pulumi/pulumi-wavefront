// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront.Inputs
{

    public sealed class DashboardSectionRowChartChartSettingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// deprecated
        /// </summary>
        [Input("autoColumnTags")]
        public Input<bool>? AutoColumnTags { get; set; }

        /// <summary>
        /// deprecated
        /// </summary>
        [Input("columnTags")]
        public Input<string>? ColumnTags { get; set; }

        [Input("customTags")]
        private InputList<string>? _customTags;

        /// <summary>
        /// For the tabular view, a list of point tags to display when using the `custom` tag display mode
        /// </summary>
        public InputList<string> CustomTags
        {
            get => _customTags ?? (_customTags = new InputList<string>());
            set => _customTags = value;
        }

        /// <summary>
        /// Threshold (in seconds) for time delta between consecutive points in a series
        /// above which a dotted line will replace a solid in in line plots. Default 60
        /// </summary>
        [Input("expectedDataSpacing")]
        public Input<int>? ExpectedDataSpacing { get; set; }

        [Input("fixedLegendDisplayStats")]
        private InputList<string>? _fixedLegendDisplayStats;

        /// <summary>
        /// For a chart with a fixed legend, a list of statistics to display in the legend
        /// </summary>
        public InputList<string> FixedLegendDisplayStats
        {
            get => _fixedLegendDisplayStats ?? (_fixedLegendDisplayStats = new InputList<string>());
            set => _fixedLegendDisplayStats = value;
        }

        /// <summary>
        /// Whether to enable a fixed tabular legend adjacent to the chart
        /// </summary>
        [Input("fixedLegendEnabled")]
        public Input<bool>? FixedLegendEnabled { get; set; }

        /// <summary>
        /// Statistic to use for determining whether a series is displayed on the fixed legend.
        /// Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, `COUNT`
        /// </summary>
        [Input("fixedLegendFilterField")]
        public Input<string>? FixedLegendFilterField { get; set; }

        /// <summary>
        /// Number of series to include in the fixed legend
        /// </summary>
        [Input("fixedLegendFilterLimit")]
        public Input<int>? FixedLegendFilterLimit { get; set; }

        /// <summary>
        /// Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
        /// are `TOP`, and `BOTTOM`
        /// </summary>
        [Input("fixedLegendFilterSort")]
        public Input<string>? FixedLegendFilterSort { get; set; }

        /// <summary>
        /// deprecated
        /// </summary>
        [Input("fixedLegendHideLabel")]
        public Input<bool>? FixedLegendHideLabel { get; set; }

        /// <summary>
        /// Where the fixed legend should be displayed with respect ot the chart.
        /// Valid options are `RIGHt`, `TOP`, `LEFT`, `BOTTOM`
        /// </summary>
        [Input("fixedLegendPosition")]
        public Input<string>? FixedLegendPosition { get; set; }

        /// <summary>
        /// If `true`, the legend uses non-summarized stats instead of summarized
        /// </summary>
        [Input("fixedLegendUseRawStats")]
        public Input<bool>? FixedLegendUseRawStats { get; set; }

        /// <summary>
        /// For the tabular view, whether to group multi metrics into a single row by a common source.
        /// If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host will be displayed as different
        /// columns in the same row
        /// </summary>
        [Input("groupBySource")]
        public Input<bool>? GroupBySource { get; set; }

        /// <summary>
        /// Whether to disable the display of the floating legend (but
        /// reenable it when the ctrl-key is pressed)
        /// </summary>
        [Input("invertDynamicLegendHoverControl")]
        public Input<bool>? InvertDynamicLegendHoverControl { get; set; }

        /// <summary>
        /// Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`, 
        /// `step-after`, `basis`, `cardinal`, `monotone`
        /// </summary>
        [Input("lineType")]
        public Input<string>? LineType { get; set; }

        /// <summary>
        /// Max value of the Y-axis. Set to null or leave blank for auto
        /// </summary>
        [Input("max")]
        public Input<double>? Max { get; set; }

        /// <summary>
        /// Min value of the Y-axis. Set to null or leave blank for auto
        /// </summary>
        [Input("min")]
        public Input<double>? Min { get; set; }

        /// <summary>
        /// For the tabular view, how many point tags to display
        /// </summary>
        [Input("numTags")]
        public Input<int>? NumTags { get; set; }

        /// <summary>
        /// The markdown content for a Markdown display, in plain text.
        /// </summary>
        [Input("plainMarkdownContent")]
        public Input<string>? PlainMarkdownContent { get; set; }

        /// <summary>
        /// For the tabular view, whether to display sources. Default is `true`
        /// </summary>
        [Input("showHosts")]
        public Input<bool>? ShowHosts { get; set; }

        /// <summary>
        /// For the tabular view, whether to display labels. Default is `true`
        /// </summary>
        [Input("showLabels")]
        public Input<bool>? ShowLabels { get; set; }

        /// <summary>
        /// For the tabular view, whether to display raw values. Default is `false`
        /// </summary>
        [Input("showRawValues")]
        public Input<bool>? ShowRawValues { get; set; }

        /// <summary>
        /// For the tabular view, whether to display display values in descending order. Default is `false`
        /// </summary>
        [Input("sortValuesDescending")]
        public Input<bool>? SortValuesDescending { get; set; }

        /// <summary>
        /// For the single stat view, the decimal precision of the displayed number
        /// </summary>
        [Input("sparklineDecimalPrecision")]
        public Input<int>? SparklineDecimalPrecision { get; set; }

        /// <summary>
        /// For the single stat view, the color of the displayed text (when not dynamically determined). 
        /// Values should be in `rgba(,,,,)` format
        /// </summary>
        [Input("sparklineDisplayColor")]
        public Input<string>? SparklineDisplayColor { get; set; }

        /// <summary>
        /// For the single stat view, the font size of the displayed text, in percent
        /// </summary>
        [Input("sparklineDisplayFontSize")]
        public Input<string>? SparklineDisplayFontSize { get; set; }

        /// <summary>
        /// For the single stat view, the horizontal position of the displayed text.
        /// Valid options are `MIDDLE`, `LEFT`, `RIGHT`
        /// </summary>
        [Input("sparklineDisplayHorizontalPosition")]
        public Input<string>? SparklineDisplayHorizontalPosition { get; set; }

        /// <summary>
        /// For the single stat view, a string to append to the displayed text
        /// </summary>
        [Input("sparklineDisplayPostfix")]
        public Input<string>? SparklineDisplayPostfix { get; set; }

        /// <summary>
        /// For the single stat view, a string to add before the displayed text
        /// </summary>
        [Input("sparklineDisplayPrefix")]
        public Input<string>? SparklineDisplayPrefix { get; set; }

        /// <summary>
        /// For the single stat view, where to display the name of the query or the value of the query.
        /// Valid options are `VALUE` or `LABEL`
        /// </summary>
        [Input("sparklineDisplayValueType")]
        public Input<string>? SparklineDisplayValueType { get; set; }

        /// <summary>
        /// deprecated
        /// </summary>
        [Input("sparklineDisplayVerticalPosition")]
        public Input<string>? SparklineDisplayVerticalPosition { get; set; }

        /// <summary>
        /// For the single stat view, the color of the background fill.  Values should be
        /// in `rgba(,,,,)`
        /// </summary>
        [Input("sparklineFillColor")]
        public Input<string>? SparklineFillColor { get; set; }

        /// <summary>
        /// For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format
        /// </summary>
        [Input("sparklineLineColor")]
        public Input<string>? SparklineLineColor { get; set; }

        /// <summary>
        /// For the single stat view, This determines whether the sparkline of the statistic is displayed in the chart `BACKGROUND`, `BOTTOM`, or `NONE`.
        /// Valid options are `BACKGROUND`, `BOTTOM`, `NONE`
        /// </summary>
        [Input("sparklineSize")]
        public Input<string>? SparklineSize { get; set; }

        /// <summary>
        /// For the single stat view, whether to apply dyunamic color settings to 
        /// the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`
        /// </summary>
        [Input("sparklineValueColorMapApplyTo")]
        public Input<string>? SparklineValueColorMapApplyTo { get; set; }

        [Input("sparklineValueColorMapColors")]
        private InputList<string>? _sparklineValueColorMapColors;

        /// <summary>
        /// For the single stat view, A list of colors that differing query values map to. 
        /// Must contain one more element than `sparkline_value_color_map_values_v2`. Values should be in `rgba(,,,,)`
        /// </summary>
        public InputList<string> SparklineValueColorMapColors
        {
            get => _sparklineValueColorMapColors ?? (_sparklineValueColorMapColors = new InputList<string>());
            set => _sparklineValueColorMapColors = value;
        }

        [Input("sparklineValueColorMapValues")]
        private InputList<int>? _sparklineValueColorMapValues;

        /// <summary>
        /// deprecated
        /// </summary>
        public InputList<int> SparklineValueColorMapValues
        {
            get => _sparklineValueColorMapValues ?? (_sparklineValueColorMapValues = new InputList<int>());
            set => _sparklineValueColorMapValues = value;
        }

        [Input("sparklineValueColorMapValuesV2s")]
        private InputList<double>? _sparklineValueColorMapValuesV2s;

        /// <summary>
        /// For the single stat view, a list of boundaries for mapping different
        /// query values to colors.  Must contain one less element than `sparkline_value_color_map_colors`
        /// </summary>
        public InputList<double> SparklineValueColorMapValuesV2s
        {
            get => _sparklineValueColorMapValuesV2s ?? (_sparklineValueColorMapValuesV2s = new InputList<double>());
            set => _sparklineValueColorMapValuesV2s = value;
        }

        [Input("sparklineValueTextMapTexts")]
        private InputList<string>? _sparklineValueTextMapTexts;

        /// <summary>
        /// For the single stat view, a list of display text values that different query
        /// values map to.  Must contain one more element than `sparkline_value_text_map_thresholds`
        /// </summary>
        public InputList<string> SparklineValueTextMapTexts
        {
            get => _sparklineValueTextMapTexts ?? (_sparklineValueTextMapTexts = new InputList<string>());
            set => _sparklineValueTextMapTexts = value;
        }

        [Input("sparklineValueTextMapThresholds")]
        private InputList<double>? _sparklineValueTextMapThresholds;

        /// <summary>
        /// For the single stat view, a list of threshold boundaries for 
        /// mapping different query values to display text.  Must contain one less element than `sparkline_value_text_map_text`
        /// </summary>
        public InputList<double> SparklineValueTextMapThresholds
        {
            get => _sparklineValueTextMapThresholds ?? (_sparklineValueTextMapThresholds = new InputList<double>());
            set => _sparklineValueTextMapThresholds = value;
        }

        /// <summary>
        /// Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
        /// stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
        /// center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, `bars`
        /// </summary>
        [Input("stackType")]
        public Input<string>? StackType { get; set; }

        /// <summary>
        /// For the tabular view, which mode to use to determine which point tags to display.
        /// Valid options are `all`, `top`, or `custom`
        /// </summary>
        [Input("tagMode")]
        public Input<string>? TagMode { get; set; }

        /// <summary>
        /// For x-y scatterplots, whether to color more recent points as darker than older points
        /// </summary>
        [Input("timeBasedColoring")]
        public Input<bool>? TimeBasedColoring { get; set; }

        /// <summary>
        /// Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to 
        /// the Stacked Area plot, `table` to the Tabular View, `scatterploy-xy` to Scatter Plot, `markdown-widget` to the
        /// Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
        /// `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
        /// `top-k`, `status-list`, `histogram`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Width, in minutes, of the time window to use for `last` windowing
        /// </summary>
        [Input("windowSize")]
        public Input<int>? WindowSize { get; set; }

        /// <summary>
        /// For the tabular view, whether to use the full time window for the query or the last X minutes.
        /// Valid options are `full` or `last`
        /// </summary>
        [Input("windowing")]
        public Input<string>? Windowing { get; set; }

        /// <summary>
        /// For x-y scatterplots, max value for the X-axis. Set to null for auto
        /// </summary>
        [Input("xmax")]
        public Input<double>? Xmax { get; set; }

        /// <summary>
        /// For x-y scatterplots, min value for the X-axis. Set to null for auto
        /// </summary>
        [Input("xmin")]
        public Input<double>? Xmin { get; set; }

        /// <summary>
        /// Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)
        /// </summary>
        [Input("y0ScaleSiBy1024")]
        public Input<bool>? Y0ScaleSiBy1024 { get; set; }

        /// <summary>
        /// Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units
        /// </summary>
        [Input("y0UnitAutoscaling")]
        public Input<bool>? Y0UnitAutoscaling { get; set; }

        /// <summary>
        /// Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)
        /// </summary>
        [Input("y1ScaleSiBy1024")]
        public Input<bool>? Y1ScaleSiBy1024 { get; set; }

        /// <summary>
        /// Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units
        /// </summary>
        [Input("y1UnitAutoscaling")]
        public Input<bool>? Y1UnitAutoscaling { get; set; }

        /// <summary>
        /// For plots with multiple Y-axes, units for right side Y-axis
        /// </summary>
        [Input("y1Units")]
        public Input<string>? Y1Units { get; set; }

        /// <summary>
        /// For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto
        /// </summary>
        [Input("y1max")]
        public Input<double>? Y1max { get; set; }

        /// <summary>
        /// For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto
        /// </summary>
        [Input("y1min")]
        public Input<double>? Y1min { get; set; }

        /// <summary>
        /// For x-y scatterplots, max value for the Y-axis. Set to null for auto
        /// </summary>
        [Input("ymax")]
        public Input<double>? Ymax { get; set; }

        /// <summary>
        /// For x-y scatterplots, min value for the Y-axis. Set to null for auto
        /// </summary>
        [Input("ymin")]
        public Input<double>? Ymin { get; set; }

        public DashboardSectionRowChartChartSettingArgs()
        {
        }
    }
}
