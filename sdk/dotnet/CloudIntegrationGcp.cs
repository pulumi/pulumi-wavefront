// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    /// <summary>
    /// Provides a Wavefront Cloud Integration for Google Cloud Platform. This allows Google Cloud Platform cloud
    /// integrations to be created, updated, and deleted.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Wavefront = Pulumi.Wavefront;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var gcp = new Wavefront.CloudIntegrationGcp("gcp", new()
    ///     {
    ///         Name = "Test Integration",
    ///         ProjectId = "example-gcp-project",
    ///         JsonKey = @"{...your gcp key ...}
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GCP Cloud Integrations can be imported by using the `id`, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp gcp a411c16b-3cf7-4f03-bf11-8ca05aab898d
    /// ```
    /// </summary>
    [WavefrontResourceType("wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp")]
    public partial class CloudIntegrationGcp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of point tag key-values to add to every point ingested using this integration.
        /// </summary>
        [Output("additionalTags")]
        public Output<ImmutableDictionary<string, string>?> AdditionalTags { get; private set; } = null!;

        /// <summary>
        /// A list of Google Cloud Platform (GCP) services. Valid values are `APPENGINE`,
        /// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
        /// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
        /// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
        /// `TPU`, and `VPN`.
        /// </summary>
        [Output("categories")]
        public Output<ImmutableArray<string>> Categories { get; private set; } = null!;

        /// <summary>
        /// Forces this resource to save, even if errors are present.
        /// </summary>
        [Output("forceSave")]
        public Output<bool?> ForceSave { get; private set; } = null!;

        /// <summary>
        /// Private key for a Google Cloud Platform (GCP) service account within your project.
        /// The account must have at least Viewer permissions. This key must be in the JSON format generated by GCP.
        /// </summary>
        [Output("jsonKey")]
        public Output<string> JsonKey { get; private set; } = null!;

        /// <summary>
        /// A regular expression that a metric name must match (case-insensitively) in order to be ingested.
        /// </summary>
        [Output("metricFilterRegex")]
        public Output<string?> MetricFilterRegex { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of this integration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Google Cloud Platform (GCP) Project ID.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// A value denoting which cloud service this service integrates with.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// How often, in minutes, to refresh the service.
        /// </summary>
        [Output("serviceRefreshRateInMinutes")]
        public Output<int?> ServiceRefreshRateInMinutes { get; private set; } = null!;


        /// <summary>
        /// Create a CloudIntegrationGcp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudIntegrationGcp(string name, CloudIntegrationGcpArgs args, CustomResourceOptions? options = null)
            : base("wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp", name, args ?? new CloudIntegrationGcpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudIntegrationGcp(string name, Input<string> id, CloudIntegrationGcpState? state = null, CustomResourceOptions? options = null)
            : base("wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "jsonKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudIntegrationGcp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudIntegrationGcp Get(string name, Input<string> id, CloudIntegrationGcpState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudIntegrationGcp(name, id, state, options);
        }
    }

    public sealed class CloudIntegrationGcpArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalTags")]
        private InputMap<string>? _additionalTags;

        /// <summary>
        /// A list of point tag key-values to add to every point ingested using this integration.
        /// </summary>
        public InputMap<string> AdditionalTags
        {
            get => _additionalTags ?? (_additionalTags = new InputMap<string>());
            set => _additionalTags = value;
        }

        [Input("categories")]
        private InputList<string>? _categories;

        /// <summary>
        /// A list of Google Cloud Platform (GCP) services. Valid values are `APPENGINE`,
        /// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
        /// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
        /// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
        /// `TPU`, and `VPN`.
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        /// <summary>
        /// Forces this resource to save, even if errors are present.
        /// </summary>
        [Input("forceSave")]
        public Input<bool>? ForceSave { get; set; }

        [Input("jsonKey", required: true)]
        private Input<string>? _jsonKey;

        /// <summary>
        /// Private key for a Google Cloud Platform (GCP) service account within your project.
        /// The account must have at least Viewer permissions. This key must be in the JSON format generated by GCP.
        /// </summary>
        public Input<string>? JsonKey
        {
            get => _jsonKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _jsonKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A regular expression that a metric name must match (case-insensitively) in order to be ingested.
        /// </summary>
        [Input("metricFilterRegex")]
        public Input<string>? MetricFilterRegex { get; set; }

        /// <summary>
        /// The human-readable name of this integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Google Cloud Platform (GCP) Project ID.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// A value denoting which cloud service this service integrates with.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// How often, in minutes, to refresh the service.
        /// </summary>
        [Input("serviceRefreshRateInMinutes")]
        public Input<int>? ServiceRefreshRateInMinutes { get; set; }

        public CloudIntegrationGcpArgs()
        {
        }
        public static new CloudIntegrationGcpArgs Empty => new CloudIntegrationGcpArgs();
    }

    public sealed class CloudIntegrationGcpState : global::Pulumi.ResourceArgs
    {
        [Input("additionalTags")]
        private InputMap<string>? _additionalTags;

        /// <summary>
        /// A list of point tag key-values to add to every point ingested using this integration.
        /// </summary>
        public InputMap<string> AdditionalTags
        {
            get => _additionalTags ?? (_additionalTags = new InputMap<string>());
            set => _additionalTags = value;
        }

        [Input("categories")]
        private InputList<string>? _categories;

        /// <summary>
        /// A list of Google Cloud Platform (GCP) services. Valid values are `APPENGINE`,
        /// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
        /// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
        /// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
        /// `TPU`, and `VPN`.
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        /// <summary>
        /// Forces this resource to save, even if errors are present.
        /// </summary>
        [Input("forceSave")]
        public Input<bool>? ForceSave { get; set; }

        [Input("jsonKey")]
        private Input<string>? _jsonKey;

        /// <summary>
        /// Private key for a Google Cloud Platform (GCP) service account within your project.
        /// The account must have at least Viewer permissions. This key must be in the JSON format generated by GCP.
        /// </summary>
        public Input<string>? JsonKey
        {
            get => _jsonKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _jsonKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A regular expression that a metric name must match (case-insensitively) in order to be ingested.
        /// </summary>
        [Input("metricFilterRegex")]
        public Input<string>? MetricFilterRegex { get; set; }

        /// <summary>
        /// The human-readable name of this integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Google Cloud Platform (GCP) Project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// A value denoting which cloud service this service integrates with.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// How often, in minutes, to refresh the service.
        /// </summary>
        [Input("serviceRefreshRateInMinutes")]
        public Input<int>? ServiceRefreshRateInMinutes { get; set; }

        public CloudIntegrationGcpState()
        {
        }
        public static new CloudIntegrationGcpState Empty => new CloudIntegrationGcpState();
    }
}
