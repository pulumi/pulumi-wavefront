// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    public static class GetUserGroup
    {
        /// <summary>
        /// Use this data source to get information about a Wavefront user group by its ID.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Wavefront = Pulumi.Wavefront;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get the information about the user group.
        ///     var example = Wavefront.GetUserGroup.Invoke(new()
        ///     {
        ///         Id = "user-group-id",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetUserGroupResult> InvokeAsync(GetUserGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserGroupResult>("wavefront:index/getUserGroup:getUserGroup", args ?? new GetUserGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Wavefront user group by its ID.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Wavefront = Pulumi.Wavefront;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get the information about the user group.
        ///     var example = Wavefront.GetUserGroup.Invoke(new()
        ///     {
        ///         Id = "user-group-id",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetUserGroupResult> Invoke(GetUserGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserGroupResult>("wavefront:index/getUserGroup:getUserGroup", args ?? new GetUserGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID associated with the user group data to be fetched.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetUserGroupArgs()
        {
        }
        public static new GetUserGroupArgs Empty => new GetUserGroupArgs();
    }

    public sealed class GetUserGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID associated with the user group data to be fetched.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetUserGroupInvokeArgs()
        {
        }
        public static new GetUserGroupInvokeArgs Empty => new GetUserGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserGroupResult
    {
        /// <summary>
        /// Human-readable description of the group.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of the group in Wavefront.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the group in Wavefront.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of roles associated with the group.
        /// </summary>
        public readonly ImmutableArray<string> Roles;
        /// <summary>
        /// The list of users assigned to the group.
        /// </summary>
        public readonly ImmutableArray<string> Users;

        [OutputConstructor]
        private GetUserGroupResult(
            string description,

            string id,

            string name,

            ImmutableArray<string> roles,

            ImmutableArray<string> users)
        {
            Description = description;
            Id = id;
            Name = name;
            Roles = roles;
            Users = users;
        }
    }
}
