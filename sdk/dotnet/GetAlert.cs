// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Wavefront
{
    public static class GetAlert
    {
        /// <summary>
        /// Use this data source to get information about a Wavefront alert by its ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Wavefront = Pulumi.Wavefront;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get the information about the alert.
        ///     var example = Wavefront.GetAlert.Invoke(new()
        ///     {
        ///         Id = "alert-id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAlertResult> InvokeAsync(GetAlertArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlertResult>("wavefront:index/getAlert:getAlert", args ?? new GetAlertArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Wavefront alert by its ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Wavefront = Pulumi.Wavefront;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get the information about the alert.
        ///     var example = Wavefront.GetAlert.Invoke(new()
        ///     {
        ///         Id = "alert-id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlertResult> Invoke(GetAlertInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertResult>("wavefront:index/getAlert:getAlert", args ?? new GetAlertInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Wavefront alert by its ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Wavefront = Pulumi.Wavefront;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get the information about the alert.
        ///     var example = Wavefront.GetAlert.Invoke(new()
        ///     {
        ///         Id = "alert-id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlertResult> Invoke(GetAlertInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertResult>("wavefront:index/getAlert:getAlert", args ?? new GetAlertInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlertArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID associated with the alert data to be fetched.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("targets")]
        private Dictionary<string, string>? _targets;

        /// <summary>
        /// A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
        /// </summary>
        public Dictionary<string, string> Targets
        {
            get => _targets ?? (_targets = new Dictionary<string, string>());
            set => _targets = value;
        }

        public GetAlertArgs()
        {
        }
        public static new GetAlertArgs Empty => new GetAlertArgs();
    }

    public sealed class GetAlertInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID associated with the alert data to be fetched.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("targets")]
        private InputMap<string>? _targets;

        /// <summary>
        /// A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
        /// </summary>
        public InputMap<string> Targets
        {
            get => _targets ?? (_targets = new InputMap<string>());
            set => _targets = value;
        }

        public GetAlertInvokeArgs()
        {
        }
        public static new GetAlertInvokeArgs Empty => new GetAlertInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlertResult
    {
        /// <summary>
        /// User-supplied additional explanatory information about this alert.
        /// </summary>
        public readonly string AdditionalInformation;
        /// <summary>
        /// A set of user-supplied dashboard and parameters to create dashboard links for triaging alerts.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertAlertTriageDashboardResult> AlertTriageDashboards;
        /// <summary>
        /// The type of alert in Wavefront.
        /// </summary>
        public readonly string AlertType;
        /// <summary>
        /// A list of users or groups that can modify the alert.
        /// </summary>
        public readonly ImmutableArray<string> CanModifies;
        /// <summary>
        /// A list of users or groups that can view the alert.
        /// </summary>
        public readonly ImmutableArray<string> CanViews;
        /// <summary>
        /// A Wavefront query that is evaluated at regular intervals (default is 1 minute). The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes.
        /// </summary>
        public readonly string Condition;
        /// <summary>
        /// A map of severity to condition for which this alert will trigger.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Conditions;
        /// <summary>
        /// A second query the results of which are displayed in the alert user interface instead of the condition query.
        /// </summary>
        public readonly string DisplayExpression;
        /// <summary>
        /// A Boolean flag to enable real-time evaluation.
        /// </summary>
        public readonly bool EvaluateRealtimeData;
        /// <summary>
        /// A list of failing host label pairs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertFailingHostLabelPairResult> FailingHostLabelPairs;
        /// <summary>
        /// The ID of the alert in Wavefront.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of in maintenance host label pairs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertInMaintenanceHostLabelPairResult> InMaintenanceHostLabelPairs;
        /// <summary>
        /// A Boolean flag indicating whether to include obsolete metrics or not.
        /// </summary>
        public readonly bool IncludeObsoleteMetrics;
        /// <summary>
        /// The number of consecutive minutes that a series matching the condition query must evaluate to "true" (non-zero value) before the alert fires.
        /// </summary>
        public readonly int Minutes;
        /// <summary>
        /// The name of the alert as it is displayed in Wavefront.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// How often to re-trigger a continually failing alert.
        /// </summary>
        public readonly int NotificationResendFrequencyMinutes;
        /// <summary>
        /// The specified query is executed every `process_rate_minutes` minutes.
        /// </summary>
        public readonly int ProcessRateMinutes;
        /// <summary>
        /// The number of consecutive minutes that a firing series matching the condition query must evaluate to "false" (zero value) before the alert resolves.
        /// </summary>
        public readonly int ResolveAfterMinutes;
        /// <summary>
        /// A list of user-supplied runbook links for this alert.
        /// </summary>
        public readonly ImmutableArray<string> RunbookLinks;
        /// <summary>
        /// The severity of the alert.
        /// </summary>
        public readonly string Severity;
        public readonly ImmutableArray<string> SeverityLists;
        /// <summary>
        /// The status of the alert.
        /// </summary>
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// A set of tags assigned to the alert.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// An email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes.
        /// </summary>
        public readonly string Target;
        /// <summary>
        /// A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Targets;

        [OutputConstructor]
        private GetAlertResult(
            string additionalInformation,

            ImmutableArray<Outputs.GetAlertAlertTriageDashboardResult> alertTriageDashboards,

            string alertType,

            ImmutableArray<string> canModifies,

            ImmutableArray<string> canViews,

            string condition,

            ImmutableDictionary<string, string> conditions,

            string displayExpression,

            bool evaluateRealtimeData,

            ImmutableArray<Outputs.GetAlertFailingHostLabelPairResult> failingHostLabelPairs,

            string id,

            ImmutableArray<Outputs.GetAlertInMaintenanceHostLabelPairResult> inMaintenanceHostLabelPairs,

            bool includeObsoleteMetrics,

            int minutes,

            string name,

            int notificationResendFrequencyMinutes,

            int processRateMinutes,

            int resolveAfterMinutes,

            ImmutableArray<string> runbookLinks,

            string severity,

            ImmutableArray<string> severityLists,

            ImmutableArray<string> statuses,

            ImmutableArray<string> tags,

            string target,

            ImmutableDictionary<string, string>? targets)
        {
            AdditionalInformation = additionalInformation;
            AlertTriageDashboards = alertTriageDashboards;
            AlertType = alertType;
            CanModifies = canModifies;
            CanViews = canViews;
            Condition = condition;
            Conditions = conditions;
            DisplayExpression = displayExpression;
            EvaluateRealtimeData = evaluateRealtimeData;
            FailingHostLabelPairs = failingHostLabelPairs;
            Id = id;
            InMaintenanceHostLabelPairs = inMaintenanceHostLabelPairs;
            IncludeObsoleteMetrics = includeObsoleteMetrics;
            Minutes = minutes;
            Name = name;
            NotificationResendFrequencyMinutes = notificationResendFrequencyMinutes;
            ProcessRateMinutes = processRateMinutes;
            ResolveAfterMinutes = resolveAfterMinutes;
            RunbookLinks = runbookLinks;
            Severity = severity;
            SeverityLists = severityLists;
            Statuses = statuses;
            Tags = tags;
            Target = target;
            Targets = targets;
        }
    }
}
