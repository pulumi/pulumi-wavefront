# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDashboardResult',
    'AwaitableGetDashboardResult',
    'get_dashboard',
    'get_dashboard_output',
]

@pulumi.output_type
class GetDashboardResult:
    """
    A collection of values returned by getDashboard.
    """
    def __init__(__self__, can_modifies=None, can_views=None, chart_title_bg_color=None, chart_title_color=None, chart_title_scalar=None, created_epoch_millis=None, creator_id=None, customer=None, default_end_time=None, default_start_time=None, default_time_window=None, deleted=None, description=None, display_description=None, display_query_parameters=None, display_section_table_of_contents=None, event_filter_type=None, event_query=None, favorite=None, hidden=None, id=None, name=None, num_charts=None, num_favorites=None, parameter_details=None, parameters=None, sections=None, system_owned=None, tags=None, updated_epoch_millis=None, updater_id=None, url=None, views_last_day=None, views_last_month=None, views_last_week=None):
        if can_modifies and not isinstance(can_modifies, list):
            raise TypeError("Expected argument 'can_modifies' to be a list")
        pulumi.set(__self__, "can_modifies", can_modifies)
        if can_views and not isinstance(can_views, list):
            raise TypeError("Expected argument 'can_views' to be a list")
        pulumi.set(__self__, "can_views", can_views)
        if chart_title_bg_color and not isinstance(chart_title_bg_color, str):
            raise TypeError("Expected argument 'chart_title_bg_color' to be a str")
        pulumi.set(__self__, "chart_title_bg_color", chart_title_bg_color)
        if chart_title_color and not isinstance(chart_title_color, str):
            raise TypeError("Expected argument 'chart_title_color' to be a str")
        pulumi.set(__self__, "chart_title_color", chart_title_color)
        if chart_title_scalar and not isinstance(chart_title_scalar, int):
            raise TypeError("Expected argument 'chart_title_scalar' to be a int")
        pulumi.set(__self__, "chart_title_scalar", chart_title_scalar)
        if created_epoch_millis and not isinstance(created_epoch_millis, int):
            raise TypeError("Expected argument 'created_epoch_millis' to be a int")
        pulumi.set(__self__, "created_epoch_millis", created_epoch_millis)
        if creator_id and not isinstance(creator_id, str):
            raise TypeError("Expected argument 'creator_id' to be a str")
        pulumi.set(__self__, "creator_id", creator_id)
        if customer and not isinstance(customer, str):
            raise TypeError("Expected argument 'customer' to be a str")
        pulumi.set(__self__, "customer", customer)
        if default_end_time and not isinstance(default_end_time, int):
            raise TypeError("Expected argument 'default_end_time' to be a int")
        pulumi.set(__self__, "default_end_time", default_end_time)
        if default_start_time and not isinstance(default_start_time, int):
            raise TypeError("Expected argument 'default_start_time' to be a int")
        pulumi.set(__self__, "default_start_time", default_start_time)
        if default_time_window and not isinstance(default_time_window, str):
            raise TypeError("Expected argument 'default_time_window' to be a str")
        pulumi.set(__self__, "default_time_window", default_time_window)
        if deleted and not isinstance(deleted, bool):
            raise TypeError("Expected argument 'deleted' to be a bool")
        pulumi.set(__self__, "deleted", deleted)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_description and not isinstance(display_description, bool):
            raise TypeError("Expected argument 'display_description' to be a bool")
        pulumi.set(__self__, "display_description", display_description)
        if display_query_parameters and not isinstance(display_query_parameters, bool):
            raise TypeError("Expected argument 'display_query_parameters' to be a bool")
        pulumi.set(__self__, "display_query_parameters", display_query_parameters)
        if display_section_table_of_contents and not isinstance(display_section_table_of_contents, bool):
            raise TypeError("Expected argument 'display_section_table_of_contents' to be a bool")
        pulumi.set(__self__, "display_section_table_of_contents", display_section_table_of_contents)
        if event_filter_type and not isinstance(event_filter_type, str):
            raise TypeError("Expected argument 'event_filter_type' to be a str")
        pulumi.set(__self__, "event_filter_type", event_filter_type)
        if event_query and not isinstance(event_query, str):
            raise TypeError("Expected argument 'event_query' to be a str")
        pulumi.set(__self__, "event_query", event_query)
        if favorite and not isinstance(favorite, bool):
            raise TypeError("Expected argument 'favorite' to be a bool")
        pulumi.set(__self__, "favorite", favorite)
        if hidden and not isinstance(hidden, bool):
            raise TypeError("Expected argument 'hidden' to be a bool")
        pulumi.set(__self__, "hidden", hidden)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if num_charts and not isinstance(num_charts, int):
            raise TypeError("Expected argument 'num_charts' to be a int")
        pulumi.set(__self__, "num_charts", num_charts)
        if num_favorites and not isinstance(num_favorites, int):
            raise TypeError("Expected argument 'num_favorites' to be a int")
        pulumi.set(__self__, "num_favorites", num_favorites)
        if parameter_details and not isinstance(parameter_details, list):
            raise TypeError("Expected argument 'parameter_details' to be a list")
        pulumi.set(__self__, "parameter_details", parameter_details)
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        pulumi.set(__self__, "parameters", parameters)
        if sections and not isinstance(sections, list):
            raise TypeError("Expected argument 'sections' to be a list")
        pulumi.set(__self__, "sections", sections)
        if system_owned and not isinstance(system_owned, bool):
            raise TypeError("Expected argument 'system_owned' to be a bool")
        pulumi.set(__self__, "system_owned", system_owned)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_epoch_millis and not isinstance(updated_epoch_millis, int):
            raise TypeError("Expected argument 'updated_epoch_millis' to be a int")
        pulumi.set(__self__, "updated_epoch_millis", updated_epoch_millis)
        if updater_id and not isinstance(updater_id, str):
            raise TypeError("Expected argument 'updater_id' to be a str")
        pulumi.set(__self__, "updater_id", updater_id)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if views_last_day and not isinstance(views_last_day, int):
            raise TypeError("Expected argument 'views_last_day' to be a int")
        pulumi.set(__self__, "views_last_day", views_last_day)
        if views_last_month and not isinstance(views_last_month, int):
            raise TypeError("Expected argument 'views_last_month' to be a int")
        pulumi.set(__self__, "views_last_month", views_last_month)
        if views_last_week and not isinstance(views_last_week, int):
            raise TypeError("Expected argument 'views_last_week' to be a int")
        pulumi.set(__self__, "views_last_week", views_last_week)

    @property
    @pulumi.getter(name="canModifies")
    def can_modifies(self) -> Sequence[str]:
        """
        A list of users that have modify ACL access to the dashboard.
        """
        return pulumi.get(self, "can_modifies")

    @property
    @pulumi.getter(name="canViews")
    def can_views(self) -> Sequence[str]:
        """
        A list of users that have view ACL access to the dashboard.
        """
        return pulumi.get(self, "can_views")

    @property
    @pulumi.getter(name="chartTitleBgColor")
    def chart_title_bg_color(self) -> str:
        return pulumi.get(self, "chart_title_bg_color")

    @property
    @pulumi.getter(name="chartTitleColor")
    def chart_title_color(self) -> str:
        return pulumi.get(self, "chart_title_color")

    @property
    @pulumi.getter(name="chartTitleScalar")
    def chart_title_scalar(self) -> int:
        return pulumi.get(self, "chart_title_scalar")

    @property
    @pulumi.getter(name="createdEpochMillis")
    def created_epoch_millis(self) -> int:
        return pulumi.get(self, "created_epoch_millis")

    @property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> str:
        return pulumi.get(self, "creator_id")

    @property
    @pulumi.getter
    def customer(self) -> str:
        return pulumi.get(self, "customer")

    @property
    @pulumi.getter(name="defaultEndTime")
    def default_end_time(self) -> int:
        return pulumi.get(self, "default_end_time")

    @property
    @pulumi.getter(name="defaultStartTime")
    def default_start_time(self) -> int:
        return pulumi.get(self, "default_start_time")

    @property
    @pulumi.getter(name="defaultTimeWindow")
    def default_time_window(self) -> str:
        return pulumi.get(self, "default_time_window")

    @property
    @pulumi.getter
    def deleted(self) -> bool:
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the chart.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayDescription")
    def display_description(self) -> bool:
        return pulumi.get(self, "display_description")

    @property
    @pulumi.getter(name="displayQueryParameters")
    def display_query_parameters(self) -> bool:
        """
        Whether the dashboard parameters section is opened by default when the dashboard
        is shown.
        """
        return pulumi.get(self, "display_query_parameters")

    @property
    @pulumi.getter(name="displaySectionTableOfContents")
    def display_section_table_of_contents(self) -> bool:
        """
        Whether the "pills" quick-linked the sections of the dashboard are
        displayed by default when the dashboard is shown.
        """
        return pulumi.get(self, "display_section_table_of_contents")

    @property
    @pulumi.getter(name="eventFilterType")
    def event_filter_type(self) -> str:
        """
        How charts belonging to this dashboard should display events. `BYCHART` is default if
        unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        """
        return pulumi.get(self, "event_filter_type")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> str:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter
    def favorite(self) -> bool:
        return pulumi.get(self, "favorite")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the parameters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numCharts")
    def num_charts(self) -> int:
        return pulumi.get(self, "num_charts")

    @property
    @pulumi.getter(name="numFavorites")
    def num_favorites(self) -> int:
        return pulumi.get(self, "num_favorites")

    @property
    @pulumi.getter(name="parameterDetails")
    def parameter_details(self) -> Sequence['outputs.GetDashboardParameterDetailResult']:
        """
        The current JSON representation of dashboard parameters. See parameter details.
        """
        return pulumi.get(self, "parameter_details")

    @property
    @pulumi.getter
    def parameters(self) -> Mapping[str, Any]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def sections(self) -> Sequence['outputs.GetDashboardSectionResult']:
        return pulumi.get(self, "sections")

    @property
    @pulumi.getter(name="systemOwned")
    def system_owned(self) -> bool:
        return pulumi.get(self, "system_owned")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        A set of tags to assign to this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedEpochMillis")
    def updated_epoch_millis(self) -> int:
        return pulumi.get(self, "updated_epoch_millis")

    @property
    @pulumi.getter(name="updaterId")
    def updater_id(self) -> str:
        return pulumi.get(self, "updater_id")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Unique identifier, also a URL slug of the dashboard.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="viewsLastDay")
    def views_last_day(self) -> int:
        return pulumi.get(self, "views_last_day")

    @property
    @pulumi.getter(name="viewsLastMonth")
    def views_last_month(self) -> int:
        return pulumi.get(self, "views_last_month")

    @property
    @pulumi.getter(name="viewsLastWeek")
    def views_last_week(self) -> int:
        return pulumi.get(self, "views_last_week")


class AwaitableGetDashboardResult(GetDashboardResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDashboardResult(
            can_modifies=self.can_modifies,
            can_views=self.can_views,
            chart_title_bg_color=self.chart_title_bg_color,
            chart_title_color=self.chart_title_color,
            chart_title_scalar=self.chart_title_scalar,
            created_epoch_millis=self.created_epoch_millis,
            creator_id=self.creator_id,
            customer=self.customer,
            default_end_time=self.default_end_time,
            default_start_time=self.default_start_time,
            default_time_window=self.default_time_window,
            deleted=self.deleted,
            description=self.description,
            display_description=self.display_description,
            display_query_parameters=self.display_query_parameters,
            display_section_table_of_contents=self.display_section_table_of_contents,
            event_filter_type=self.event_filter_type,
            event_query=self.event_query,
            favorite=self.favorite,
            hidden=self.hidden,
            id=self.id,
            name=self.name,
            num_charts=self.num_charts,
            num_favorites=self.num_favorites,
            parameter_details=self.parameter_details,
            parameters=self.parameters,
            sections=self.sections,
            system_owned=self.system_owned,
            tags=self.tags,
            updated_epoch_millis=self.updated_epoch_millis,
            updater_id=self.updater_id,
            url=self.url,
            views_last_day=self.views_last_day,
            views_last_month=self.views_last_month,
            views_last_week=self.views_last_week)


def get_dashboard(id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDashboardResult:
    """
    Use this data source to get information about a certain Wavefront dashboard by its ID.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_wavefront as wavefront

    example = wavefront.get_dashboard(id="dashboard-id")
    ```


    :param str id: The ID associated with the dashboard data to be fetched.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('wavefront:index/getDashboard:getDashboard', __args__, opts=opts, typ=GetDashboardResult).value

    return AwaitableGetDashboardResult(
        can_modifies=__ret__.can_modifies,
        can_views=__ret__.can_views,
        chart_title_bg_color=__ret__.chart_title_bg_color,
        chart_title_color=__ret__.chart_title_color,
        chart_title_scalar=__ret__.chart_title_scalar,
        created_epoch_millis=__ret__.created_epoch_millis,
        creator_id=__ret__.creator_id,
        customer=__ret__.customer,
        default_end_time=__ret__.default_end_time,
        default_start_time=__ret__.default_start_time,
        default_time_window=__ret__.default_time_window,
        deleted=__ret__.deleted,
        description=__ret__.description,
        display_description=__ret__.display_description,
        display_query_parameters=__ret__.display_query_parameters,
        display_section_table_of_contents=__ret__.display_section_table_of_contents,
        event_filter_type=__ret__.event_filter_type,
        event_query=__ret__.event_query,
        favorite=__ret__.favorite,
        hidden=__ret__.hidden,
        id=__ret__.id,
        name=__ret__.name,
        num_charts=__ret__.num_charts,
        num_favorites=__ret__.num_favorites,
        parameter_details=__ret__.parameter_details,
        parameters=__ret__.parameters,
        sections=__ret__.sections,
        system_owned=__ret__.system_owned,
        tags=__ret__.tags,
        updated_epoch_millis=__ret__.updated_epoch_millis,
        updater_id=__ret__.updater_id,
        url=__ret__.url,
        views_last_day=__ret__.views_last_day,
        views_last_month=__ret__.views_last_month,
        views_last_week=__ret__.views_last_week)


@_utilities.lift_output_func(get_dashboard)
def get_dashboard_output(id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDashboardResult]:
    """
    Use this data source to get information about a certain Wavefront dashboard by its ID.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_wavefront as wavefront

    example = wavefront.get_dashboard(id="dashboard-id")
    ```


    :param str id: The ID associated with the dashboard data to be fetched.
    """
    ...
