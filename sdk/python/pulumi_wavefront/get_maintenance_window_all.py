# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetMaintenanceWindowAllResult',
    'AwaitableGetMaintenanceWindowAllResult',
    'get_maintenance_window_all',
    'get_maintenance_window_all_output',
]

@pulumi.output_type
class GetMaintenanceWindowAllResult:
    """
    A collection of values returned by getMaintenanceWindowAll.
    """
    def __init__(__self__, id=None, limit=None, maintenance_windows=None, offset=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if maintenance_windows and not isinstance(maintenance_windows, list):
            raise TypeError("Expected argument 'maintenance_windows' to be a list")
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Sequence['outputs.GetMaintenanceWindowAllMaintenanceWindowResult']:
        return pulumi.get(self, "maintenance_windows")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")


class AwaitableGetMaintenanceWindowAllResult(GetMaintenanceWindowAllResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMaintenanceWindowAllResult(
            id=self.id,
            limit=self.limit,
            maintenance_windows=self.maintenance_windows,
            offset=self.offset)


def get_maintenance_window_all(limit: Optional[int] = None,
                               offset: Optional[int] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMaintenanceWindowAllResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['limit'] = limit
    __args__['offset'] = offset
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('wavefront:index/getMaintenanceWindowAll:getMaintenanceWindowAll', __args__, opts=opts, typ=GetMaintenanceWindowAllResult).value

    return AwaitableGetMaintenanceWindowAllResult(
        id=__ret__.id,
        limit=__ret__.limit,
        maintenance_windows=__ret__.maintenance_windows,
        offset=__ret__.offset)


@_utilities.lift_output_func(get_maintenance_window_all)
def get_maintenance_window_all_output(limit: Optional[pulumi.Input[Optional[int]]] = None,
                                      offset: Optional[pulumi.Input[Optional[int]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMaintenanceWindowAllResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
