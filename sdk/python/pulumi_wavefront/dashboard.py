# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DashboardArgs', 'Dashboard']

@pulumi.input_type
class DashboardArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 sections: pulumi.Input[Sequence[pulumi.Input['DashboardSectionArgs']]],
                 tags: pulumi.Input[Sequence[pulumi.Input[str]]],
                 url: pulumi.Input[str],
                 can_modifies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 can_views: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 display_query_parameters: Optional[pulumi.Input[bool]] = None,
                 display_section_table_of_contents: Optional[pulumi.Input[bool]] = None,
                 event_filter_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_details: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDetailArgs']]]] = None):
        """
        The set of arguments for constructing a Dashboard resource.
        :param pulumi.Input[str] description: Human-readable description of the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardSectionArgs']]] sections: Dashboard chart sections. See dashboard sections.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A set of tags to assign to this resource.
        :param pulumi.Input[str] url: Unique identifier, also a URL slug of the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] can_modifies: A list of users that have modify ACL access to the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] can_views: A list of users that have view ACL access to the dashboard.
        :param pulumi.Input[bool] display_query_parameters: Whether the dashboard parameters section is opened by default when the dashboard
               is shown.
        :param pulumi.Input[bool] display_section_table_of_contents: Whether the "pills" quick-linked the sections of the dashboard are 
               displayed by default when the dashboard is shown.
        :param pulumi.Input[str] event_filter_type: How charts belonging to this dashboard should display events. `BYCHART` is default if 
               unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        :param pulumi.Input[str] name: Name of the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardParameterDetailArgs']]] parameter_details: The current JSON representation of dashboard parameters. See parameter details.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "sections", sections)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "url", url)
        if can_modifies is not None:
            pulumi.set(__self__, "can_modifies", can_modifies)
        if can_views is not None:
            pulumi.set(__self__, "can_views", can_views)
        if display_query_parameters is not None:
            pulumi.set(__self__, "display_query_parameters", display_query_parameters)
        if display_section_table_of_contents is not None:
            pulumi.set(__self__, "display_section_table_of_contents", display_section_table_of_contents)
        if event_filter_type is not None:
            pulumi.set(__self__, "event_filter_type", event_filter_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_details is not None:
            pulumi.set(__self__, "parameter_details", parameter_details)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Human-readable description of the dashboard.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def sections(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardSectionArgs']]]:
        """
        Dashboard chart sections. See dashboard sections.
        """
        return pulumi.get(self, "sections")

    @sections.setter
    def sections(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardSectionArgs']]]):
        pulumi.set(self, "sections", value)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A set of tags to assign to this resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Unique identifier, also a URL slug of the dashboard.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="canModifies")
    def can_modifies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of users that have modify ACL access to the dashboard.
        """
        return pulumi.get(self, "can_modifies")

    @can_modifies.setter
    def can_modifies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "can_modifies", value)

    @property
    @pulumi.getter(name="canViews")
    def can_views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of users that have view ACL access to the dashboard.
        """
        return pulumi.get(self, "can_views")

    @can_views.setter
    def can_views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "can_views", value)

    @property
    @pulumi.getter(name="displayQueryParameters")
    def display_query_parameters(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the dashboard parameters section is opened by default when the dashboard
        is shown.
        """
        return pulumi.get(self, "display_query_parameters")

    @display_query_parameters.setter
    def display_query_parameters(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_query_parameters", value)

    @property
    @pulumi.getter(name="displaySectionTableOfContents")
    def display_section_table_of_contents(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the "pills" quick-linked the sections of the dashboard are 
        displayed by default when the dashboard is shown.
        """
        return pulumi.get(self, "display_section_table_of_contents")

    @display_section_table_of_contents.setter
    def display_section_table_of_contents(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_section_table_of_contents", value)

    @property
    @pulumi.getter(name="eventFilterType")
    def event_filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        How charts belonging to this dashboard should display events. `BYCHART` is default if 
        unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        """
        return pulumi.get(self, "event_filter_type")

    @event_filter_type.setter
    def event_filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterDetails")
    def parameter_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDetailArgs']]]]:
        """
        The current JSON representation of dashboard parameters. See parameter details.
        """
        return pulumi.get(self, "parameter_details")

    @parameter_details.setter
    def parameter_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDetailArgs']]]]):
        pulumi.set(self, "parameter_details", value)


@pulumi.input_type
class _DashboardState:
    def __init__(__self__, *,
                 can_modifies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 can_views: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_query_parameters: Optional[pulumi.Input[bool]] = None,
                 display_section_table_of_contents: Optional[pulumi.Input[bool]] = None,
                 event_filter_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_details: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDetailArgs']]]] = None,
                 sections: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSectionArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Dashboard resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] can_modifies: A list of users that have modify ACL access to the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] can_views: A list of users that have view ACL access to the dashboard.
        :param pulumi.Input[str] description: Human-readable description of the dashboard.
        :param pulumi.Input[bool] display_query_parameters: Whether the dashboard parameters section is opened by default when the dashboard
               is shown.
        :param pulumi.Input[bool] display_section_table_of_contents: Whether the "pills" quick-linked the sections of the dashboard are 
               displayed by default when the dashboard is shown.
        :param pulumi.Input[str] event_filter_type: How charts belonging to this dashboard should display events. `BYCHART` is default if 
               unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        :param pulumi.Input[str] name: Name of the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardParameterDetailArgs']]] parameter_details: The current JSON representation of dashboard parameters. See parameter details.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardSectionArgs']]] sections: Dashboard chart sections. See dashboard sections.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A set of tags to assign to this resource.
        :param pulumi.Input[str] url: Unique identifier, also a URL slug of the dashboard.
        """
        if can_modifies is not None:
            pulumi.set(__self__, "can_modifies", can_modifies)
        if can_views is not None:
            pulumi.set(__self__, "can_views", can_views)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_query_parameters is not None:
            pulumi.set(__self__, "display_query_parameters", display_query_parameters)
        if display_section_table_of_contents is not None:
            pulumi.set(__self__, "display_section_table_of_contents", display_section_table_of_contents)
        if event_filter_type is not None:
            pulumi.set(__self__, "event_filter_type", event_filter_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_details is not None:
            pulumi.set(__self__, "parameter_details", parameter_details)
        if sections is not None:
            pulumi.set(__self__, "sections", sections)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="canModifies")
    def can_modifies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of users that have modify ACL access to the dashboard.
        """
        return pulumi.get(self, "can_modifies")

    @can_modifies.setter
    def can_modifies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "can_modifies", value)

    @property
    @pulumi.getter(name="canViews")
    def can_views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of users that have view ACL access to the dashboard.
        """
        return pulumi.get(self, "can_views")

    @can_views.setter
    def can_views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "can_views", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable description of the dashboard.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayQueryParameters")
    def display_query_parameters(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the dashboard parameters section is opened by default when the dashboard
        is shown.
        """
        return pulumi.get(self, "display_query_parameters")

    @display_query_parameters.setter
    def display_query_parameters(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_query_parameters", value)

    @property
    @pulumi.getter(name="displaySectionTableOfContents")
    def display_section_table_of_contents(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the "pills" quick-linked the sections of the dashboard are 
        displayed by default when the dashboard is shown.
        """
        return pulumi.get(self, "display_section_table_of_contents")

    @display_section_table_of_contents.setter
    def display_section_table_of_contents(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_section_table_of_contents", value)

    @property
    @pulumi.getter(name="eventFilterType")
    def event_filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        How charts belonging to this dashboard should display events. `BYCHART` is default if 
        unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        """
        return pulumi.get(self, "event_filter_type")

    @event_filter_type.setter
    def event_filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterDetails")
    def parameter_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDetailArgs']]]]:
        """
        The current JSON representation of dashboard parameters. See parameter details.
        """
        return pulumi.get(self, "parameter_details")

    @parameter_details.setter
    def parameter_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDetailArgs']]]]):
        pulumi.set(self, "parameter_details", value)

    @property
    @pulumi.getter
    def sections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSectionArgs']]]]:
        """
        Dashboard chart sections. See dashboard sections.
        """
        return pulumi.get(self, "sections")

    @sections.setter
    def sections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSectionArgs']]]]):
        pulumi.set(self, "sections", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of tags to assign to this resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier, also a URL slug of the dashboard.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class Dashboard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 can_modifies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 can_views: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_query_parameters: Optional[pulumi.Input[bool]] = None,
                 display_section_table_of_contents: Optional[pulumi.Input[bool]] = None,
                 event_filter_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardParameterDetailArgs']]]]] = None,
                 sections: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardSectionArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Wavefront Dashboard resource.  This allows dashboards to be created, updated, and deleted.

        ## Import

        Dashboards can be imported by using the `id`, e.g.

        ```sh
         $ pulumi import wavefront:index/dashboard:Dashboard dashboard tftestimport
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] can_modifies: A list of users that have modify ACL access to the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] can_views: A list of users that have view ACL access to the dashboard.
        :param pulumi.Input[str] description: Human-readable description of the dashboard.
        :param pulumi.Input[bool] display_query_parameters: Whether the dashboard parameters section is opened by default when the dashboard
               is shown.
        :param pulumi.Input[bool] display_section_table_of_contents: Whether the "pills" quick-linked the sections of the dashboard are 
               displayed by default when the dashboard is shown.
        :param pulumi.Input[str] event_filter_type: How charts belonging to this dashboard should display events. `BYCHART` is default if 
               unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        :param pulumi.Input[str] name: Name of the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardParameterDetailArgs']]]] parameter_details: The current JSON representation of dashboard parameters. See parameter details.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardSectionArgs']]]] sections: Dashboard chart sections. See dashboard sections.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A set of tags to assign to this resource.
        :param pulumi.Input[str] url: Unique identifier, also a URL slug of the dashboard.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Wavefront Dashboard resource.  This allows dashboards to be created, updated, and deleted.

        ## Import

        Dashboards can be imported by using the `id`, e.g.

        ```sh
         $ pulumi import wavefront:index/dashboard:Dashboard dashboard tftestimport
        ```

        :param str resource_name: The name of the resource.
        :param DashboardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 can_modifies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 can_views: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_query_parameters: Optional[pulumi.Input[bool]] = None,
                 display_section_table_of_contents: Optional[pulumi.Input[bool]] = None,
                 event_filter_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardParameterDetailArgs']]]]] = None,
                 sections: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardSectionArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardArgs.__new__(DashboardArgs)

            __props__.__dict__["can_modifies"] = can_modifies
            __props__.__dict__["can_views"] = can_views
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["display_query_parameters"] = display_query_parameters
            __props__.__dict__["display_section_table_of_contents"] = display_section_table_of_contents
            __props__.__dict__["event_filter_type"] = event_filter_type
            __props__.__dict__["name"] = name
            __props__.__dict__["parameter_details"] = parameter_details
            if sections is None and not opts.urn:
                raise TypeError("Missing required property 'sections'")
            __props__.__dict__["sections"] = sections
            if tags is None and not opts.urn:
                raise TypeError("Missing required property 'tags'")
            __props__.__dict__["tags"] = tags
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
        super(Dashboard, __self__).__init__(
            'wavefront:index/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            can_modifies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            can_views: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_query_parameters: Optional[pulumi.Input[bool]] = None,
            display_section_table_of_contents: Optional[pulumi.Input[bool]] = None,
            event_filter_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parameter_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardParameterDetailArgs']]]]] = None,
            sections: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardSectionArgs']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Dashboard':
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] can_modifies: A list of users that have modify ACL access to the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] can_views: A list of users that have view ACL access to the dashboard.
        :param pulumi.Input[str] description: Human-readable description of the dashboard.
        :param pulumi.Input[bool] display_query_parameters: Whether the dashboard parameters section is opened by default when the dashboard
               is shown.
        :param pulumi.Input[bool] display_section_table_of_contents: Whether the "pills" quick-linked the sections of the dashboard are 
               displayed by default when the dashboard is shown.
        :param pulumi.Input[str] event_filter_type: How charts belonging to this dashboard should display events. `BYCHART` is default if 
               unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        :param pulumi.Input[str] name: Name of the dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardParameterDetailArgs']]]] parameter_details: The current JSON representation of dashboard parameters. See parameter details.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardSectionArgs']]]] sections: Dashboard chart sections. See dashboard sections.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A set of tags to assign to this resource.
        :param pulumi.Input[str] url: Unique identifier, also a URL slug of the dashboard.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardState.__new__(_DashboardState)

        __props__.__dict__["can_modifies"] = can_modifies
        __props__.__dict__["can_views"] = can_views
        __props__.__dict__["description"] = description
        __props__.__dict__["display_query_parameters"] = display_query_parameters
        __props__.__dict__["display_section_table_of_contents"] = display_section_table_of_contents
        __props__.__dict__["event_filter_type"] = event_filter_type
        __props__.__dict__["name"] = name
        __props__.__dict__["parameter_details"] = parameter_details
        __props__.__dict__["sections"] = sections
        __props__.__dict__["tags"] = tags
        __props__.__dict__["url"] = url
        return Dashboard(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="canModifies")
    def can_modifies(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of users that have modify ACL access to the dashboard.
        """
        return pulumi.get(self, "can_modifies")

    @property
    @pulumi.getter(name="canViews")
    def can_views(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of users that have view ACL access to the dashboard.
        """
        return pulumi.get(self, "can_views")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Human-readable description of the dashboard.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayQueryParameters")
    def display_query_parameters(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the dashboard parameters section is opened by default when the dashboard
        is shown.
        """
        return pulumi.get(self, "display_query_parameters")

    @property
    @pulumi.getter(name="displaySectionTableOfContents")
    def display_section_table_of_contents(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the "pills" quick-linked the sections of the dashboard are 
        displayed by default when the dashboard is shown.
        """
        return pulumi.get(self, "display_section_table_of_contents")

    @property
    @pulumi.getter(name="eventFilterType")
    def event_filter_type(self) -> pulumi.Output[Optional[str]]:
        """
        How charts belonging to this dashboard should display events. `BYCHART` is default if 
        unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
        """
        return pulumi.get(self, "event_filter_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterDetails")
    def parameter_details(self) -> pulumi.Output[Optional[Sequence['outputs.DashboardParameterDetail']]]:
        """
        The current JSON representation of dashboard parameters. See parameter details.
        """
        return pulumi.get(self, "parameter_details")

    @property
    @pulumi.getter
    def sections(self) -> pulumi.Output[Sequence['outputs.DashboardSection']]:
        """
        Dashboard chart sections. See dashboard sections.
        """
        return pulumi.get(self, "sections")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of tags to assign to this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Unique identifier, also a URL slug of the dashboard.
        """
        return pulumi.get(self, "url")

