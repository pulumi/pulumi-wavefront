# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Dashboard']


class Dashboard(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 can_modifies: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 can_views: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_query_parameters: Optional[pulumi.Input[bool]] = None,
                 display_section_table_of_contents: Optional[pulumi.Input[bool]] = None,
                 event_filter_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_details: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['DashboardParameterDetailArgs']]]]] = None,
                 sections: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['DashboardSectionArgs']]]]] = None,
                 tags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Dashboard resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['DashboardSectionArgs']]]] sections: Sections of a Dashboard
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['can_modifies'] = can_modifies
            __props__['can_views'] = can_views
            if description is None:
                raise TypeError("Missing required property 'description'")
            __props__['description'] = description
            __props__['display_query_parameters'] = display_query_parameters
            __props__['display_section_table_of_contents'] = display_section_table_of_contents
            __props__['event_filter_type'] = event_filter_type
            __props__['name'] = name
            __props__['parameter_details'] = parameter_details
            if sections is None:
                raise TypeError("Missing required property 'sections'")
            __props__['sections'] = sections
            if tags is None:
                raise TypeError("Missing required property 'tags'")
            __props__['tags'] = tags
            if url is None:
                raise TypeError("Missing required property 'url'")
            __props__['url'] = url
        super(Dashboard, __self__).__init__(
            'wavefront:index/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            can_modifies: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            can_views: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_query_parameters: Optional[pulumi.Input[bool]] = None,
            display_section_table_of_contents: Optional[pulumi.Input[bool]] = None,
            event_filter_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parameter_details: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['DashboardParameterDetailArgs']]]]] = None,
            sections: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['DashboardSectionArgs']]]]] = None,
            tags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Dashboard':
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['DashboardSectionArgs']]]] sections: Sections of a Dashboard
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["can_modifies"] = can_modifies
        __props__["can_views"] = can_views
        __props__["description"] = description
        __props__["display_query_parameters"] = display_query_parameters
        __props__["display_section_table_of_contents"] = display_section_table_of_contents
        __props__["event_filter_type"] = event_filter_type
        __props__["name"] = name
        __props__["parameter_details"] = parameter_details
        __props__["sections"] = sections
        __props__["tags"] = tags
        __props__["url"] = url
        return Dashboard(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="canModifies")
    def can_modifies(self) -> pulumi.Output[List[str]]:
        return pulumi.get(self, "can_modifies")

    @property
    @pulumi.getter(name="canViews")
    def can_views(self) -> pulumi.Output[Optional[List[str]]]:
        return pulumi.get(self, "can_views")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayQueryParameters")
    def display_query_parameters(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "display_query_parameters")

    @property
    @pulumi.getter(name="displaySectionTableOfContents")
    def display_section_table_of_contents(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "display_section_table_of_contents")

    @property
    @pulumi.getter(name="eventFilterType")
    def event_filter_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "event_filter_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterDetails")
    def parameter_details(self) -> pulumi.Output[Optional[List['outputs.DashboardParameterDetail']]]:
        return pulumi.get(self, "parameter_details")

    @property
    @pulumi.getter
    def sections(self) -> pulumi.Output[List['outputs.DashboardSection']]:
        """
        Sections of a Dashboard
        """
        return pulumi.get(self, "sections")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[List[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

