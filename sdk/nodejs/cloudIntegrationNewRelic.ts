// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Wavefront Cloud Integration for New Relic. This allows New Relic cloud integrations to be created,
 * updated, and deleted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const newrelic = new wavefront.CloudIntegrationNewRelic("newrelic", {apiKey: "example-api-key"});
 * ```
 *
 * ## Import
 *
 * NewRelic Integrations can be imported by using the `id`, e.g.:
 *
 * ```sh
 *  $ pulumi import wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic newrelic a411c16b-3cf7-4f03-bf11-8ca05aab898d
 * ```
 */
export class CloudIntegrationNewRelic extends pulumi.CustomResource {
    /**
     * Get an existing CloudIntegrationNewRelic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudIntegrationNewRelicState, opts?: pulumi.CustomResourceOptions): CloudIntegrationNewRelic {
        return new CloudIntegrationNewRelic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic';

    /**
     * Returns true if the given object is an instance of CloudIntegrationNewRelic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudIntegrationNewRelic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudIntegrationNewRelic.__pulumiType;
    }

    /**
     * A list of point tag key-values to add to every point ingested using this integration.
     */
    public readonly additionalTags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * New Relic REST API key.
     */
    public readonly apiKey!: pulumi.Output<string>;
    /**
     * A regular expression that an application name must match (case-insensitively) in order to collect metrics.
     */
    public readonly appFilterRegex!: pulumi.Output<string | undefined>;
    /**
     * Forces this resource to save, even if errors are present.
     */
    public readonly forceSave!: pulumi.Output<boolean | undefined>;
    /**
     * A regular expression that a host name must match (case-insensitively) in order to collect metrics.
     */
    public readonly hostFilterRegex!: pulumi.Output<string | undefined>;
    /**
     * See Metric Filter.
     */
    public readonly metricFilters!: pulumi.Output<outputs.CloudIntegrationNewRelicMetricFilter[] | undefined>;
    /**
     * The human-readable name of this integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A value denoting which cloud service this service integrates with.
     */
    public readonly service!: pulumi.Output<string>;
    /**
     * How often, in minutes, to refresh the service.
     */
    public readonly serviceRefreshRateInMinutes!: pulumi.Output<number | undefined>;

    /**
     * Create a CloudIntegrationNewRelic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudIntegrationNewRelicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudIntegrationNewRelicArgs | CloudIntegrationNewRelicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudIntegrationNewRelicState | undefined;
            resourceInputs["additionalTags"] = state ? state.additionalTags : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["appFilterRegex"] = state ? state.appFilterRegex : undefined;
            resourceInputs["forceSave"] = state ? state.forceSave : undefined;
            resourceInputs["hostFilterRegex"] = state ? state.hostFilterRegex : undefined;
            resourceInputs["metricFilters"] = state ? state.metricFilters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["serviceRefreshRateInMinutes"] = state ? state.serviceRefreshRateInMinutes : undefined;
        } else {
            const args = argsOrState as CloudIntegrationNewRelicArgs | undefined;
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["additionalTags"] = args ? args.additionalTags : undefined;
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["appFilterRegex"] = args ? args.appFilterRegex : undefined;
            resourceInputs["forceSave"] = args ? args.forceSave : undefined;
            resourceInputs["hostFilterRegex"] = args ? args.hostFilterRegex : undefined;
            resourceInputs["metricFilters"] = args ? args.metricFilters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["serviceRefreshRateInMinutes"] = args ? args.serviceRefreshRateInMinutes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CloudIntegrationNewRelic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudIntegrationNewRelic resources.
 */
export interface CloudIntegrationNewRelicState {
    /**
     * A list of point tag key-values to add to every point ingested using this integration.
     */
    additionalTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * New Relic REST API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * A regular expression that an application name must match (case-insensitively) in order to collect metrics.
     */
    appFilterRegex?: pulumi.Input<string>;
    /**
     * Forces this resource to save, even if errors are present.
     */
    forceSave?: pulumi.Input<boolean>;
    /**
     * A regular expression that a host name must match (case-insensitively) in order to collect metrics.
     */
    hostFilterRegex?: pulumi.Input<string>;
    /**
     * See Metric Filter.
     */
    metricFilters?: pulumi.Input<pulumi.Input<inputs.CloudIntegrationNewRelicMetricFilter>[]>;
    /**
     * The human-readable name of this integration.
     */
    name?: pulumi.Input<string>;
    /**
     * A value denoting which cloud service this service integrates with.
     */
    service?: pulumi.Input<string>;
    /**
     * How often, in minutes, to refresh the service.
     */
    serviceRefreshRateInMinutes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CloudIntegrationNewRelic resource.
 */
export interface CloudIntegrationNewRelicArgs {
    /**
     * A list of point tag key-values to add to every point ingested using this integration.
     */
    additionalTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * New Relic REST API key.
     */
    apiKey: pulumi.Input<string>;
    /**
     * A regular expression that an application name must match (case-insensitively) in order to collect metrics.
     */
    appFilterRegex?: pulumi.Input<string>;
    /**
     * Forces this resource to save, even if errors are present.
     */
    forceSave?: pulumi.Input<boolean>;
    /**
     * A regular expression that a host name must match (case-insensitively) in order to collect metrics.
     */
    hostFilterRegex?: pulumi.Input<string>;
    /**
     * See Metric Filter.
     */
    metricFilters?: pulumi.Input<pulumi.Input<inputs.CloudIntegrationNewRelicMetricFilter>[]>;
    /**
     * The human-readable name of this integration.
     */
    name?: pulumi.Input<string>;
    /**
     * A value denoting which cloud service this service integrates with.
     */
    service: pulumi.Input<string>;
    /**
     * How often, in minutes, to refresh the service.
     */
    serviceRefreshRateInMinutes?: pulumi.Input<number>;
}
