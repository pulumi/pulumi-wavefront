// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to get information about a Wavefront user group by its ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const example = wavefront.getUserGroup({
 *     id: "user-group-id",
 * });
 * ```
 */
export function getUserGroup(args: GetUserGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetUserGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("wavefront:index/getUserGroup:getUserGroup", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserGroup.
 */
export interface GetUserGroupArgs {
    /**
     * The ID associated with the user group data to be fetched.
     */
    id: string;
}

/**
 * A collection of values returned by getUserGroup.
 */
export interface GetUserGroupResult {
    /**
     * Human-readable description of the group.
     */
    readonly description: string;
    /**
     * The ID of the group in Wavefront.
     */
    readonly id: string;
    /**
     * The name of the group in Wavefront.
     */
    readonly name: string;
    /**
     * The list of roles associated with the group.
     */
    readonly roles: string[];
    /**
     * The list of users assigned to the group.
     */
    readonly users: string[];
}
/**
 * Use this data source to get information about a Wavefront user group by its ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const example = wavefront.getUserGroup({
 *     id: "user-group-id",
 * });
 * ```
 */
export function getUserGroupOutput(args: GetUserGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserGroupResult> {
    return pulumi.output(args).apply((a: any) => getUserGroup(a, opts))
}

/**
 * A collection of arguments for invoking getUserGroup.
 */
export interface GetUserGroupOutputArgs {
    /**
     * The ID associated with the user group data to be fetched.
     */
    id: pulumi.Input<string>;
}
