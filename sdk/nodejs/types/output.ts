// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertTargetRoute {
    filter?: {[key: string]: string};
    /**
     * The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
     */
    method: string;
    target: string;
}

export interface CloudIntegrationNewRelicMetricFilter {
    /**
     * The name of a NewRelic App.
     */
    appName: string;
    /**
     * A regular expression that a metric name must match (case-insensitively) in order to be ingested.
     */
    metricFilterRegex: string;
}

export interface DashboardParameterDetail {
    /**
     * The default value of the parameter.
     */
    defaultValue: string;
    /**
     * For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
     * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
     */
    dynamicFieldType?: string;
    /**
     * If `true` the parameter will only be shown on the edit view of the dashboard.
     */
    hideFromView: boolean;
    /**
     * The label for the parameter.
     */
    label: string;
    /**
     * The name of the parameters.
     */
    name: string;
    /**
     * The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
     */
    parameterType: string;
    /**
     * For `DYNAMIC` parameter types, the query to execute to return values.
     */
    queryValue?: string;
    /**
     * for `TAG_KEY` dynamic field types, the tag key to return.
     */
    tagKey?: string;
    /**
     * A string->string map.  At least one of the keys must match the value of
     * `defaultValue`.
     */
    valuesToReadableStrings: {[key: string]: string};
}

export interface DashboardSection {
    /**
     * Name of this section.
     */
    name: string;
    /**
     * See dashboard section rows.
     */
    rows: outputs.DashboardSectionRow[];
}

export interface DashboardSectionRow {
    /**
     * Charts in this section. See dashboard chart.
     */
    charts: outputs.DashboardSectionRowChart[];
}

export interface DashboardSectionRowChart {
    /**
     * The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.
     */
    base?: number;
    chartAttribute?: string;
    /**
     * Chart settings. See chart settings.
     */
    chartSetting: outputs.DashboardSectionRowChartChartSetting;
    /**
     * Description of the chart.
     */
    description?: string;
    /**
     * Name of the source.
     */
    name: string;
    /**
     * Query expression to plot on the chart. See chart source queries.
     */
    sources: outputs.DashboardSectionRowChartSource[];
    /**
     * Summarization strategy for the chart. MEAN is default. Valid options are, `MEAN`, 
     * `MEDIAN`, `MIN`, `MAX`, `SUM`, `COUNT`, `LAST`, `FIRST`.
     */
    summarization: string;
    /**
     * String to label the units of the chart on the Y-Axis.
     */
    units: string;
}

export interface DashboardSectionRowChartChartSetting {
    /**
     * This setting is deprecated.
     */
    autoColumnTags?: boolean;
    /**
     * This setting is deprecated.
     */
    columnTags?: string;
    /**
     * For the tabular view, a list of point tags to display when using the `custom` tag display mode.
     */
    customTags?: string[];
    /**
     * Threshold (in seconds) for time delta between consecutive points in a series
     * above which a dotted line will replace a solid in in line plots. Default is 60.
     */
    expectedDataSpacing?: number;
    /**
     * For a chart with a fixed legend, a list of statistics to display in the legend.
     */
    fixedLegendDisplayStats?: string[];
    /**
     * Whether to enable a fixed tabular legend adjacent to the chart.
     */
    fixedLegendEnabled?: boolean;
    /**
     * Statistic to use for determining whether a series is displayed on the fixed legend.
     * Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
     */
    fixedLegendFilterField?: string;
    /**
     * Number of series to include in the fixed legend.
     */
    fixedLegendFilterLimit?: number;
    /**
     * Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
     * are `TOP`, and `BOTTOM`.
     */
    fixedLegendFilterSort?: string;
    /**
     * This setting is deprecated.
     */
    fixedLegendHideLabel?: boolean;
    /**
     * Where the fixed legend should be displayed with respect to the chart.
     * Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
     */
    fixedLegendPosition?: string;
    /**
     * If `true`, the legend uses non-summarized stats instead of summarized.
     */
    fixedLegendUseRawStats?: boolean;
    /**
     * For the tabular view, whether to group multi metrics into a single row by a common source.
     * If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host are displayed as different
     * columns in the same row.
     */
    groupBySource?: boolean;
    /**
     * Whether to disable the display of the floating legend (but
     * reenable it when the ctrl-key is pressed).
     */
    invertDynamicLegendHoverControl?: boolean;
    /**
     * Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`, 
     * `step-after`, `basis`, `cardinal`, and `monotone`.
     */
    lineType?: string;
    /**
     * Max value of the Y-axis. Set to null or leave blank for auto.
     */
    max?: number;
    /**
     * Min value of the Y-axis. Set to null or leave blank for auto.
     */
    min?: number;
    /**
     * For the tabular view defines how many point tags to display.
     */
    numTags?: number;
    /**
     * The markdown content for a Markdown display, in plain text.
     */
    plainMarkdownContent?: string;
    /**
     * For the tabular view, whether to display sources. Default is `true`.
     */
    showHosts?: boolean;
    /**
     * For the tabular view, whether to display labels. Default is `true`.
     */
    showLabels?: boolean;
    /**
     * For the tabular view, whether to display raw values. Default is `false`.
     */
    showRawValues?: boolean;
    /**
     * For the tabular view, whether to display values in descending order. Default is `false`.
     */
    sortValuesDescending?: boolean;
    /**
     * For the single stat view, the decimal precision of the displayed number.
     */
    sparklineDecimalPrecision?: number;
    /**
     * For the single stat view, the color of the displayed text (when not dynamically determined). 
     * Values should be in `rgba(,,,,)` format.
     */
    sparklineDisplayColor?: string;
    /**
     * For the single stat view, the font size of the displayed text, in percent.
     */
    sparklineDisplayFontSize?: string;
    /**
     * For the single stat view, the horizontal position of the displayed text.
     * Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
     */
    sparklineDisplayHorizontalPosition?: string;
    /**
     * For the single stat view, a string to append to the displayed text.
     */
    sparklineDisplayPostfix?: string;
    /**
     * For the single stat view, a string to add before the displayed text.
     */
    sparklineDisplayPrefix?: string;
    /**
     * For the single stat view, where to display the name of the query or the value of the query.
     * Valid options are `VALUE` or `LABEL`.
     */
    sparklineDisplayValueType?: string;
    /**
     * This setting is deprecated.
     */
    sparklineDisplayVerticalPosition?: string;
    /**
     * For the single stat view, the color of the background fill.  Values should be
     * in `rgba(,,,,)`.
     */
    sparklineFillColor?: string;
    /**
     * For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format.
     */
    sparklineLineColor?: string;
    /**
     * For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart.
     * Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
     */
    sparklineSize?: string;
    /**
     * For the single stat view, whether to apply dynamic color settings to 
     * the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
     */
    sparklineValueColorMapApplyTo?: string;
    /**
     * For the single stat view, A list of colors that differing query values map to. 
     * Must contain one more element than `sparklineValueColorMapValuesV2`. Values should be in `rgba(,,,,)`.
     */
    sparklineValueColorMapColors?: string[];
    /**
     * This setting is deprecated.
     */
    sparklineValueColorMapValues?: number[];
    /**
     * For the single stat view, a list of boundaries for mapping different
     * query values to colors.  Must contain one element less than `sparklineValueColorMapColors`.
     */
    sparklineValueColorMapValuesV2s?: number[];
    /**
     * For the single stat view, a list of display text values that different query
     * values map to.  Must contain one more element than `sparklineValueTextMapThresholds`.
     */
    sparklineValueTextMapTexts?: string[];
    /**
     * For the single stat view, a list of threshold boundaries for 
     * mapping different query values to display text.  Must contain one element less than `sparklineValueTextMapText`.
     */
    sparklineValueTextMapThresholds?: number[];
    /**
     * Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
     * stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
     * center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
     */
    stackType?: string;
    /**
     * For the tabular view, which mode to use to determine which point tags to display.
     * Valid options are `all`, `top`, or `custom`.
     */
    tagMode?: string;
    /**
     * For x-y scatterplots, whether to color more recent points as darker than older points.
     */
    timeBasedColoring?: boolean;
    /**
     * Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to 
     * the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the
     * Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
     * `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
     * `top-k`, `status-list`, and `histogram`.
     */
    type: string;
    /**
     * Width, in minutes, of the time window to use for `last` windowing.
     */
    windowSize?: number;
    /**
     * For the tabular view, whether to use the full time window for the query or the last X minutes.
     * Valid options are `full` or `last`.
     */
    windowing?: string;
    /**
     * For x-y scatterplots, max value for the X-axis. Set to null for auto.
     */
    xmax?: number;
    /**
     * For x-y scatterplots, min value for the X-axis. Set to null for auto.
     */
    xmin?: number;
    /**
     * Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     */
    y0ScaleSiBy1024?: boolean;
    /**
     * Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
     */
    y0UnitAutoscaling?: boolean;
    /**
     * Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     */
    y1ScaleSiBy1024?: boolean;
    /**
     * Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
     */
    y1UnitAutoscaling?: boolean;
    /**
     * For plots with multiple Y-axes, units for right side Y-axis.
     */
    y1Units?: string;
    /**
     * For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto.
     */
    y1max?: number;
    /**
     * For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto.
     */
    y1min?: number;
    /**
     * For x-y scatterplots, max value for the Y-axis. Set to null for auto.
     */
    ymax?: number;
    /**
     * For x-y scatterplots, min value for the Y-axis. Set to null for auto.
     */
    ymin?: number;
}

export interface DashboardSectionRowChartSource {
    /**
     * Whether the source is disabled.
     */
    disabled?: boolean;
    /**
     * Name of the source.
     */
    name: string;
    /**
     * Query expression to plot on the chart.
     */
    query: string;
    /**
     * Whether or not this source line should have the query builder enabled.
     */
    queryBuilderEnabled?: boolean;
    /**
     * For scatter plots, does this query source the X-axis or the Y-axis, `X`, or `Y`.
     */
    scatterPlotSource?: string;
    /**
     * A description for the purpose of this source.
     */
    sourceDescription?: string;
}

export interface GetAlertFailingHostLabelPair {
    firing: number;
    host: string;
}

export interface GetAlertInMaintenanceHostLabelPair {
    firing: number;
    host: string;
}

export interface GetAlertsAlert {
    /**
     * User-supplied additional explanatory information about this alert.
     */
    additionalInformation: string;
    alertType: string;
    /**
     * A list of users or groups that can modify the alert.
     */
    canModifies: string[];
    /**
     * A list of users or groups that can view the alert.
     */
    canViews: string[];
    /**
     * A Wavefront query that is evaluated at regular intervals (default is 1 minute). The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes.
     */
    condition: string;
    /**
     * A map of severity to condition for which this alert will trigger.
     */
    conditions: {[key: string]: string};
    /**
     * A second query the results of which are displayed in the alert user interface instead of the condition query.
     */
    displayExpression: string;
    /**
     * A Boolean flag to enable real-time evaluation.
     */
    evaluateRealtimeData: boolean;
    /**
     * A list of failing host label pairs.
     */
    failingHostLabelPairs: outputs.GetAlertsAlertFailingHostLabelPair[];
    /**
     * The ID of the alert in Wavefront.
     * * `alertType`- The type of alert in Wavefront.
     */
    id: string;
    /**
     * A list of in maintenance host label pairs.
     */
    inMaintenanceHostLabelPairs: outputs.GetAlertsAlertInMaintenanceHostLabelPair[];
    /**
     * A Boolean flag indicating whether to include obsolete metrics or not.
     */
    includeObsoleteMetrics: boolean;
    /**
     * The number of consecutive minutes that a series matching the condition query must evaluate to "true" (non-zero value) before the alert fires.
     */
    minutes: number;
    /**
     * The name of the alert as it is displayed in Wavefront.
     */
    name: string;
    /**
     * How often to re-trigger a continually failing alert.
     */
    notificationResendFrequencyMinutes: number;
    /**
     * The specified query is executed every `processRateMinutes` minutes.
     */
    processRateMinutes: number;
    /**
     * The number of consecutive minutes that a firing series matching the condition query must evaluate to "false" (zero value) before the alert resolves.
     */
    resolveAfterMinutes: number;
    /**
     * The severity of the alert.
     */
    severity: string;
    severityLists: string[];
    /**
     * The status of the alert.
     */
    statuses: string[];
    /**
     * A set of tags assigned to the alert.
     */
    tags: string[];
    /**
     * An email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes.
     */
    target: string;
    /**
     * A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
     */
    targets?: {[key: string]: string};
}

export interface GetAlertsAlertFailingHostLabelPair {
    firing: number;
    host: string;
}

export interface GetAlertsAlertInMaintenanceHostLabelPair {
    firing: number;
    host: string;
}

export interface GetDashboardParameterDetail {
    /**
     * The default value of the parameter.
     */
    defaultValue: string;
    /**
     * For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
     * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
     */
    dynamicFieldType: string;
    /**
     * If `true` the parameter will only be shown on the edit view of the dashboard.
     */
    hideFromView: boolean;
    /**
     * The label for the parameter.
     */
    label: string;
    /**
     * The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
     */
    parameterType: string;
    /**
     * For `DYNAMIC` parameter types, the query to execute to return values.
     */
    queryValue: string;
    /**
     * For `TAG_KEY` dynamic field types, the tag key to return.
     */
    tagKey: string;
    /**
     * A string to string map. At least one of the keys must match the value of
     * `defaultValue`.
     */
    valuesToReadableStrings: {[key: string]: string};
}

export interface GetDashboardSection {
    /**
     * The name of the parameters.
     */
    name: string;
    rows: outputs.GetDashboardSectionRow[];
}

export interface GetDashboardSectionRow {
    charts: outputs.GetDashboardSectionRowChart[];
    heightFactor: number;
    /**
     * The name of the parameters.
     */
    name: string;
}

export interface GetDashboardSectionRowChart {
    /**
     * The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.
     */
    base: number;
    chartAttributes: string;
    chartSettings: outputs.GetDashboardSectionRowChartChartSetting[];
    /**
     * Description of the chart.
     */
    description: string;
    includeObsoleteMetrics: boolean;
    interpolatePointsKey: boolean;
    /**
     * The name of the parameters.
     */
    name: string;
    noDefaultEvents: boolean;
    sources: outputs.GetDashboardSectionRowChartSource[];
    /**
     * Summarization strategy for the chart. MEAN is default.
     */
    summarization: string;
    /**
     * String to label the units of the chart on the Y-Axis.
     */
    units: string;
}

export interface GetDashboardSectionRowChartChartSetting {
    /**
     * This setting is deprecated.
     */
    autoColumnTags: boolean;
    /**
     * This setting is deprecated.
     */
    columnTags: string;
    /**
     * For the tabular view, a list of point tags to display when using the `custom` tag display mode.
     */
    customTags: string[];
    /**
     * Threshold (in seconds) for time delta between consecutive points in a series above which a dotted line will replace a solid in line plots. Default is 60.
     */
    expectedDataSpacing: number;
    /**
     * (Optional) For a chart with a fixed legend, a list of statistics to display in the legend.
     */
    fixedLegendDisplayStats: string[];
    /**
     * (Optional) Whether to enable a fixed tabular legend adjacent to the chart.
     */
    fixedLegendEnabled: boolean;
    /**
     * (Optional) Statistic to use for determining whether a series is displayed on the fixed legend. Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
     */
    fixedLegendFilterField: string;
    /**
     * (Optional) Number of series to include in the fixed legend.
     */
    fixedLegendFilterLimit: number;
    /**
     * (Optional) Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options are `TOP`, and `BOTTOM`.
     */
    fixedLegendFilterSort: string;
    /**
     * (Optional) This setting is deprecated.
     */
    fixedLegendHideLabel: boolean;
    /**
     * (Optional)  Where the fixed legend should be displayed with respect to the chart. Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
     */
    fixedLegendPosition: string;
    /**
     * (Optional) If `true`, the legend uses non-summarized stats instead of summarized.
     */
    fixedLegendUseRawStats: boolean;
    /**
     * For the tabular view, whether to group multi metrics into a single row by a common source. If set to `false`, each source is displayed in its own row. If set to `true`, multiple metrics for the same host are displayed as different columns in the same row.
     */
    groupBySource: boolean;
    /**
     * (Optional) Whether to disable the display of the floating legend (but reenable it when the ctrl-key is pressed).
     */
    invertDynamicLegendHoverControl: boolean;
    /**
     * Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`, `step-after`, `basis`, `cardinal`, and `monotone`.
     */
    lineType: string;
    /**
     * Max value of the Y-axis. Set to null or leave blank for auto.
     */
    max: number;
    /**
     * Min value of the Y-axis. Set to null or leave blank for auto.
     */
    min: number;
    /**
     * For the tabular view defines how many point tags to display.
     */
    numTags: number;
    /**
     * The markdown content for a Markdown display, in plain text.
     */
    plainMarkdownContent: string;
    /**
     * For the tabular view, whether to display sources. Default is `true`.
     */
    showHosts: boolean;
    /**
     * For the tabular view, whether to display labels. Default is `true`.
     */
    showLabels: boolean;
    /**
     * For the tabular view, whether to display raw values. Default is `false`.
     */
    showRawValues: boolean;
    /**
     * For the tabular view, whether to display values in descending order. Default is `false`.
     */
    sortValuesDescending: boolean;
    /**
     * For the single stat view, the decimal precision of the displayed number.
     */
    sparklineDecimalPrecision: number;
    /**
     * For the single stat view, the color of the displayed text (when not dynamically determined). Values should be in RGBA format.
     */
    sparklineDisplayColor: string;
    /**
     * For the single stat view, the font size of the displayed text, in percent.
     */
    sparklineDisplayFontSize: string;
    /**
     * For the single stat view, the horizontal position of the displayed text. Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
     */
    sparklineDisplayHorizontalPosition: string;
    /**
     * For the single stat view, a string to append to the displayed text.
     */
    sparklineDisplayPostfix: string;
    /**
     * For the single stat view, a string to add before the displayed text.
     */
    sparklineDisplayPrefix: string;
    /**
     * For the single stat view, where to display the name of the query or the value of the query. Valid options are `VALUE` or `LABEL`.
     */
    sparklineDisplayValueType: string;
    /**
     * This setting is deprecated.
     */
    sparklineDisplayVerticalPosition: string;
    /**
     * For the single stat view, the color of the background fill. Values should be in RGBA format.
     */
    sparklineFillColor: string;
    /**
     * For the single stat view, the color of the line. Values should be in RGBA format.
     */
    sparklineLineColor: string;
    /**
     * For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart. Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
     */
    sparklineSize: string;
    /**
     * For the single stat view, whether to apply dynamic color settings to the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
     */
    sparklineValueColorMapApplyTo: string;
    /**
     * For the single stat view, a list of colors that differing query values map to. Must contain one more element than `sparklineValueColorMapValuesV2`. Values should be in RGBA format.
     */
    sparklineValueColorMapColors: string[];
    /**
     * This setting is deprecated.
     */
    sparklineValueColorMapValues: number[];
    /**
     * For the single stat view, a list of boundaries for mapping different query values to colors. Must contain one element less than `sparklineValueColorMapColors`.
     */
    sparklineValueColorMapValuesV2s: number[];
    /**
     * For the single stat view, a list of display text values that different query values map to. Must contain one more element than `sparklineValueTextMapThresholds`.
     */
    sparklineValueTextMapTexts: string[];
    /**
     * For the single stat view, a list of threshold boundaries for mapping different query values to display text. Must contain one element less than `sparklineValueTextMapText`.
     */
    sparklineValueTextMapThresholds: number[];
    /**
     * Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
     */
    stackType: string;
    /**
     * For the tabular view, which mode to use to determine which point tags to display. Valid options are `all`, `top`, or `custom`.
     */
    tagMode: string;
    /**
     * For x-y scatterplots, whether to color more recent points as darker than older points.
     */
    timeBasedColoring: boolean;
    /**
     * Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
     * `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`, `top-k`, `status-list`, and `histogram`.
     */
    type: string;
    /**
     * Width, in minutes, of the time window to use for `last` windowing.
     */
    windowSize: number;
    /**
     * For the tabular view, whether to use the full time window for the query or the last X minutes. Valid options are `full` or `last`.
     */
    windowing: string;
    /**
     * For x-y scatterplots, max value for the X-axis. Set to null for auto.
     */
    xmax: number;
    /**
     * For x-y scatterplots, min value for the X-axis. Set to null for auto.
     */
    xmin: number;
    y0ScaleSiBy1024: boolean;
    /**
     * (Optional) Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
     */
    y0UnitAutoscaling: boolean;
    y1Max: number;
    y1Min: number;
    y1ScaleSiBy1024: boolean;
    /**
     * (Optional) Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
     */
    y1UnitAutoscaling: boolean;
    /**
     * For plots with multiple Y-axes, units for right side Y-axis.
     */
    y1Units: string;
    /**
     * For x-y scatterplots, max value for the Y-axis. Set to null for auto.
     */
    ymax: number;
    /**
     * For x-y scatterplots, min value for the Y-axis. Set to null for auto.
     */
    ymin: number;
}

export interface GetDashboardSectionRowChartSource {
    /**
     * Whether the source is disabled.
     */
    disabled: boolean;
    /**
     * The name of the parameters.
     */
    name: string;
    /**
     * Query expression to plot on the chart.
     */
    query: string;
    querybuilderEnabled: boolean;
    /**
     * For scatter plots, does this query source the X-axis or the Y-axis, `X`, or `Y`.
     */
    scatterPlotSource: string;
    secondaryAxis: boolean;
    sourceColor: string;
    /**
     * A description for the purpose of this source.
     */
    sourceDescription: string;
}

export interface GetDashboardsDashboard {
    /**
     * A list of users that have modify ACL access to the dashboard.
     */
    canModifies: string[];
    /**
     * A list of users that have view ACL access to the dashboard.
     */
    canViews: string[];
    chartTitleBgColor: string;
    chartTitleColor: string;
    chartTitleScalar: number;
    createdEpochMillis: number;
    creatorId: string;
    customer: string;
    defaultEndTime: number;
    defaultStartTime: number;
    defaultTimeWindow: string;
    deleted: boolean;
    /**
     * Description of the chart.
     */
    description: string;
    displayDescription: boolean;
    /**
     * Whether the dashboard parameters section is opened by default when the dashboard is shown.
     */
    displayQueryParameters: boolean;
    /**
     * Whether the "pills" quick-linked the sections of the dashboard are displayed by default when the dashboard is shown.
     */
    displaySectionTableOfContents: boolean;
    /**
     * How charts belonging to this dashboard should display events. `BYCHART` is default if
     * unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
     */
    eventFilterType: string;
    eventQuery: string;
    favorite: boolean;
    hidden: boolean;
    id: string;
    /**
     * The name of the parameters.
     */
    name: string;
    numCharts: number;
    numFavorites: number;
    /**
     * The current JSON representation of dashboard parameters. See parameter details.
     */
    parameterDetails: outputs.GetDashboardsDashboardParameterDetail[];
    parameters: {[key: string]: any};
    sections: outputs.GetDashboardsDashboardSection[];
    systemOwned: boolean;
    /**
     * A set of tags to assign to this resource.
     */
    tags: string[];
    updatedEpochMillis: number;
    updaterId: string;
    /**
     * Unique identifier, also a URL slug of the dashboard.
     */
    url: string;
    viewsLastDay: number;
    viewsLastMonth: number;
    viewsLastWeek: number;
}

export interface GetDashboardsDashboardParameterDetail {
    /**
     * The default value of the parameter.
     */
    defaultValue: string;
    /**
     * For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
     * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
     */
    dynamicFieldType: string;
    /**
     * If `true` the parameter will only be shown on the edit view of the dashboard.
     */
    hideFromView: boolean;
    /**
     * The label for the parameter.
     */
    label: string;
    /**
     * The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
     */
    parameterType: string;
    /**
     * For `DYNAMIC` parameter types, the query to execute to return values.
     */
    queryValue: string;
    /**
     * For `TAG_KEY` dynamic field types, the tag key to return.
     */
    tagKey: string;
    /**
     * A string to string map. At least one of the keys must match the value of
     * `defaultValue`.
     */
    valuesToReadableStrings: {[key: string]: string};
}

export interface GetDashboardsDashboardSection {
    /**
     * The name of the parameters.
     */
    name: string;
    rows: outputs.GetDashboardsDashboardSectionRow[];
}

export interface GetDashboardsDashboardSectionRow {
    charts: outputs.GetDashboardsDashboardSectionRowChart[];
    heightFactor: number;
    /**
     * The name of the parameters.
     */
    name: string;
}

export interface GetDashboardsDashboardSectionRowChart {
    /**
     * The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.
     */
    base: number;
    chartAttributes: string;
    chartSettings: outputs.GetDashboardsDashboardSectionRowChartChartSetting[];
    /**
     * Description of the chart.
     */
    description: string;
    includeObsoleteMetrics: boolean;
    interpolatePointsKey: boolean;
    /**
     * The name of the parameters.
     */
    name: string;
    noDefaultEvents: boolean;
    sources: outputs.GetDashboardsDashboardSectionRowChartSource[];
    /**
     * Summarization strategy for the chart. MEAN is default.
     */
    summarization: string;
    /**
     * String to label the units of the chart on the Y-Axis.
     */
    units: string;
}

export interface GetDashboardsDashboardSectionRowChartChartSetting {
    /**
     * This setting is deprecated.
     */
    autoColumnTags: boolean;
    /**
     * This setting is deprecated.
     */
    columnTags: string;
    /**
     * For the tabular view, a list of point tags to display when using the `custom` tag display mode.
     */
    customTags: string[];
    /**
     * Threshold (in seconds) for time delta between consecutive points in a series above which a dotted line will replace a solid in line plots. Default is 60.
     */
    expectedDataSpacing: number;
    /**
     * (Optional) For a chart with a fixed legend, a list of statistics to display in the legend.
     */
    fixedLegendDisplayStats: string[];
    /**
     * (Optional) Whether to enable a fixed tabular legend adjacent to the chart.
     */
    fixedLegendEnabled: boolean;
    /**
     * (Optional) Statistic to use for determining whether a series is displayed on the fixed legend. Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
     */
    fixedLegendFilterField: string;
    /**
     * (Optional) Number of series to include in the fixed legend.
     */
    fixedLegendFilterLimit: number;
    /**
     * (Optional) Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options are `TOP`, and `BOTTOM`.
     */
    fixedLegendFilterSort: string;
    /**
     * (Optional) This setting is deprecated.
     */
    fixedLegendHideLabel: boolean;
    /**
     * (Optional)  Where the fixed legend should be displayed with respect to the chart. Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
     */
    fixedLegendPosition: string;
    /**
     * (Optional) If `true`, the legend uses non-summarized stats instead of summarized.
     */
    fixedLegendUseRawStats: boolean;
    /**
     * For the tabular view, whether to group multi metrics into a single row by a common source. If set to `false`, each source is displayed in its own row. If set to `true`, multiple metrics for the same host are displayed as different columns in the same row.
     */
    groupBySource: boolean;
    /**
     * (Optional) Whether to disable the display of the floating legend (but reenable it when the ctrl-key is pressed).
     */
    invertDynamicLegendHoverControl: boolean;
    /**
     * Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`, `step-after`, `basis`, `cardinal`, and `monotone`.
     */
    lineType: string;
    /**
     * Max value of the Y-axis. Set to null or leave blank for auto.
     */
    max: number;
    /**
     * Min value of the Y-axis. Set to null or leave blank for auto.
     */
    min: number;
    /**
     * For the tabular view defines how many point tags to display.
     */
    numTags: number;
    /**
     * The markdown content for a Markdown display, in plain text.
     */
    plainMarkdownContent: string;
    /**
     * For the tabular view, whether to display sources. Default is `true`.
     */
    showHosts: boolean;
    /**
     * For the tabular view, whether to display labels. Default is `true`.
     */
    showLabels: boolean;
    /**
     * For the tabular view, whether to display raw values. Default is `false`.
     */
    showRawValues: boolean;
    /**
     * For the tabular view, whether to display values in descending order. Default is `false`.
     */
    sortValuesDescending: boolean;
    /**
     * For the single stat view, the decimal precision of the displayed number.
     */
    sparklineDecimalPrecision: number;
    /**
     * For the single stat view, the color of the displayed text (when not dynamically determined). Values should be in RGBA format.
     */
    sparklineDisplayColor: string;
    /**
     * For the single stat view, the font size of the displayed text, in percent.
     */
    sparklineDisplayFontSize: string;
    /**
     * For the single stat view, the horizontal position of the displayed text. Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
     */
    sparklineDisplayHorizontalPosition: string;
    /**
     * For the single stat view, a string to append to the displayed text.
     */
    sparklineDisplayPostfix: string;
    /**
     * For the single stat view, a string to add before the displayed text.
     */
    sparklineDisplayPrefix: string;
    /**
     * For the single stat view, where to display the name of the query or the value of the query. Valid options are `VALUE` or `LABEL`.
     */
    sparklineDisplayValueType: string;
    /**
     * This setting is deprecated.
     */
    sparklineDisplayVerticalPosition: string;
    /**
     * For the single stat view, the color of the background fill. Values should be in RGBA format.
     */
    sparklineFillColor: string;
    /**
     * For the single stat view, the color of the line. Values should be in RGBA format.
     */
    sparklineLineColor: string;
    /**
     * For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart. Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
     */
    sparklineSize: string;
    /**
     * For the single stat view, whether to apply dynamic color settings to the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
     */
    sparklineValueColorMapApplyTo: string;
    /**
     * For the single stat view, a list of colors that differing query values map to. Must contain one more element than `sparklineValueColorMapValuesV2`. Values should be in RGBA format.
     */
    sparklineValueColorMapColors: string[];
    /**
     * This setting is deprecated.
     */
    sparklineValueColorMapValues: number[];
    /**
     * For the single stat view, a list of boundaries for mapping different query values to colors. Must contain one element less than `sparklineValueColorMapColors`.
     */
    sparklineValueColorMapValuesV2s: number[];
    /**
     * For the single stat view, a list of display text values that different query values map to. Must contain one more element than `sparklineValueTextMapThresholds`.
     */
    sparklineValueTextMapTexts: string[];
    /**
     * For the single stat view, a list of threshold boundaries for mapping different query values to display text. Must contain one element less than `sparklineValueTextMapText`.
     */
    sparklineValueTextMapThresholds: number[];
    /**
     * Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
     */
    stackType: string;
    /**
     * For the tabular view, which mode to use to determine which point tags to display. Valid options are `all`, `top`, or `custom`.
     */
    tagMode: string;
    /**
     * For x-y scatterplots, whether to color more recent points as darker than older points.
     */
    timeBasedColoring: boolean;
    /**
     * Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`, `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`, `top-k`, `status-list`, and `histogram`.
     */
    type: string;
    /**
     * Width, in minutes, of the time window to use for `last` windowing.
     */
    windowSize: number;
    /**
     * For the tabular view, whether to use the full time window for the query or the last X minutes. Valid options are `full` or `last`.
     */
    windowing: string;
    /**
     * For x-y scatterplots, max value for the X-axis. Set to null for auto.
     */
    xmax: number;
    /**
     * For x-y scatterplots, min value for the X-axis. Set to null for auto.
     */
    xmin: number;
    y0ScaleSiBy1024: boolean;
    /**
     * (Optional) Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
     */
    y0UnitAutoscaling: boolean;
    y1Max: number;
    y1Min: number;
    y1ScaleSiBy1024: boolean;
    /**
     * (Optional) Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
     */
    y1UnitAutoscaling: boolean;
    /**
     * For plots with multiple Y-axes, units for right side Y-axis.
     */
    y1Units: string;
    /**
     * For x-y scatterplots, max value for the Y-axis. Set to null for auto.
     */
    ymax: number;
    /**
     * For x-y scatterplots, min value for the Y-axis. Set to null for auto.
     */
    ymin: number;
}

export interface GetDashboardsDashboardSectionRowChartSource {
    /**
     * Whether the source is disabled.
     */
    disabled: boolean;
    /**
     * The name of the parameters.
     */
    name: string;
    /**
     * Query expression to plot on the chart.
     */
    query: string;
    querybuilderEnabled: boolean;
    /**
     * For scatter plots, does this query source the X-axis or the Y-axis, `X`, or `Y`.
     */
    scatterPlotSource: string;
    secondaryAxis: boolean;
    sourceColor: string;
    /**
     * A description for the purpose of this source.
     */
    sourceDescription: string;
}

export interface GetDerivedMetricsDerivedMetric {
    /**
     * User-supplied additional explanatory information about the derived metric.
     */
    additionalInformation: string;
    /**
     * The ID of the user who created the derived metric.
     */
    createUserId: string;
    /**
     * The timestamp in epoch milliseconds indicating when the derived metric is created.
     */
    createdEpochMillis: number;
    /**
     * A Boolean flag indicating whether the derived metric is deleted or not.
     */
    deleted: boolean;
    /**
     * A list of hosts used in the derived metric.
     */
    hostsUseds: string[];
    /**
     * The ID of the derived metric in Wavefront.
     * * `query`- A Wavefront query that is evaluated at regular intervals (default is 1 minute).
     */
    id: string;
    /**
     * A Boolean variable indicating trash status.
     */
    inTrash: boolean;
    /**
     * A Boolean flag indicating whether to include obsolete metrics or not.
     */
    includeObsoleteMetrics: boolean;
    /**
     * Last error message occurred.
     */
    lastErrorMessage: string;
    /**
     * Timestamp of the last failed derived metric.
     */
    lastFailedTime: number;
    /**
     * The last processed timestamp.
     */
    lastProcessedMillis: number;
    /**
     * The timestamp indicating the last time the query was executed.
     * * `metricsUsed` -A list of metrics used in the derived metric.
     */
    lastQueryTime: number;
    metricsUseds: string[];
    /**
     * How frequently the query generating the derived metric is run.
     */
    minutes: number;
    /**
     * The name of the derived metric in Wavefront.
     */
    name: string;
    /**
     * The number of points scanned when the last query was executed.
     */
    pointsScannedAtLastQuery: number;
    /**
     * The specified query is executed every `processRateMinutes` minutes.
     */
    processRateMinutes: number;
    query: string;
    /**
     * A Boolean variable indicating whether query is failing for the derived metric.
     */
    queryFailing: boolean;
    /**
     * A Boolean flag for enabling `queryQb`
     */
    queryQbEnabled: boolean;
    /**
     * The status of the derived metric.
     */
    statuses: string[];
    /**
     * A set of tags assigned to the derived metric.
     */
    tags: string[];
    /**
     * The ID of the user who updated the derived metric.
     */
    updateUserId: string;
    /**
     * The timestamp in epoch milliseconds indicating when the derived metric is updated.
     */
    updatedEpochMillis: number;
}

export interface GetEventsEvent {
    /**
     * Annotations associated with the event.
     */
    annotations: {[key: string]: string};
    /**
     * The description of the event.
     */
    details: string;
    endtimeKey: number;
    /**
     * The ID of the event in Wavefront.
     * * `startTime`- The start time of the event in epoch milliseconds.
     */
    id: string;
    /**
     * A Boolean flag. If set to `true`, creates a point-in-time event (i.e. with no duration).
     */
    isEphemeral: boolean;
    /**
     * The name of the event in Wavefront.
     */
    name: string;
    /**
     * The severity category of the event.
     */
    severity: string;
    startTime: number;
    /**
     * A set of tags assigned to the event.
     */
    tags: string[];
    /**
     * The type of the event.
     */
    type: string;
}

export interface GetExternalLinksExternalLink {
    /**
     * The timestamp in epoch milliseconds indicating when the external link is created.
     */
    createdEpochMillis: number;
    /**
     * The ID of the user who created the external link.
     */
    creatorId: string;
    /**
     * Human-readable description of the link.
     */
    description: string;
    /**
     * The ID of the external link.
     */
    id: string;
    /**
     * Whether this is a "Log Integration" subType of external link.
     */
    isLogIntegration: boolean;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. If present, the metric name of the highlighted series must match this regular expression in order for the link to be displayed.
     */
    metricFilterRegex: string;
    /**
     * The name of the external link.
     */
    name: string;
    /**
     * (Optional) Controls whether a link is displayed in the context menu of a highlighted
     * series. This is a map from string to regular expression. The highlighted series must contain point tags whose
     * keys are present in the keys of this map and whose values match the regular expressions associated with those
     * keys in order for the link to be displayed.
     */
    pointTagFilterRegexes: {[key: string]: string};
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. If present, the source name of the highlighted series must match this regular expression in order for the link to be displayed.
     */
    sourceFilterRegex: string;
    /**
     * The mustache template for the link. The template must expand to a full URL, including scheme, origin, etc.
     */
    template: string;
    /**
     * The timestamp in epoch milliseconds indicating when the external link is updated.
     */
    updatedEpochMillis: number;
    /**
     * The ID of the user who updated the external link.
     */
    updaterId: string;
}

export interface GetMaintenanceWindowAllMaintenanceWindow {
    createdEpochMillis: number;
    creatorId: string;
    customerId: string;
    endTimeInSeconds: number;
    eventName: string;
    hostTagGroupHostNamesGroupAnded: boolean;
    id: string;
    reason: string;
    relevantCustomerTags: string[];
    relevantHostNames: string[];
    relevantHostTags: string[];
    relevantHostTagsAnded: boolean;
    runningState: string;
    sortAttr: number;
    startTimeInSeconds: number;
    title: string;
    updatedEpochMillis: number;
    updaterId: string;
}

export interface GetMetricsPolicyPolicyRule {
    accessType: string;
    accountIds: string[];
    description: string;
    name: string;
    prefixes: string[];
    roleIds: string[];
    tags: outputs.GetMetricsPolicyPolicyRuleTag[];
    tagsAnded: boolean;
    userGroupIds: string[];
}

export interface GetMetricsPolicyPolicyRuleTag {
    key: string;
    value: string;
}

export interface GetRolesRole {
    /**
     * The Role's description.
     */
    description: string;
    /**
     * The Role ID.
     */
    id: string;
    /**
     * The Role Name.
     */
    name: string;
    /**
     * List of Permissions (Strings) associated with Role.
     */
    permissions: string[];
}

export interface GetUserGroupsUserGroup {
    /**
     * The group description.
     */
    description: string;
    /**
     * The group ID.
     */
    id: string;
    /**
     * The group name.
     */
    name: string;
    /**
     * List of roles associated with the group.
     */
    roles: string[];
    /**
     * List of users assigned to the group.
     */
    users: string[];
}

export interface GetUsersUser {
    customer: string;
    email: string;
    /**
     * When the user last logged in to Wavefront.
     */
    lastSuccessfulLogin: number;
    /**
     * List of permissions granted to a user.
     */
    permissions: string[];
    /**
     * List of User Group Ids the user is a member of.
     * * `customer`- The customer the user is associated with.
     */
    userGroupIds: string[];
}

export interface MetricsPolicyPolicyRule {
    /**
     * Valid options are `ALLOW` and `BLOCK`.
     */
    accessType: string;
    /**
     * List of account ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
     */
    accountIds?: string[];
    /**
     * A detailed description of the Metrics Policy. The description is visible only when you edit the rule.
     */
    description: string;
    /**
     * The unique name identifier for a Metrics Policy. The name is visible on the Metrics Security Policy page.
     */
    name: string;
    /**
     * List of prefixes to match metrics on. You can specify the full metric name or use a wildcard character in metric names, sources, or point tags. The wildcard character alone (*) means all metrics.
     */
    prefixes: string[];
    /**
     * -(Optional) List of role ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
     */
    roleIds?: string[];
    /**
     * List of Key/Value tags to select target metrics for policy.
     */
    tags?: outputs.MetricsPolicyPolicyRuleTag[];
    /**
     * Bool where `true` require all tags are met by selected metrics, else `false` select metrics that match any give tag.
     */
    tagsAnded: boolean;
    /**
     * List of user group ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
     */
    userGroupIds?: string[];
}

export interface MetricsPolicyPolicyRuleTag {
    /**
     * The tag's key.
     */
    key: string;
    /**
     * The tag's value.
     */
    value: string;
}

