// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AlertTargetRoute {
    filter?: {[key: string]: string};
    /**
     * The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
     */
    method: string;
    target: string;
}

export interface CloudIntegrationNewRelicMetricFilter {
    /**
     * The name of a NewRelic App.
     */
    appName: string;
    /**
     * A regular expression that a metric name must match (case-insensitively) in order to be ingested.
     */
    metricFilterRegex: string;
}

export interface DashboardParameterDetail {
    /**
     * The default value of the parameter.
     */
    defaultValue: string;
    /**
     * For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
     * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
     */
    dynamicFieldType?: string;
    /**
     * If `true` the parameter will only be shown on the edit view of the dashboard.
     */
    hideFromView: boolean;
    /**
     * The label for the parameter.
     */
    label: string;
    /**
     * The name of the parameters.
     */
    name: string;
    /**
     * The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
     */
    parameterType: string;
    /**
     * For `DYNAMIC` parameter types, the query to execute to return values.
     */
    queryValue?: string;
    /**
     * for `TAG_KEY` dynamic field types, the tag key to return.
     */
    tagKey?: string;
    /**
     * A string->string map.  At least one of the keys must match the value of
     * `defaultValue`.
     */
    valuesToReadableStrings: {[key: string]: string};
}

export interface DashboardSection {
    /**
     * Name of this section.
     */
    name: string;
    /**
     * See dashboard section rows.
     */
    rows: outputs.DashboardSectionRow[];
}

export interface DashboardSectionRow {
    /**
     * Charts in this section. See dashboard chart.
     */
    charts: outputs.DashboardSectionRowChart[];
}

export interface DashboardSectionRowChart {
    /**
     * The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.
     */
    base?: number;
    chartAttribute?: string;
    /**
     * Chart settings. See chart settings.
     */
    chartSetting: outputs.DashboardSectionRowChartChartSetting;
    /**
     * Description of the chart.
     */
    description?: string;
    /**
     * Name of the source.
     */
    name: string;
    /**
     * Query expression to plot on the chart. See chart source queries.
     */
    sources: outputs.DashboardSectionRowChartSource[];
    /**
     * Summarization strategy for the chart. MEAN is default. Valid options are, `MEAN`, 
     * `MEDIAN`, `MIN`, `MAX`, `SUM`, `COUNT`, `LAST`, `FIRST`.
     */
    summarization: string;
    /**
     * String to label the units of the chart on the Y-Axis.
     */
    units: string;
}

export interface DashboardSectionRowChartChartSetting {
    /**
     * This setting is deprecated.
     */
    autoColumnTags?: boolean;
    /**
     * This setting is deprecated.
     */
    columnTags?: string;
    /**
     * For the tabular view, a list of point tags to display when using the `custom` tag display mode.
     */
    customTags?: string[];
    /**
     * Threshold (in seconds) for time delta between consecutive points in a series
     * above which a dotted line will replace a solid in in line plots. Default is 60.
     */
    expectedDataSpacing?: number;
    /**
     * For a chart with a fixed legend, a list of statistics to display in the legend.
     */
    fixedLegendDisplayStats?: string[];
    /**
     * Whether to enable a fixed tabular legend adjacent to the chart.
     */
    fixedLegendEnabled?: boolean;
    /**
     * Statistic to use for determining whether a series is displayed on the fixed legend.
     * Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
     */
    fixedLegendFilterField?: string;
    /**
     * Number of series to include in the fixed legend.
     */
    fixedLegendFilterLimit?: number;
    /**
     * Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
     * are `TOP`, and `BOTTOM`.
     */
    fixedLegendFilterSort?: string;
    /**
     * This setting is deprecated.
     */
    fixedLegendHideLabel?: boolean;
    /**
     * Where the fixed legend should be displayed with respect to the chart.
     * Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
     */
    fixedLegendPosition?: string;
    /**
     * If `true`, the legend uses non-summarized stats instead of summarized.
     */
    fixedLegendUseRawStats?: boolean;
    /**
     * For the tabular view, whether to group multi metrics into a single row by a common source.
     * If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host are displayed as different
     * columns in the same row.
     */
    groupBySource?: boolean;
    /**
     * Whether to disable the display of the floating legend (but
     * reenable it when the ctrl-key is pressed).
     */
    invertDynamicLegendHoverControl?: boolean;
    /**
     * Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`, 
     * `step-after`, `basis`, `cardinal`, and `monotone`.
     */
    lineType?: string;
    /**
     * Max value of the Y-axis. Set to null or leave blank for auto.
     */
    max?: number;
    /**
     * Min value of the Y-axis. Set to null or leave blank for auto.
     */
    min?: number;
    /**
     * For the tabular view defines how many point tags to display.
     */
    numTags?: number;
    /**
     * The markdown content for a Markdown display, in plain text.
     */
    plainMarkdownContent?: string;
    /**
     * For the tabular view, whether to display sources. Default is `true`.
     */
    showHosts?: boolean;
    /**
     * For the tabular view, whether to display labels. Default is `true`.
     */
    showLabels?: boolean;
    /**
     * For the tabular view, whether to display raw values. Default is `false`.
     */
    showRawValues?: boolean;
    /**
     * For the tabular view, whether to display values in descending order. Default is `false`.
     */
    sortValuesDescending?: boolean;
    /**
     * For the single stat view, the decimal precision of the displayed number.
     */
    sparklineDecimalPrecision?: number;
    /**
     * For the single stat view, the color of the displayed text (when not dynamically determined). 
     * Values should be in `rgba(,,,,)` format.
     */
    sparklineDisplayColor?: string;
    /**
     * For the single stat view, the font size of the displayed text, in percent.
     */
    sparklineDisplayFontSize?: string;
    /**
     * For the single stat view, the horizontal position of the displayed text.
     * Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
     */
    sparklineDisplayHorizontalPosition?: string;
    /**
     * For the single stat view, a string to append to the displayed text.
     */
    sparklineDisplayPostfix?: string;
    /**
     * For the single stat view, a string to add before the displayed text.
     */
    sparklineDisplayPrefix?: string;
    /**
     * For the single stat view, where to display the name of the query or the value of the query.
     * Valid options are `VALUE` or `LABEL`.
     */
    sparklineDisplayValueType?: string;
    /**
     * This setting is deprecated.
     */
    sparklineDisplayVerticalPosition?: string;
    /**
     * For the single stat view, the color of the background fill.  Values should be
     * in `rgba(,,,,)`.
     */
    sparklineFillColor?: string;
    /**
     * For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format.
     */
    sparklineLineColor?: string;
    /**
     * For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart.
     * Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
     */
    sparklineSize?: string;
    /**
     * For the single stat view, whether to apply dynamic color settings to 
     * the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
     */
    sparklineValueColorMapApplyTo?: string;
    /**
     * For the single stat view, A list of colors that differing query values map to. 
     * Must contain one more element than `sparklineValueColorMapValuesV2`. Values should be in `rgba(,,,,)`.
     */
    sparklineValueColorMapColors?: string[];
    /**
     * This setting is deprecated.
     */
    sparklineValueColorMapValues?: number[];
    /**
     * For the single stat view, a list of boundaries for mapping different
     * query values to colors.  Must contain one element less than `sparklineValueColorMapColors`.
     */
    sparklineValueColorMapValuesV2s?: number[];
    /**
     * For the single stat view, a list of display text values that different query
     * values map to.  Must contain one more element than `sparklineValueTextMapThresholds`.
     */
    sparklineValueTextMapTexts?: string[];
    /**
     * For the single stat view, a list of threshold boundaries for 
     * mapping different query values to display text.  Must contain one element less than `sparklineValueTextMapText`.
     */
    sparklineValueTextMapThresholds?: number[];
    /**
     * Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
     * stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
     * center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
     */
    stackType?: string;
    /**
     * For the tabular view, which mode to use to determine which point tags to display.
     * Valid options are `all`, `top`, or `custom`.
     */
    tagMode?: string;
    /**
     * For x-y scatterplots, whether to color more recent points as darker than older points.
     */
    timeBasedColoring?: boolean;
    /**
     * Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to 
     * the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the
     * Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
     * `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
     * `top-k`, `status-list`, and `histogram`.
     */
    type: string;
    /**
     * Width, in minutes, of the time window to use for `last` windowing.
     */
    windowSize?: number;
    /**
     * For the tabular view, whether to use the full time window for the query or the last X minutes.
     * Valid options are `full` or `last`.
     */
    windowing?: string;
    /**
     * For x-y scatterplots, max value for the X-axis. Set to null for auto.
     */
    xmax?: number;
    /**
     * For x-y scatterplots, min value for the X-axis. Set to null for auto.
     */
    xmin?: number;
    /**
     * Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     */
    y0ScaleSiBy1024?: boolean;
    /**
     * Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
     */
    y0UnitAutoscaling?: boolean;
    /**
     * Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     */
    y1ScaleSiBy1024?: boolean;
    /**
     * Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
     */
    y1UnitAutoscaling?: boolean;
    /**
     * For plots with multiple Y-axes, units for right side Y-axis.
     */
    y1Units?: string;
    /**
     * For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto.
     */
    y1max?: number;
    /**
     * For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto.
     */
    y1min?: number;
    /**
     * For x-y scatterplots, max value for the Y-axis. Set to null for auto.
     */
    ymax?: number;
    /**
     * For x-y scatterplots, min value for the Y-axis. Set to null for auto.
     */
    ymin?: number;
}

export interface DashboardSectionRowChartSource {
    /**
     * Whether the source is disabled.
     */
    disabled?: boolean;
    /**
     * Name of the source.
     */
    name: string;
    /**
     * Query expression to plot on the chart.
     */
    query: string;
    /**
     * Whether or not this source line should have the query builder enabled.
     */
    queryBuilderEnabled?: boolean;
    /**
     * For scatter plots, does this query source the X-axis or the Y-axis, `X`, or `Y`.
     */
    scatterPlotSource?: string;
    /**
     * A description for the purpose of this source.
     */
    sourceDescription?: string;
}

export interface GetMetricsPolicyPolicyRule {
    accessType: string;
    accountIds: string[];
    description: string;
    name: string;
    prefixes: string[];
    roleIds: string[];
    tags: outputs.GetMetricsPolicyPolicyRuleTag[];
    tagsAnded: boolean;
    userGroupIds: string[];
}

export interface GetMetricsPolicyPolicyRuleTag {
    key: string;
    value: string;
}

export interface GetRolesRole {
    /**
     * The Role's description.
     */
    description: string;
    /**
     * The Role ID.
     */
    id: string;
    /**
     * The Role Name.
     */
    name: string;
    /**
     * List of Permissions (Strings) associated with Role.
     */
    permissions: string[];
}

export interface GetUserGroupsUserGroup {
    /**
     * The group description.
     */
    description: string;
    /**
     * The group ID.
     */
    id: string;
    /**
     * The group name.
     */
    name: string;
    /**
     * List of roles associated with the group.
     */
    roles: string[];
    /**
     * List of users assigned to the group.
     */
    users: string[];
}

export interface GetUsersUser {
    customer: string;
    email: string;
    /**
     * When the user last logged in to Wavefront.
     */
    lastSuccessfulLogin: number;
    /**
     * List of permissions granted to a user.
     */
    permissions: string[];
    /**
     * List of User Group Ids the user is a member of.
     * * `customer`- The customer the user is associated with.
     */
    userGroupIds: string[];
}

