// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to get information about a certain Wavefront derived metric by its ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * //Get the information about a derived metric.
 * const example = wavefront.getDerivedMetric({
 *     id: "derived_metric_id",
 * });
 * ```
 */
export function getDerivedMetric(args: GetDerivedMetricArgs, opts?: pulumi.InvokeOptions): Promise<GetDerivedMetricResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("wavefront:index/getDerivedMetric:getDerivedMetric", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getDerivedMetric.
 */
export interface GetDerivedMetricArgs {
    /**
     * The ID associated with the derived metric data to be fetched.
     */
    id: string;
}

/**
 * A collection of values returned by getDerivedMetric.
 */
export interface GetDerivedMetricResult {
    /**
     * User-supplied additional explanatory information about the derived metric.
     */
    readonly additionalInformation: string;
    /**
     * The ID of the user who created the derived metric.
     */
    readonly createUserId: string;
    /**
     * The timestamp in epoch milliseconds indicating when the derived metric is created.
     */
    readonly createdEpochMillis: number;
    /**
     * A Boolean flag indicating whether the derived metric is deleted or not.
     */
    readonly deleted: boolean;
    /**
     * A list of hosts used in the derived metric.
     */
    readonly hostsUseds: string[];
    /**
     * The ID of the derived metric in Wavefront.
     */
    readonly id: string;
    /**
     * A Boolean variable indicating trash status.
     */
    readonly inTrash: boolean;
    /**
     * A Boolean flag indicating whether to include obsolete metrics or not.
     */
    readonly includeObsoleteMetrics: boolean;
    /**
     * Last error message occurred.
     */
    readonly lastErrorMessage: string;
    /**
     * Timestamp of the last failed derived metric.
     */
    readonly lastFailedTime: number;
    /**
     * The last processed timestamp.
     */
    readonly lastProcessedMillis: number;
    /**
     * The timestamp indicating the last time the query was executed.
     */
    readonly lastQueryTime: number;
    /**
     * A list of metrics used in the derived metric.
     */
    readonly metricsUseds: string[];
    /**
     * How frequently the query generating the derived metric is run.
     */
    readonly minutes: number;
    /**
     * The name of the derived metric in Wavefront.
     */
    readonly name: string;
    /**
     * The number of points scanned when last query was executed.
     */
    readonly pointsScannedAtLastQuery: number;
    /**
     * The specified query is executed every `processRateMinutes` minutes.
     */
    readonly processRateMinutes: number;
    /**
     * A Wavefront query that is evaluated at regular intervals (default is 1 minute).
     */
    readonly query: string;
    /**
     * A Boolean variable indicating whether query is failing for the derived metric.
     */
    readonly queryFailing: boolean;
    /**
     * A Boolean flag for enabling `queryQb`
     */
    readonly queryQbEnabled: boolean;
    /**
     * The status of the derived metric.
     */
    readonly statuses: string[];
    /**
     * A set of tags assigned to the derived metric.
     */
    readonly tags: string[];
    /**
     * The ID of the user who updated the derived metric.
     */
    readonly updateUserId: string;
    /**
     * The timestamp in epoch milliseconds indicating when the derived metric is updated.
     */
    readonly updatedEpochMillis: number;
}
/**
 * Use this data source to get information about a certain Wavefront derived metric by its ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * //Get the information about a derived metric.
 * const example = wavefront.getDerivedMetric({
 *     id: "derived_metric_id",
 * });
 * ```
 */
export function getDerivedMetricOutput(args: GetDerivedMetricOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDerivedMetricResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("wavefront:index/getDerivedMetric:getDerivedMetric", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getDerivedMetric.
 */
export interface GetDerivedMetricOutputArgs {
    /**
     * The ID associated with the derived metric data to be fetched.
     */
    id: pulumi.Input<string>;
}
