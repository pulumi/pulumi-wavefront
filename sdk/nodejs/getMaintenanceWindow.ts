// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to get information about a Wavefront maintenance window by its ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const example = wavefront.getMaintenanceWindow({
 *     id: "sample-maintenance-window-id",
 * });
 * ```
 */
export function getMaintenanceWindow(args: GetMaintenanceWindowArgs, opts?: pulumi.InvokeOptions): Promise<GetMaintenanceWindowResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("wavefront:index/getMaintenanceWindow:getMaintenanceWindow", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getMaintenanceWindow.
 */
export interface GetMaintenanceWindowArgs {
    /**
     * The ID of the maintenance window.
     */
    id: string;
}

/**
 * A collection of values returned by getMaintenanceWindow.
 */
export interface GetMaintenanceWindowResult {
    /**
     * The timestamp in epoch milliseconds indicating when the maintenance window is created.
     */
    readonly createdEpochMillis: number;
    /**
     * The ID of the user who created the maintenance window.
     */
    readonly creatorId: string;
    /**
     * The ID of the customer in Wavefront.
     */
    readonly customerId: string;
    /**
     * The end time in seconds after 1 Jan 1970 GMT.
     */
    readonly endTimeInSeconds: number;
    /**
     * The event name of the maintenance window.
     */
    readonly eventName: string;
    /**
     * If set to `true`, the source or host must be in `relevantHostNames` and must have tags matching the specification formed by `relevantHostTags` and `relevantHostTagsAnded` in for this maintenance window to apply.
     * If set to false, the source or host must either be in `relevantHostNames` or match `relevantHostTags` and `relevantHostTagsAnded`. Default value is `false`.
     */
    readonly hostTagGroupHostNamesGroupAnded: boolean;
    /**
     * The ID of the maintenance window.
     */
    readonly id: string;
    /**
     * The reason for the maintenance window.
     */
    readonly reason: string;
    /**
     * The list of alert tags whose matching alerts will be put into maintenance because
     * of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
     * is required.
     */
    readonly relevantCustomerTags: string[];
    /**
     * The list of source or host names that will be put into maintenance because of this
     * maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
     * is required.
     */
    readonly relevantHostNames: string[];
    /**
     * The list of source or host tags whose matching sources or hosts will be put into maintenance
     * because of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or
     * `relevantHostNames` is required.
     */
    readonly relevantHostTags: string[];
    /**
     * Whether to AND source or host tags listed in `relevantHostTags`.
     * If set to `true`, the source or host must contain all tags for the maintenance window to apply. If set to `false`,
     * the tags are OR'ed, and the source or host must contain one of the tags. Default value is `false`.
     */
    readonly relevantHostTagsAnded: boolean;
    /**
     * The running state of the maintenance window.
     */
    readonly runningState: string;
    readonly sortAttr: number;
    /**
     * The start time in seconds after 1 Jan 1970 GMT.
     */
    readonly startTimeInSeconds: number;
    /**
     * The title of the maintenance window.
     */
    readonly title: string;
    /**
     * The timestamp in epoch milliseconds indicating when the maintenance window is updated.
     */
    readonly updatedEpochMillis: number;
    /**
     * The ID of the user who updated the maintenance window.
     */
    readonly updaterId: string;
}
/**
 * Use this data source to get information about a Wavefront maintenance window by its ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const example = wavefront.getMaintenanceWindow({
 *     id: "sample-maintenance-window-id",
 * });
 * ```
 */
export function getMaintenanceWindowOutput(args: GetMaintenanceWindowOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMaintenanceWindowResult> {
    return pulumi.output(args).apply((a: any) => getMaintenanceWindow(a, opts))
}

/**
 * A collection of arguments for invoking getMaintenanceWindow.
 */
export interface GetMaintenanceWindowOutputArgs {
    /**
     * The ID of the maintenance window.
     */
    id: pulumi.Input<string>;
}
