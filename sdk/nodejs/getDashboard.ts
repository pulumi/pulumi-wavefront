// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to get information about a certain Wavefront dashboard by its ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * // Get the information about a dashboard.
 * const example = wavefront.getDashboard({
 *     id: "dashboard-id",
 * });
 * ```
 */
export function getDashboard(args: GetDashboardArgs, opts?: pulumi.InvokeOptions): Promise<GetDashboardResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("wavefront:index/getDashboard:getDashboard", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getDashboard.
 */
export interface GetDashboardArgs {
    /**
     * The ID associated with the dashboard data to be fetched.
     */
    id: string;
}

/**
 * A collection of values returned by getDashboard.
 */
export interface GetDashboardResult {
    /**
     * A list of users that have modify ACL access to the dashboard.
     */
    readonly canModifies: string[];
    /**
     * A list of users that have view ACL access to the dashboard.
     */
    readonly canViews: string[];
    readonly chartTitleBgColor: string;
    readonly chartTitleColor: string;
    readonly chartTitleScalar: number;
    readonly createdEpochMillis: number;
    readonly creatorId: string;
    readonly customer: string;
    readonly defaultEndTime: number;
    readonly defaultStartTime: number;
    readonly defaultTimeWindow: string;
    readonly deleted: boolean;
    /**
     * Description of the chart.
     */
    readonly description: string;
    readonly displayDescription: boolean;
    /**
     * Whether the dashboard parameters section is opened by default when the dashboard
     * is shown.
     */
    readonly displayQueryParameters: boolean;
    /**
     * Whether the "pills" quick-linked the sections of the dashboard are
     * displayed by default when the dashboard is shown.
     */
    readonly displaySectionTableOfContents: boolean;
    /**
     * How charts belonging to this dashboard should display events. `BYCHART` is default if
     * unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
     */
    readonly eventFilterType: string;
    readonly eventQuery: string;
    readonly favorite: boolean;
    readonly hidden: boolean;
    readonly id: string;
    /**
     * The name of the parameters.
     */
    readonly name: string;
    readonly numCharts: number;
    readonly numFavorites: number;
    /**
     * The current JSON representation of dashboard parameters. See parameter details.
     */
    readonly parameterDetails: outputs.GetDashboardParameterDetail[];
    readonly parameters: {[key: string]: string};
    readonly sections: outputs.GetDashboardSection[];
    readonly systemOwned: boolean;
    /**
     * A set of tags to assign to this resource.
     */
    readonly tags: string[];
    readonly updatedEpochMillis: number;
    readonly updaterId: string;
    /**
     * Unique identifier, also a URL slug of the dashboard.
     */
    readonly url: string;
    readonly viewsLastDay: number;
    readonly viewsLastMonth: number;
    readonly viewsLastWeek: number;
}
/**
 * Use this data source to get information about a certain Wavefront dashboard by its ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * // Get the information about a dashboard.
 * const example = wavefront.getDashboard({
 *     id: "dashboard-id",
 * });
 * ```
 */
export function getDashboardOutput(args: GetDashboardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDashboardResult> {
    return pulumi.output(args).apply((a: any) => getDashboard(a, opts))
}

/**
 * A collection of arguments for invoking getDashboard.
 */
export interface GetDashboardOutputArgs {
    /**
     * The ID associated with the dashboard data to be fetched.
     */
    id: pulumi.Input<string>;
}
