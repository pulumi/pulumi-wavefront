// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Wavefront Cloud Integration for CloudTrail. This allows CloudTrail cloud integrations to be created,
 * updated, and deleted.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const extId = new wavefront.CloudIntegrationAwsExternalId("ext_id", {});
 * const cloudtrail = new wavefront.CloudIntegrationCloudTrail("cloudtrail", {
 *     name: "Test Integration",
 *     roleArn: "arn:aws::1234567:role/example-arn",
 *     externalId: extId.id,
 *     region: "us-west-2",
 *     bucketName: "example-s3-bucket",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * CloudTrail Cloud Integrations can be imported by using the `id`, e.g.:
 *
 * ```sh
 * $ pulumi import wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail cloudtrail a411c16b-3cf7-4f03-bf11-8ca05aab898d
 * ```
 */
export class CloudIntegrationCloudTrail extends pulumi.CustomResource {
    /**
     * Get an existing CloudIntegrationCloudTrail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudIntegrationCloudTrailState, opts?: pulumi.CustomResourceOptions): CloudIntegrationCloudTrail {
        return new CloudIntegrationCloudTrail(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail';

    /**
     * Returns true if the given object is an instance of CloudIntegrationCloudTrail.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudIntegrationCloudTrail {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudIntegrationCloudTrail.__pulumiType;
    }

    /**
     * A list of point tag key-values to add to every point ingested using this integration.
     */
    public readonly additionalTags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the S3 bucket where CloudTrail logs are stored.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
     */
    public readonly externalId!: pulumi.Output<string>;
    /**
     * Rule to filter CloudTrail log event.
     */
    public readonly filterRule!: pulumi.Output<string | undefined>;
    /**
     * Forces this resource to save, even if errors are present.
     */
    public readonly forceSave!: pulumi.Output<boolean | undefined>;
    /**
     * The human-readable name of this integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The common prefix, if any, appended to all CloudTrail log files.
     */
    public readonly prefix!: pulumi.Output<string | undefined>;
    /**
     * The AWS region of the S3 bucket where CloudTrail logs are stored.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The external ID corresponding to the Role ARN.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * A value denoting which cloud service this service integrates with.
     */
    public readonly service!: pulumi.Output<string>;
    /**
     * How often, in minutes, to refresh the service.
     */
    public readonly serviceRefreshRateInMinutes!: pulumi.Output<number | undefined>;

    /**
     * Create a CloudIntegrationCloudTrail resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudIntegrationCloudTrailArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudIntegrationCloudTrailArgs | CloudIntegrationCloudTrailState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudIntegrationCloudTrailState | undefined;
            resourceInputs["additionalTags"] = state ? state.additionalTags : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["filterRule"] = state ? state.filterRule : undefined;
            resourceInputs["forceSave"] = state ? state.forceSave : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["serviceRefreshRateInMinutes"] = state ? state.serviceRefreshRateInMinutes : undefined;
        } else {
            const args = argsOrState as CloudIntegrationCloudTrailArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.externalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["additionalTags"] = args ? args.additionalTags : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["filterRule"] = args ? args.filterRule : undefined;
            resourceInputs["forceSave"] = args ? args.forceSave : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["serviceRefreshRateInMinutes"] = args ? args.serviceRefreshRateInMinutes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudIntegrationCloudTrail.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudIntegrationCloudTrail resources.
 */
export interface CloudIntegrationCloudTrailState {
    /**
     * A list of point tag key-values to add to every point ingested using this integration.
     */
    additionalTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the S3 bucket where CloudTrail logs are stored.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
     */
    externalId?: pulumi.Input<string>;
    /**
     * Rule to filter CloudTrail log event.
     */
    filterRule?: pulumi.Input<string>;
    /**
     * Forces this resource to save, even if errors are present.
     */
    forceSave?: pulumi.Input<boolean>;
    /**
     * The human-readable name of this integration.
     */
    name?: pulumi.Input<string>;
    /**
     * The common prefix, if any, appended to all CloudTrail log files.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The AWS region of the S3 bucket where CloudTrail logs are stored.
     */
    region?: pulumi.Input<string>;
    /**
     * The external ID corresponding to the Role ARN.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * A value denoting which cloud service this service integrates with.
     */
    service?: pulumi.Input<string>;
    /**
     * How often, in minutes, to refresh the service.
     */
    serviceRefreshRateInMinutes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CloudIntegrationCloudTrail resource.
 */
export interface CloudIntegrationCloudTrailArgs {
    /**
     * A list of point tag key-values to add to every point ingested using this integration.
     */
    additionalTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the S3 bucket where CloudTrail logs are stored.
     */
    bucketName: pulumi.Input<string>;
    /**
     * The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
     */
    externalId: pulumi.Input<string>;
    /**
     * Rule to filter CloudTrail log event.
     */
    filterRule?: pulumi.Input<string>;
    /**
     * Forces this resource to save, even if errors are present.
     */
    forceSave?: pulumi.Input<boolean>;
    /**
     * The human-readable name of this integration.
     */
    name?: pulumi.Input<string>;
    /**
     * The common prefix, if any, appended to all CloudTrail log files.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The AWS region of the S3 bucket where CloudTrail logs are stored.
     */
    region: pulumi.Input<string>;
    /**
     * The external ID corresponding to the Role ARN.
     */
    roleArn: pulumi.Input<string>;
    /**
     * A value denoting which cloud service this service integrates with.
     */
    service: pulumi.Input<string>;
    /**
     * How often, in minutes, to refresh the service.
     */
    serviceRefreshRateInMinutes?: pulumi.Input<number>;
}
