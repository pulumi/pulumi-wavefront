// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Wavefront External Link Resource. This allows external links to be created, updated, and deleted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const basic = new wavefront.ExternalLink("basic", {
 *     description: "An external link description",
 *     template: "https://example.com/source={{{source}}}&startTime={{startEpochMillis}}",
 * });
 * ```
 *
 * ## Import
 *
 * Maintenance windows can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import wavefront:index/externalLink:ExternalLink basic fVj6fz6zYC4aBkID
 * ```
 */
export class ExternalLink extends pulumi.CustomResource {
    /**
     * Get an existing ExternalLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalLinkState, opts?: pulumi.CustomResourceOptions): ExternalLink {
        return new ExternalLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'wavefront:index/externalLink:ExternalLink';

    /**
     * Returns true if the given object is an instance of ExternalLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalLink.__pulumiType;
    }

    /**
     * Human-readable description for this link
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether this is a "Log Integration" subType of external link
     */
    public readonly isLogIntegration!: pulumi.Output<boolean | undefined>;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. If present, the metric name of the highlighted series must match this regular expression in order for the link to be displayed.
     */
    public readonly metricFilterRegex!: pulumi.Output<string | undefined>;
    /**
     * The name of the external link
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. This is a map from string to regular expression. The highlighted series must contain point tags whose keys are present in the keys of this map and whose values match the regular expressions associated with those keys in order for the link to be displayed
     */
    public readonly pointTagFilterRegexes!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. If present, the source name of the highlighted series must match this regular expression in order for the link to be displayed.
     */
    public readonly sourceFilterRegex!: pulumi.Output<string | undefined>;
    /**
     * The mustache template for this link. The template must expand to a full URL, including scheme, origin, etc.
     */
    public readonly template!: pulumi.Output<string>;

    /**
     * Create a ExternalLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalLinkArgs | ExternalLinkState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ExternalLinkState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["isLogIntegration"] = state ? state.isLogIntegration : undefined;
            inputs["metricFilterRegex"] = state ? state.metricFilterRegex : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pointTagFilterRegexes"] = state ? state.pointTagFilterRegexes : undefined;
            inputs["sourceFilterRegex"] = state ? state.sourceFilterRegex : undefined;
            inputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as ExternalLinkArgs | undefined;
            if (!args || args.description === undefined) {
                throw new Error("Missing required property 'description'");
            }
            if (!args || args.template === undefined) {
                throw new Error("Missing required property 'template'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["isLogIntegration"] = args ? args.isLogIntegration : undefined;
            inputs["metricFilterRegex"] = args ? args.metricFilterRegex : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pointTagFilterRegexes"] = args ? args.pointTagFilterRegexes : undefined;
            inputs["sourceFilterRegex"] = args ? args.sourceFilterRegex : undefined;
            inputs["template"] = args ? args.template : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ExternalLink.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalLink resources.
 */
export interface ExternalLinkState {
    /**
     * Human-readable description for this link
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether this is a "Log Integration" subType of external link
     */
    readonly isLogIntegration?: pulumi.Input<boolean>;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. If present, the metric name of the highlighted series must match this regular expression in order for the link to be displayed.
     */
    readonly metricFilterRegex?: pulumi.Input<string>;
    /**
     * The name of the external link
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. This is a map from string to regular expression. The highlighted series must contain point tags whose keys are present in the keys of this map and whose values match the regular expressions associated with those keys in order for the link to be displayed
     */
    readonly pointTagFilterRegexes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. If present, the source name of the highlighted series must match this regular expression in order for the link to be displayed.
     */
    readonly sourceFilterRegex?: pulumi.Input<string>;
    /**
     * The mustache template for this link. The template must expand to a full URL, including scheme, origin, etc.
     */
    readonly template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalLink resource.
 */
export interface ExternalLinkArgs {
    /**
     * Human-readable description for this link
     */
    readonly description: pulumi.Input<string>;
    /**
     * Whether this is a "Log Integration" subType of external link
     */
    readonly isLogIntegration?: pulumi.Input<boolean>;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. If present, the metric name of the highlighted series must match this regular expression in order for the link to be displayed.
     */
    readonly metricFilterRegex?: pulumi.Input<string>;
    /**
     * The name of the external link
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. This is a map from string to regular expression. The highlighted series must contain point tags whose keys are present in the keys of this map and whose values match the regular expressions associated with those keys in order for the link to be displayed
     */
    readonly pointTagFilterRegexes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Controls whether a link is displayed in the context menu of a highlighted series. If present, the source name of the highlighted series must match this regular expression in order for the link to be displayed.
     */
    readonly sourceFilterRegex?: pulumi.Input<string>;
    /**
     * The mustache template for this link. The template must expand to a full URL, including scheme, origin, etc.
     */
    readonly template: pulumi.Input<string>;
}
