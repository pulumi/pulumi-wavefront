// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Wavefront event resource. This allows events to be created, updated, and deleted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const event = new wavefront.Event("event", {
 *     name: "terraform-test",
 *     annotations: {
 *         severity: "info",
 *         type: "event type",
 *         details: "description",
 *     },
 *     tags: ["eventTag1"],
 * });
 * ```
 *
 * ## Import
 *
 * You can import events by using the id, for example:
 *
 * ```sh
 * $ pulumi import wavefront:index/event:Event event 1479868728473
 * ```
 */
export class Event extends pulumi.CustomResource {
    /**
     * Get an existing Event resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventState, opts?: pulumi.CustomResourceOptions): Event {
        return new Event(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'wavefront:index/event:Event';

    /**
     * Returns true if the given object is an instance of Event.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Event {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Event.__pulumiType;
    }

    /**
     * The annotations associated with the event.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string}>;
    declare public readonly endtimeKey: pulumi.Output<number | undefined>;
    /**
     * The name of the event as it is displayed in Wavefront.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The start time of the event in epoch milliseconds.
     */
    declare public readonly startTime: pulumi.Output<number | undefined>;
    /**
     * A set of tags to assign to this resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a Event resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventArgs | EventState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["endtimeKey"] = state?.endtimeKey;
            resourceInputs["name"] = state?.name;
            resourceInputs["startTime"] = state?.startTime;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as EventArgs | undefined;
            if (args?.annotations === undefined && !opts.urn) {
                throw new Error("Missing required property 'annotations'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["endtimeKey"] = args?.endtimeKey;
            resourceInputs["name"] = args?.name;
            resourceInputs["startTime"] = args?.startTime;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Event.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Event resources.
 */
export interface EventState {
    /**
     * The annotations associated with the event.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endtimeKey?: pulumi.Input<number>;
    /**
     * The name of the event as it is displayed in Wavefront.
     */
    name?: pulumi.Input<string>;
    /**
     * The start time of the event in epoch milliseconds.
     */
    startTime?: pulumi.Input<number>;
    /**
     * A set of tags to assign to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Event resource.
 */
export interface EventArgs {
    /**
     * The annotations associated with the event.
     */
    annotations: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endtimeKey?: pulumi.Input<number>;
    /**
     * The name of the event as it is displayed in Wavefront.
     */
    name?: pulumi.Input<string>;
    /**
     * The start time of the event in epoch milliseconds.
     */
    startTime?: pulumi.Input<number>;
    /**
     * A set of tags to assign to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
