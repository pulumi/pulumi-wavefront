// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Wavefront Ingestion Policy Resource. This allows ingestion policies to be created, updated, and deleted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const basic = new wavefront.IngestionPolicy("basic", {
 *     name: "test_ingestion",
 *     description: "An ingestion policy for testing",
 * });
 * ```
 *
 * ## Import
 *
 * ingestion policies can be imported by using the `id`, e.g.:
 *
 * ```sh
 * $ pulumi import wavefront:index/ingestionPolicy:IngestionPolicy basic test_ingestion-1611946841064
 * ```
 */
export class IngestionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IngestionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IngestionPolicyState, opts?: pulumi.CustomResourceOptions): IngestionPolicy {
        return new IngestionPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'wavefront:index/ingestionPolicy:IngestionPolicy';

    /**
     * Returns true if the given object is an instance of IngestionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IngestionPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IngestionPolicy.__pulumiType;
    }

    declare public readonly accounts: pulumi.Output<string[] | undefined>;
    /**
     * The description of the ingestion policy.
     */
    declare public readonly description: pulumi.Output<string>;
    declare public readonly groups: pulumi.Output<string[] | undefined>;
    /**
     * The name of the ingestion policy.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly namespaces: pulumi.Output<string[] | undefined>;
    declare public readonly scope: pulumi.Output<string>;
    declare public readonly sources: pulumi.Output<string[] | undefined>;
    declare public readonly tags: pulumi.Output<outputs.IngestionPolicyTag[] | undefined>;

    /**
     * Create a IngestionPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IngestionPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IngestionPolicyArgs | IngestionPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IngestionPolicyState | undefined;
            resourceInputs["accounts"] = state?.accounts;
            resourceInputs["description"] = state?.description;
            resourceInputs["groups"] = state?.groups;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespaces"] = state?.namespaces;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["sources"] = state?.sources;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as IngestionPolicyArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.scope === undefined && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["accounts"] = args?.accounts;
            resourceInputs["description"] = args?.description;
            resourceInputs["groups"] = args?.groups;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespaces"] = args?.namespaces;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["sources"] = args?.sources;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IngestionPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IngestionPolicy resources.
 */
export interface IngestionPolicyState {
    accounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the ingestion policy.
     */
    description?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the ingestion policy.
     */
    name?: pulumi.Input<string>;
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    scope?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.IngestionPolicyTag>[]>;
}

/**
 * The set of arguments for constructing a IngestionPolicy resource.
 */
export interface IngestionPolicyArgs {
    accounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the ingestion policy.
     */
    description: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the ingestion policy.
     */
    name?: pulumi.Input<string>;
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    scope: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.IngestionPolicyTag>[]>;
}
