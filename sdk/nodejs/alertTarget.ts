// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a wavefront Alert Target resource. This allows alert targets to created, updated, and deleted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const testTarget = new wavefront.AlertTarget("test_target", {
 *     name: "Terraform Test Target",
 *     description: "Test target",
 *     method: "WEBHOOK",
 *     recipient: "https://hooks.slack.com/services/test/me",
 *     contentType: "application/json",
 *     customHeaders: {
 *         Testing: "true",
 *     },
 *     template: "{}",
 *     triggers: [
 *         "ALERT_OPENED",
 *         "ALERT_RESOLVED",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Alert Targets can be imported using the `id`, e.g.:
 *
 * ```sh
 * $ pulumi import wavefront:index/alertTarget:AlertTarget alert_target abcdEFGhijKLMNO
 * ```
 */
export class AlertTarget extends pulumi.CustomResource {
    /**
     * Get an existing AlertTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertTargetState, opts?: pulumi.CustomResourceOptions): AlertTarget {
        return new AlertTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'wavefront:index/alertTarget:AlertTarget';

    /**
     * Returns true if the given object is an instance of AlertTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertTarget.__pulumiType;
    }

    /**
     * The value of the `Content-Type` header of the webhook.
     */
    declare public readonly contentType: pulumi.Output<string | undefined>;
    /**
     * A `string->string` map specifying the custom HTTP header key/value pairs that will be
     * sent in the requests with a method of `WEBHOOK`.
     */
    declare public readonly customHeaders: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Description describing this alert target.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The subject title of an email notification target.
     */
    declare public readonly emailSubject: pulumi.Output<string | undefined>;
    /**
     * Determine whether the email alert content is sent as HTML or text.
     */
    declare public readonly isHtmlContent: pulumi.Output<boolean | undefined>;
    /**
     * The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
     */
    declare public readonly method: pulumi.Output<string | undefined>;
    /**
     * The name of the alert target as it is displayed in Wavefront.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
     * routing key. `WEBHOOK`: URL endpoint.
     */
    declare public readonly recipient: pulumi.Output<string>;
    /**
     * List of routing targets that this alert target will notify. See Route
     */
    declare public readonly routes: pulumi.Output<outputs.AlertTargetRoute[] | undefined>;
    /**
     * The target ID prefixed with `target:` for interpolating into a Wavefront Alert.
     */
    declare public /*out*/ readonly targetId: pulumi.Output<string>;
    /**
     * A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
     */
    declare public readonly template: pulumi.Output<string>;
    /**
     * A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
     * `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
     */
    declare public readonly triggers: pulumi.Output<string[]>;

    /**
     * Create a AlertTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertTargetArgs | AlertTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertTargetState | undefined;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["customHeaders"] = state?.customHeaders;
            resourceInputs["description"] = state?.description;
            resourceInputs["emailSubject"] = state?.emailSubject;
            resourceInputs["isHtmlContent"] = state?.isHtmlContent;
            resourceInputs["method"] = state?.method;
            resourceInputs["name"] = state?.name;
            resourceInputs["recipient"] = state?.recipient;
            resourceInputs["routes"] = state?.routes;
            resourceInputs["targetId"] = state?.targetId;
            resourceInputs["template"] = state?.template;
            resourceInputs["triggers"] = state?.triggers;
        } else {
            const args = argsOrState as AlertTargetArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.recipient === undefined && !opts.urn) {
                throw new Error("Missing required property 'recipient'");
            }
            if (args?.template === undefined && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            if (args?.triggers === undefined && !opts.urn) {
                throw new Error("Missing required property 'triggers'");
            }
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["customHeaders"] = args?.customHeaders;
            resourceInputs["description"] = args?.description;
            resourceInputs["emailSubject"] = args?.emailSubject;
            resourceInputs["isHtmlContent"] = args?.isHtmlContent;
            resourceInputs["method"] = args?.method;
            resourceInputs["name"] = args?.name;
            resourceInputs["recipient"] = args?.recipient;
            resourceInputs["routes"] = args?.routes;
            resourceInputs["template"] = args?.template;
            resourceInputs["triggers"] = args?.triggers;
            resourceInputs["targetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertTarget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertTarget resources.
 */
export interface AlertTargetState {
    /**
     * The value of the `Content-Type` header of the webhook.
     */
    contentType?: pulumi.Input<string>;
    /**
     * A `string->string` map specifying the custom HTTP header key/value pairs that will be
     * sent in the requests with a method of `WEBHOOK`.
     */
    customHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description describing this alert target.
     */
    description?: pulumi.Input<string>;
    /**
     * The subject title of an email notification target.
     */
    emailSubject?: pulumi.Input<string>;
    /**
     * Determine whether the email alert content is sent as HTML or text.
     */
    isHtmlContent?: pulumi.Input<boolean>;
    /**
     * The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the alert target as it is displayed in Wavefront.
     */
    name?: pulumi.Input<string>;
    /**
     * The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
     * routing key. `WEBHOOK`: URL endpoint.
     */
    recipient?: pulumi.Input<string>;
    /**
     * List of routing targets that this alert target will notify. See Route
     */
    routes?: pulumi.Input<pulumi.Input<inputs.AlertTargetRoute>[]>;
    /**
     * The target ID prefixed with `target:` for interpolating into a Wavefront Alert.
     */
    targetId?: pulumi.Input<string>;
    /**
     * A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
     */
    template?: pulumi.Input<string>;
    /**
     * A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
     * `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
     */
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AlertTarget resource.
 */
export interface AlertTargetArgs {
    /**
     * The value of the `Content-Type` header of the webhook.
     */
    contentType?: pulumi.Input<string>;
    /**
     * A `string->string` map specifying the custom HTTP header key/value pairs that will be
     * sent in the requests with a method of `WEBHOOK`.
     */
    customHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description describing this alert target.
     */
    description: pulumi.Input<string>;
    /**
     * The subject title of an email notification target.
     */
    emailSubject?: pulumi.Input<string>;
    /**
     * Determine whether the email alert content is sent as HTML or text.
     */
    isHtmlContent?: pulumi.Input<boolean>;
    /**
     * The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the alert target as it is displayed in Wavefront.
     */
    name?: pulumi.Input<string>;
    /**
     * The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
     * routing key. `WEBHOOK`: URL endpoint.
     */
    recipient: pulumi.Input<string>;
    /**
     * List of routing targets that this alert target will notify. See Route
     */
    routes?: pulumi.Input<pulumi.Input<inputs.AlertTargetRoute>[]>;
    /**
     * A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
     */
    template: pulumi.Input<string>;
    /**
     * A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
     * `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
     */
    triggers: pulumi.Input<pulumi.Input<string>[]>;
}
