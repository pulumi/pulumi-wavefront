// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Wavefront Cloud Integration for CloudWatch. This allows CloudWatch cloud integrations to be created,
 * updated, and deleted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as wavefront from "@pulumi/wavefront";
 *
 * const extId = new wavefront.CloudIntegrationAwsExternalId("ext_id", {});
 * const cloudwatch = new wavefront.CloudIntegrationCloudWatch("cloudwatch", {
 *     name: "Test Integration",
 *     forceSave: true,
 *     roleArn: "arn:aws::1234567:role/example-arn",
 *     externalId: extId.id,
 * });
 * ```
 *
 * ## Import
 *
 * CloudWatch Cloud Integrations can be imported by using the `id`, e.g.:
 *
 * ```sh
 * $ pulumi import wavefront:index/cloudIntegrationCloudWatch:CloudIntegrationCloudWatch cloudwatch a411c16b-3cf7-4f03-bf11-8ca05aab898d
 * ```
 */
export class CloudIntegrationCloudWatch extends pulumi.CustomResource {
    /**
     * Get an existing CloudIntegrationCloudWatch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudIntegrationCloudWatchState, opts?: pulumi.CustomResourceOptions): CloudIntegrationCloudWatch {
        return new CloudIntegrationCloudWatch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'wavefront:index/cloudIntegrationCloudWatch:CloudIntegrationCloudWatch';

    /**
     * Returns true if the given object is an instance of CloudIntegrationCloudWatch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudIntegrationCloudWatch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudIntegrationCloudWatch.__pulumiType;
    }

    /**
     * A list of point tag key-values to add to every point ingested using this integration.
     */
    declare public readonly additionalTags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
     */
    declare public readonly externalId: pulumi.Output<string>;
    /**
     * Forces this resource to save, even if errors are present.
     */
    declare public readonly forceSave: pulumi.Output<boolean | undefined>;
    /**
     * A string->string map allow list of instance tag-value pairs (in AWS).
     * If the instance's AWS tags match this allow list, CloudWatch data about this instance is ingested.
     * Multiple entries are OR'ed.
     */
    declare public readonly instanceSelectionTags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A regular expression that a CloudWatch metric name must match (case-insensitively) in order to be ingested.
     */
    declare public readonly metricFilterRegex: pulumi.Output<string | undefined>;
    /**
     * The human-readable name of this integration.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A list of namespaces that limit what we query from CloudWatch.
     */
    declare public readonly namespaces: pulumi.Output<string[] | undefined>;
    /**
     * A regular expression that AWS tag key name must match (case-insensitively)
     * in order to be ingested.
     */
    declare public readonly pointTagFilterRegex: pulumi.Output<string | undefined>;
    /**
     * The external ID corresponding to the Role ARN.
     */
    declare public readonly roleArn: pulumi.Output<string>;
    /**
     * A value denoting which cloud service this service integrates with.
     */
    declare public readonly service: pulumi.Output<string>;
    /**
     * How often, in minutes, to refresh the service.
     */
    declare public readonly serviceRefreshRateInMinutes: pulumi.Output<number | undefined>;
    /**
     * A string->string map of allow list of volume tag-value pairs (in AWS).
     * If the volume's AWS tags match this allow list, CloudWatch data about this volume is ingested.
     * Multiple entries are OR'ed.
     */
    declare public readonly volumeSelectionTags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a CloudIntegrationCloudWatch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudIntegrationCloudWatchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudIntegrationCloudWatchArgs | CloudIntegrationCloudWatchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudIntegrationCloudWatchState | undefined;
            resourceInputs["additionalTags"] = state?.additionalTags;
            resourceInputs["externalId"] = state?.externalId;
            resourceInputs["forceSave"] = state?.forceSave;
            resourceInputs["instanceSelectionTags"] = state?.instanceSelectionTags;
            resourceInputs["metricFilterRegex"] = state?.metricFilterRegex;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespaces"] = state?.namespaces;
            resourceInputs["pointTagFilterRegex"] = state?.pointTagFilterRegex;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["service"] = state?.service;
            resourceInputs["serviceRefreshRateInMinutes"] = state?.serviceRefreshRateInMinutes;
            resourceInputs["volumeSelectionTags"] = state?.volumeSelectionTags;
        } else {
            const args = argsOrState as CloudIntegrationCloudWatchArgs | undefined;
            if (args?.externalId === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalId'");
            }
            if (args?.roleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["additionalTags"] = args?.additionalTags;
            resourceInputs["externalId"] = args?.externalId;
            resourceInputs["forceSave"] = args?.forceSave;
            resourceInputs["instanceSelectionTags"] = args?.instanceSelectionTags;
            resourceInputs["metricFilterRegex"] = args?.metricFilterRegex;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespaces"] = args?.namespaces;
            resourceInputs["pointTagFilterRegex"] = args?.pointTagFilterRegex;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["service"] = args?.service;
            resourceInputs["serviceRefreshRateInMinutes"] = args?.serviceRefreshRateInMinutes;
            resourceInputs["volumeSelectionTags"] = args?.volumeSelectionTags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudIntegrationCloudWatch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudIntegrationCloudWatch resources.
 */
export interface CloudIntegrationCloudWatchState {
    /**
     * A list of point tag key-values to add to every point ingested using this integration.
     */
    additionalTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
     */
    externalId?: pulumi.Input<string>;
    /**
     * Forces this resource to save, even if errors are present.
     */
    forceSave?: pulumi.Input<boolean>;
    /**
     * A string->string map allow list of instance tag-value pairs (in AWS).
     * If the instance's AWS tags match this allow list, CloudWatch data about this instance is ingested.
     * Multiple entries are OR'ed.
     */
    instanceSelectionTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A regular expression that a CloudWatch metric name must match (case-insensitively) in order to be ingested.
     */
    metricFilterRegex?: pulumi.Input<string>;
    /**
     * The human-readable name of this integration.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of namespaces that limit what we query from CloudWatch.
     */
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regular expression that AWS tag key name must match (case-insensitively)
     * in order to be ingested.
     */
    pointTagFilterRegex?: pulumi.Input<string>;
    /**
     * The external ID corresponding to the Role ARN.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * A value denoting which cloud service this service integrates with.
     */
    service?: pulumi.Input<string>;
    /**
     * How often, in minutes, to refresh the service.
     */
    serviceRefreshRateInMinutes?: pulumi.Input<number>;
    /**
     * A string->string map of allow list of volume tag-value pairs (in AWS).
     * If the volume's AWS tags match this allow list, CloudWatch data about this volume is ingested.
     * Multiple entries are OR'ed.
     */
    volumeSelectionTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a CloudIntegrationCloudWatch resource.
 */
export interface CloudIntegrationCloudWatchArgs {
    /**
     * A list of point tag key-values to add to every point ingested using this integration.
     */
    additionalTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
     */
    externalId: pulumi.Input<string>;
    /**
     * Forces this resource to save, even if errors are present.
     */
    forceSave?: pulumi.Input<boolean>;
    /**
     * A string->string map allow list of instance tag-value pairs (in AWS).
     * If the instance's AWS tags match this allow list, CloudWatch data about this instance is ingested.
     * Multiple entries are OR'ed.
     */
    instanceSelectionTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A regular expression that a CloudWatch metric name must match (case-insensitively) in order to be ingested.
     */
    metricFilterRegex?: pulumi.Input<string>;
    /**
     * The human-readable name of this integration.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of namespaces that limit what we query from CloudWatch.
     */
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regular expression that AWS tag key name must match (case-insensitively)
     * in order to be ingested.
     */
    pointTagFilterRegex?: pulumi.Input<string>;
    /**
     * The external ID corresponding to the Role ARN.
     */
    roleArn: pulumi.Input<string>;
    /**
     * A value denoting which cloud service this service integrates with.
     */
    service?: pulumi.Input<string>;
    /**
     * How often, in minutes, to refresh the service.
     */
    serviceRefreshRateInMinutes?: pulumi.Input<number>;
    /**
     * A string->string map of allow list of volume tag-value pairs (in AWS).
     * If the volume's AWS tags match this allow list, CloudWatch data about this volume is ingested.
     * Multiple entries are OR'ed.
     */
    volumeSelectionTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
