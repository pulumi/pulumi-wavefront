// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertArgs, AlertState } from "./alert";
export type Alert = import("./alert").Alert;
export const Alert: typeof import("./alert").Alert = null as any;
utilities.lazyLoad(exports, ["Alert"], () => require("./alert"));

export { AlertTargetArgs, AlertTargetState } from "./alertTarget";
export type AlertTarget = import("./alertTarget").AlertTarget;
export const AlertTarget: typeof import("./alertTarget").AlertTarget = null as any;
utilities.lazyLoad(exports, ["AlertTarget"], () => require("./alertTarget"));

export { CloudIntegrationAppDynamicsArgs, CloudIntegrationAppDynamicsState } from "./cloudIntegrationAppDynamics";
export type CloudIntegrationAppDynamics = import("./cloudIntegrationAppDynamics").CloudIntegrationAppDynamics;
export const CloudIntegrationAppDynamics: typeof import("./cloudIntegrationAppDynamics").CloudIntegrationAppDynamics = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationAppDynamics"], () => require("./cloudIntegrationAppDynamics"));

export { CloudIntegrationAwsExternalIdArgs, CloudIntegrationAwsExternalIdState } from "./cloudIntegrationAwsExternalId";
export type CloudIntegrationAwsExternalId = import("./cloudIntegrationAwsExternalId").CloudIntegrationAwsExternalId;
export const CloudIntegrationAwsExternalId: typeof import("./cloudIntegrationAwsExternalId").CloudIntegrationAwsExternalId = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationAwsExternalId"], () => require("./cloudIntegrationAwsExternalId"));

export { CloudIntegrationAzureArgs, CloudIntegrationAzureState } from "./cloudIntegrationAzure";
export type CloudIntegrationAzure = import("./cloudIntegrationAzure").CloudIntegrationAzure;
export const CloudIntegrationAzure: typeof import("./cloudIntegrationAzure").CloudIntegrationAzure = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationAzure"], () => require("./cloudIntegrationAzure"));

export { CloudIntegrationAzureActivityLogArgs, CloudIntegrationAzureActivityLogState } from "./cloudIntegrationAzureActivityLog";
export type CloudIntegrationAzureActivityLog = import("./cloudIntegrationAzureActivityLog").CloudIntegrationAzureActivityLog;
export const CloudIntegrationAzureActivityLog: typeof import("./cloudIntegrationAzureActivityLog").CloudIntegrationAzureActivityLog = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationAzureActivityLog"], () => require("./cloudIntegrationAzureActivityLog"));

export { CloudIntegrationCloudTrailArgs, CloudIntegrationCloudTrailState } from "./cloudIntegrationCloudTrail";
export type CloudIntegrationCloudTrail = import("./cloudIntegrationCloudTrail").CloudIntegrationCloudTrail;
export const CloudIntegrationCloudTrail: typeof import("./cloudIntegrationCloudTrail").CloudIntegrationCloudTrail = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationCloudTrail"], () => require("./cloudIntegrationCloudTrail"));

export { CloudIntegrationCloudWatchArgs, CloudIntegrationCloudWatchState } from "./cloudIntegrationCloudWatch";
export type CloudIntegrationCloudWatch = import("./cloudIntegrationCloudWatch").CloudIntegrationCloudWatch;
export const CloudIntegrationCloudWatch: typeof import("./cloudIntegrationCloudWatch").CloudIntegrationCloudWatch = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationCloudWatch"], () => require("./cloudIntegrationCloudWatch"));

export { CloudIntegrationEc2Args, CloudIntegrationEc2State } from "./cloudIntegrationEc2";
export type CloudIntegrationEc2 = import("./cloudIntegrationEc2").CloudIntegrationEc2;
export const CloudIntegrationEc2: typeof import("./cloudIntegrationEc2").CloudIntegrationEc2 = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationEc2"], () => require("./cloudIntegrationEc2"));

export { CloudIntegrationGcpArgs, CloudIntegrationGcpState } from "./cloudIntegrationGcp";
export type CloudIntegrationGcp = import("./cloudIntegrationGcp").CloudIntegrationGcp;
export const CloudIntegrationGcp: typeof import("./cloudIntegrationGcp").CloudIntegrationGcp = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationGcp"], () => require("./cloudIntegrationGcp"));

export { CloudIntegrationGcpBillingArgs, CloudIntegrationGcpBillingState } from "./cloudIntegrationGcpBilling";
export type CloudIntegrationGcpBilling = import("./cloudIntegrationGcpBilling").CloudIntegrationGcpBilling;
export const CloudIntegrationGcpBilling: typeof import("./cloudIntegrationGcpBilling").CloudIntegrationGcpBilling = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationGcpBilling"], () => require("./cloudIntegrationGcpBilling"));

export { CloudIntegrationNewRelicArgs, CloudIntegrationNewRelicState } from "./cloudIntegrationNewRelic";
export type CloudIntegrationNewRelic = import("./cloudIntegrationNewRelic").CloudIntegrationNewRelic;
export const CloudIntegrationNewRelic: typeof import("./cloudIntegrationNewRelic").CloudIntegrationNewRelic = null as any;
utilities.lazyLoad(exports, ["CloudIntegrationNewRelic"], () => require("./cloudIntegrationNewRelic"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardJsonArgs, DashboardJsonState } from "./dashboardJson";
export type DashboardJson = import("./dashboardJson").DashboardJson;
export const DashboardJson: typeof import("./dashboardJson").DashboardJson = null as any;
utilities.lazyLoad(exports, ["DashboardJson"], () => require("./dashboardJson"));

export { DerivedMetricArgs, DerivedMetricState } from "./derivedMetric";
export type DerivedMetric = import("./derivedMetric").DerivedMetric;
export const DerivedMetric: typeof import("./derivedMetric").DerivedMetric = null as any;
utilities.lazyLoad(exports, ["DerivedMetric"], () => require("./derivedMetric"));

export { EventArgs, EventState } from "./event";
export type Event = import("./event").Event;
export const Event: typeof import("./event").Event = null as any;
utilities.lazyLoad(exports, ["Event"], () => require("./event"));

export { ExternalLinkArgs, ExternalLinkState } from "./externalLink";
export type ExternalLink = import("./externalLink").ExternalLink;
export const ExternalLink: typeof import("./externalLink").ExternalLink = null as any;
utilities.lazyLoad(exports, ["ExternalLink"], () => require("./externalLink"));

export { GetAlertArgs, GetAlertResult, GetAlertOutputArgs } from "./getAlert";
export const getAlert: typeof import("./getAlert").getAlert = null as any;
export const getAlertOutput: typeof import("./getAlert").getAlertOutput = null as any;
utilities.lazyLoad(exports, ["getAlert","getAlertOutput"], () => require("./getAlert"));

export { GetAlertsArgs, GetAlertsResult, GetAlertsOutputArgs } from "./getAlerts";
export const getAlerts: typeof import("./getAlerts").getAlerts = null as any;
export const getAlertsOutput: typeof import("./getAlerts").getAlertsOutput = null as any;
utilities.lazyLoad(exports, ["getAlerts","getAlertsOutput"], () => require("./getAlerts"));

export { GetDashboardArgs, GetDashboardResult, GetDashboardOutputArgs } from "./getDashboard";
export const getDashboard: typeof import("./getDashboard").getDashboard = null as any;
export const getDashboardOutput: typeof import("./getDashboard").getDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getDashboard","getDashboardOutput"], () => require("./getDashboard"));

export { GetDashboardsArgs, GetDashboardsResult, GetDashboardsOutputArgs } from "./getDashboards";
export const getDashboards: typeof import("./getDashboards").getDashboards = null as any;
export const getDashboardsOutput: typeof import("./getDashboards").getDashboardsOutput = null as any;
utilities.lazyLoad(exports, ["getDashboards","getDashboardsOutput"], () => require("./getDashboards"));

export { GetDefaultUserGroupResult } from "./getDefaultUserGroup";
export const getDefaultUserGroup: typeof import("./getDefaultUserGroup").getDefaultUserGroup = null as any;
export const getDefaultUserGroupOutput: typeof import("./getDefaultUserGroup").getDefaultUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultUserGroup","getDefaultUserGroupOutput"], () => require("./getDefaultUserGroup"));

export { GetDerivedMetricArgs, GetDerivedMetricResult, GetDerivedMetricOutputArgs } from "./getDerivedMetric";
export const getDerivedMetric: typeof import("./getDerivedMetric").getDerivedMetric = null as any;
export const getDerivedMetricOutput: typeof import("./getDerivedMetric").getDerivedMetricOutput = null as any;
utilities.lazyLoad(exports, ["getDerivedMetric","getDerivedMetricOutput"], () => require("./getDerivedMetric"));

export { GetDerivedMetricsArgs, GetDerivedMetricsResult, GetDerivedMetricsOutputArgs } from "./getDerivedMetrics";
export const getDerivedMetrics: typeof import("./getDerivedMetrics").getDerivedMetrics = null as any;
export const getDerivedMetricsOutput: typeof import("./getDerivedMetrics").getDerivedMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getDerivedMetrics","getDerivedMetricsOutput"], () => require("./getDerivedMetrics"));

export { GetEventArgs, GetEventResult, GetEventOutputArgs } from "./getEvent";
export const getEvent: typeof import("./getEvent").getEvent = null as any;
export const getEventOutput: typeof import("./getEvent").getEventOutput = null as any;
utilities.lazyLoad(exports, ["getEvent","getEventOutput"], () => require("./getEvent"));

export { GetEventsArgs, GetEventsResult, GetEventsOutputArgs } from "./getEvents";
export const getEvents: typeof import("./getEvents").getEvents = null as any;
export const getEventsOutput: typeof import("./getEvents").getEventsOutput = null as any;
utilities.lazyLoad(exports, ["getEvents","getEventsOutput"], () => require("./getEvents"));

export { GetExternalLinkArgs, GetExternalLinkResult, GetExternalLinkOutputArgs } from "./getExternalLink";
export const getExternalLink: typeof import("./getExternalLink").getExternalLink = null as any;
export const getExternalLinkOutput: typeof import("./getExternalLink").getExternalLinkOutput = null as any;
utilities.lazyLoad(exports, ["getExternalLink","getExternalLinkOutput"], () => require("./getExternalLink"));

export { GetExternalLinksArgs, GetExternalLinksResult, GetExternalLinksOutputArgs } from "./getExternalLinks";
export const getExternalLinks: typeof import("./getExternalLinks").getExternalLinks = null as any;
export const getExternalLinksOutput: typeof import("./getExternalLinks").getExternalLinksOutput = null as any;
utilities.lazyLoad(exports, ["getExternalLinks","getExternalLinksOutput"], () => require("./getExternalLinks"));

export { GetMaintenanceWindowArgs, GetMaintenanceWindowResult, GetMaintenanceWindowOutputArgs } from "./getMaintenanceWindow";
export const getMaintenanceWindow: typeof import("./getMaintenanceWindow").getMaintenanceWindow = null as any;
export const getMaintenanceWindowOutput: typeof import("./getMaintenanceWindow").getMaintenanceWindowOutput = null as any;
utilities.lazyLoad(exports, ["getMaintenanceWindow","getMaintenanceWindowOutput"], () => require("./getMaintenanceWindow"));

export { GetMaintenanceWindowAllArgs, GetMaintenanceWindowAllResult, GetMaintenanceWindowAllOutputArgs } from "./getMaintenanceWindowAll";
export const getMaintenanceWindowAll: typeof import("./getMaintenanceWindowAll").getMaintenanceWindowAll = null as any;
export const getMaintenanceWindowAllOutput: typeof import("./getMaintenanceWindowAll").getMaintenanceWindowAllOutput = null as any;
utilities.lazyLoad(exports, ["getMaintenanceWindowAll","getMaintenanceWindowAllOutput"], () => require("./getMaintenanceWindowAll"));

export { GetMetricsPolicyResult } from "./getMetricsPolicy";
export const getMetricsPolicy: typeof import("./getMetricsPolicy").getMetricsPolicy = null as any;
export const getMetricsPolicyOutput: typeof import("./getMetricsPolicy").getMetricsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMetricsPolicy","getMetricsPolicyOutput"], () => require("./getMetricsPolicy"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetRolesArgs, GetRolesResult, GetRolesOutputArgs } from "./getRoles";
export const getRoles: typeof import("./getRoles").getRoles = null as any;
export const getRolesOutput: typeof import("./getRoles").getRolesOutput = null as any;
utilities.lazyLoad(exports, ["getRoles","getRolesOutput"], () => require("./getRoles"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { GetUserGroupsArgs, GetUserGroupsResult, GetUserGroupsOutputArgs } from "./getUserGroups";
export const getUserGroups: typeof import("./getUserGroups").getUserGroups = null as any;
export const getUserGroupsOutput: typeof import("./getUserGroups").getUserGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroups","getUserGroupsOutput"], () => require("./getUserGroups"));

export { GetUsersResult } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { IngestionPolicyArgs, IngestionPolicyState } from "./ingestionPolicy";
export type IngestionPolicy = import("./ingestionPolicy").IngestionPolicy;
export const IngestionPolicy: typeof import("./ingestionPolicy").IngestionPolicy = null as any;
utilities.lazyLoad(exports, ["IngestionPolicy"], () => require("./ingestionPolicy"));

export { MaintenanceWindowArgs, MaintenanceWindowState } from "./maintenanceWindow";
export type MaintenanceWindow = import("./maintenanceWindow").MaintenanceWindow;
export const MaintenanceWindow: typeof import("./maintenanceWindow").MaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindow"], () => require("./maintenanceWindow"));

export { MetricsPolicyArgs, MetricsPolicyState } from "./metricsPolicy";
export type MetricsPolicy = import("./metricsPolicy").MetricsPolicy;
export const MetricsPolicy: typeof import("./metricsPolicy").MetricsPolicy = null as any;
utilities.lazyLoad(exports, ["MetricsPolicy"], () => require("./metricsPolicy"));

export * from "./provider";
import { Provider } from "./provider";

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "wavefront:index/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "wavefront:index/alertTarget:AlertTarget":
                return new AlertTarget(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationAppDynamics:CloudIntegrationAppDynamics":
                return new CloudIntegrationAppDynamics(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationAwsExternalId:CloudIntegrationAwsExternalId":
                return new CloudIntegrationAwsExternalId(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationAzure:CloudIntegrationAzure":
                return new CloudIntegrationAzure(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationAzureActivityLog:CloudIntegrationAzureActivityLog":
                return new CloudIntegrationAzureActivityLog(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail":
                return new CloudIntegrationCloudTrail(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationCloudWatch:CloudIntegrationCloudWatch":
                return new CloudIntegrationCloudWatch(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationEc2:CloudIntegrationEc2":
                return new CloudIntegrationEc2(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp":
                return new CloudIntegrationGcp(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationGcpBilling:CloudIntegrationGcpBilling":
                return new CloudIntegrationGcpBilling(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic":
                return new CloudIntegrationNewRelic(name, <any>undefined, { urn })
            case "wavefront:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "wavefront:index/dashboardJson:DashboardJson":
                return new DashboardJson(name, <any>undefined, { urn })
            case "wavefront:index/derivedMetric:DerivedMetric":
                return new DerivedMetric(name, <any>undefined, { urn })
            case "wavefront:index/event:Event":
                return new Event(name, <any>undefined, { urn })
            case "wavefront:index/externalLink:ExternalLink":
                return new ExternalLink(name, <any>undefined, { urn })
            case "wavefront:index/ingestionPolicy:IngestionPolicy":
                return new IngestionPolicy(name, <any>undefined, { urn })
            case "wavefront:index/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "wavefront:index/metricsPolicy:MetricsPolicy":
                return new MetricsPolicy(name, <any>undefined, { urn })
            case "wavefront:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "wavefront:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "wavefront:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "wavefront:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("wavefront", "index/alert", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/alertTarget", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationAppDynamics", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationAwsExternalId", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationAzure", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationAzureActivityLog", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationCloudTrail", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationCloudWatch", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationEc2", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationGcp", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationGcpBilling", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationNewRelic", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/dashboardJson", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/derivedMetric", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/event", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/externalLink", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/ingestionPolicy", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/metricsPolicy", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/role", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/user", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/userGroup", _module)
pulumi.runtime.registerResourcePackage("wavefront", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:wavefront") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
