// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./alert";
export * from "./alertTarget";
export * from "./cloudIntegrationAppDynamics";
export * from "./cloudIntegrationAwsExternalId";
export * from "./cloudIntegrationAzure";
export * from "./cloudIntegrationAzureActivityLog";
export * from "./cloudIntegrationCloudTrail";
export * from "./cloudIntegrationCloudWatch";
export * from "./cloudIntegrationEc2";
export * from "./cloudIntegrationGcp";
export * from "./cloudIntegrationGcpBilling";
export * from "./cloudIntegrationNewRelic";
export * from "./cloudIntegrationTesla";
export * from "./dashboard";
export * from "./dashboardJson";
export * from "./derivedMetric";
export * from "./externalLink";
export * from "./getDefaultUserGroup";
export * from "./getMetricsPolicy";
export * from "./getRoles";
export * from "./getUser";
export * from "./getUserGroups";
export * from "./getUsers";
export * from "./ingestionPolicy";
export * from "./maintenanceWindow";
export * from "./provider";
export * from "./role";
export * from "./serviceAccount";
export * from "./user";
export * from "./userGroup";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Alert } from "./alert";
import { AlertTarget } from "./alertTarget";
import { CloudIntegrationAppDynamics } from "./cloudIntegrationAppDynamics";
import { CloudIntegrationAwsExternalId } from "./cloudIntegrationAwsExternalId";
import { CloudIntegrationAzure } from "./cloudIntegrationAzure";
import { CloudIntegrationAzureActivityLog } from "./cloudIntegrationAzureActivityLog";
import { CloudIntegrationCloudTrail } from "./cloudIntegrationCloudTrail";
import { CloudIntegrationCloudWatch } from "./cloudIntegrationCloudWatch";
import { CloudIntegrationEc2 } from "./cloudIntegrationEc2";
import { CloudIntegrationGcp } from "./cloudIntegrationGcp";
import { CloudIntegrationGcpBilling } from "./cloudIntegrationGcpBilling";
import { CloudIntegrationNewRelic } from "./cloudIntegrationNewRelic";
import { CloudIntegrationTesla } from "./cloudIntegrationTesla";
import { Dashboard } from "./dashboard";
import { DashboardJson } from "./dashboardJson";
import { DerivedMetric } from "./derivedMetric";
import { ExternalLink } from "./externalLink";
import { IngestionPolicy } from "./ingestionPolicy";
import { MaintenanceWindow } from "./maintenanceWindow";
import { Role } from "./role";
import { ServiceAccount } from "./serviceAccount";
import { User } from "./user";
import { UserGroup } from "./userGroup";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "wavefront:index/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "wavefront:index/alertTarget:AlertTarget":
                return new AlertTarget(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationAppDynamics:CloudIntegrationAppDynamics":
                return new CloudIntegrationAppDynamics(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationAwsExternalId:CloudIntegrationAwsExternalId":
                return new CloudIntegrationAwsExternalId(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationAzure:CloudIntegrationAzure":
                return new CloudIntegrationAzure(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationAzureActivityLog:CloudIntegrationAzureActivityLog":
                return new CloudIntegrationAzureActivityLog(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail":
                return new CloudIntegrationCloudTrail(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationCloudWatch:CloudIntegrationCloudWatch":
                return new CloudIntegrationCloudWatch(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationEc2:CloudIntegrationEc2":
                return new CloudIntegrationEc2(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp":
                return new CloudIntegrationGcp(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationGcpBilling:CloudIntegrationGcpBilling":
                return new CloudIntegrationGcpBilling(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic":
                return new CloudIntegrationNewRelic(name, <any>undefined, { urn })
            case "wavefront:index/cloudIntegrationTesla:CloudIntegrationTesla":
                return new CloudIntegrationTesla(name, <any>undefined, { urn })
            case "wavefront:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "wavefront:index/dashboardJson:DashboardJson":
                return new DashboardJson(name, <any>undefined, { urn })
            case "wavefront:index/derivedMetric:DerivedMetric":
                return new DerivedMetric(name, <any>undefined, { urn })
            case "wavefront:index/externalLink:ExternalLink":
                return new ExternalLink(name, <any>undefined, { urn })
            case "wavefront:index/ingestionPolicy:IngestionPolicy":
                return new IngestionPolicy(name, <any>undefined, { urn })
            case "wavefront:index/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "wavefront:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "wavefront:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "wavefront:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "wavefront:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("wavefront", "index/alert", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/alertTarget", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationAppDynamics", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationAwsExternalId", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationAzure", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationAzureActivityLog", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationCloudTrail", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationCloudWatch", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationEc2", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationGcp", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationGcpBilling", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationNewRelic", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/cloudIntegrationTesla", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/dashboardJson", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/derivedMetric", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/externalLink", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/ingestionPolicy", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/role", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/user", _module)
pulumi.runtime.registerResourceModule("wavefront", "index/userGroup", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("wavefront", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:wavefront") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
