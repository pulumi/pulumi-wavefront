// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Wavefront Alert resource.  This allows alerts to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wavefront.NewAlert(ctx, "foobar", &wavefront.AlertArgs{
//				Condition:           pulumi.String("100-ts(\"cpu.usage_idle\", environment=preprod and cpu=cpu-total ) > 80"),
//				DisplayExpression:   pulumi.String("100-ts(\"cpu.usage_idle\", environment=preprod and cpu=cpu-total )"),
//				Minutes:             pulumi.Int(5),
//				ResolveAfterMinutes: pulumi.Int(5),
//				Severity:            pulumi.String("WARN"),
//				Tags: pulumi.StringArray{
//					pulumi.String("terraform"),
//					pulumi.String("test"),
//				},
//				Target: pulumi.String("test@example.com,target:alert-target-id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Alerts can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import wavefront:index/alert:Alert alert_target 1479868728473
//
// ```
type Alert struct {
	pulumi.CustomResourceState

	// User-supplied additional explanatory information for this alert.
	// Useful for linking runbooks, migrations, etc.
	AdditionalInformation pulumi.StringPtrOutput `pulumi:"additionalInformation"`
	// The type of alert in Wavefront.  Either `CLASSIC` (default)
	// or `THRESHOLD`.
	AlertType pulumi.StringPtrOutput `pulumi:"alertType"`
	// A list of users or groups that can modify this resource.
	CanModifies pulumi.StringArrayOutput `pulumi:"canModifies"`
	// A list of users or groups that can view this resource.
	CanViews pulumi.StringArrayOutput `pulumi:"canViews"`
	// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
	// The alert fires and notifications are triggered when a data series matching this query evaluates
	// to a non-zero value for a set number of consecutive minutes.
	Condition pulumi.StringPtrOutput `pulumi:"condition"`
	// a string->string map of `severity` to `condition`
	// for which this alert will trigger.
	Conditions pulumi.StringMapOutput `pulumi:"conditions"`
	// A second query whose results are displayed in the alert user
	// interface instead of the condition query.  This field is often used to display a version
	// of the condition query with Boolean operators removed so that numerical values are plotted.
	DisplayExpression pulumi.StringPtrOutput `pulumi:"displayExpression"`
	// The number of consecutive minutes that a series matching the condition query must
	// evaluate to "true" (non-zero value) before the alert fires.
	Minutes pulumi.IntOutput `pulumi:"minutes"`
	// The name of the alert as it is displayed in Wavefront.
	Name pulumi.StringOutput `pulumi:"name"`
	// How often to re-trigger a continually failing alert.
	// If absent or <= 0, no re-triggering occurs.
	NotificationResendFrequencyMinutes pulumi.IntPtrOutput `pulumi:"notificationResendFrequencyMinutes"`
	// The number of consecutive minutes that a firing series matching the condition
	// query must evaluate to "false" (zero value) before the alert resolves.  When unset, this defaults to
	// the same value as `minutes`.
	ResolveAfterMinutes pulumi.IntPtrOutput `pulumi:"resolveAfterMinutes"`
	// - Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// A comma-separated list of the email address or integration endpoint
	// (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
	// Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
	Target pulumi.StringPtrOutput `pulumi:"target"`
	// Targets for severity
	ThresholdTargets pulumi.StringMapOutput `pulumi:"thresholdTargets"`
}

// NewAlert registers a new resource with the given unique name, arguments, and options.
func NewAlert(ctx *pulumi.Context,
	name string, args *AlertArgs, opts ...pulumi.ResourceOption) (*Alert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Minutes == nil {
		return nil, errors.New("invalid value for required argument 'Minutes'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	var resource Alert
	err := ctx.RegisterResource("wavefront:index/alert:Alert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlert gets an existing Alert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertState, opts ...pulumi.ResourceOption) (*Alert, error) {
	var resource Alert
	err := ctx.ReadResource("wavefront:index/alert:Alert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alert resources.
type alertState struct {
	// User-supplied additional explanatory information for this alert.
	// Useful for linking runbooks, migrations, etc.
	AdditionalInformation *string `pulumi:"additionalInformation"`
	// The type of alert in Wavefront.  Either `CLASSIC` (default)
	// or `THRESHOLD`.
	AlertType *string `pulumi:"alertType"`
	// A list of users or groups that can modify this resource.
	CanModifies []string `pulumi:"canModifies"`
	// A list of users or groups that can view this resource.
	CanViews []string `pulumi:"canViews"`
	// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
	// The alert fires and notifications are triggered when a data series matching this query evaluates
	// to a non-zero value for a set number of consecutive minutes.
	Condition *string `pulumi:"condition"`
	// a string->string map of `severity` to `condition`
	// for which this alert will trigger.
	Conditions map[string]string `pulumi:"conditions"`
	// A second query whose results are displayed in the alert user
	// interface instead of the condition query.  This field is often used to display a version
	// of the condition query with Boolean operators removed so that numerical values are plotted.
	DisplayExpression *string `pulumi:"displayExpression"`
	// The number of consecutive minutes that a series matching the condition query must
	// evaluate to "true" (non-zero value) before the alert fires.
	Minutes *int `pulumi:"minutes"`
	// The name of the alert as it is displayed in Wavefront.
	Name *string `pulumi:"name"`
	// How often to re-trigger a continually failing alert.
	// If absent or <= 0, no re-triggering occurs.
	NotificationResendFrequencyMinutes *int `pulumi:"notificationResendFrequencyMinutes"`
	// The number of consecutive minutes that a firing series matching the condition
	// query must evaluate to "false" (zero value) before the alert resolves.  When unset, this defaults to
	// the same value as `minutes`.
	ResolveAfterMinutes *int `pulumi:"resolveAfterMinutes"`
	// - Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
	Severity *string `pulumi:"severity"`
	// A set of tags to assign to this resource.
	Tags []string `pulumi:"tags"`
	// A comma-separated list of the email address or integration endpoint
	// (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
	// Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
	Target *string `pulumi:"target"`
	// Targets for severity
	ThresholdTargets map[string]string `pulumi:"thresholdTargets"`
}

type AlertState struct {
	// User-supplied additional explanatory information for this alert.
	// Useful for linking runbooks, migrations, etc.
	AdditionalInformation pulumi.StringPtrInput
	// The type of alert in Wavefront.  Either `CLASSIC` (default)
	// or `THRESHOLD`.
	AlertType pulumi.StringPtrInput
	// A list of users or groups that can modify this resource.
	CanModifies pulumi.StringArrayInput
	// A list of users or groups that can view this resource.
	CanViews pulumi.StringArrayInput
	// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
	// The alert fires and notifications are triggered when a data series matching this query evaluates
	// to a non-zero value for a set number of consecutive minutes.
	Condition pulumi.StringPtrInput
	// a string->string map of `severity` to `condition`
	// for which this alert will trigger.
	Conditions pulumi.StringMapInput
	// A second query whose results are displayed in the alert user
	// interface instead of the condition query.  This field is often used to display a version
	// of the condition query with Boolean operators removed so that numerical values are plotted.
	DisplayExpression pulumi.StringPtrInput
	// The number of consecutive minutes that a series matching the condition query must
	// evaluate to "true" (non-zero value) before the alert fires.
	Minutes pulumi.IntPtrInput
	// The name of the alert as it is displayed in Wavefront.
	Name pulumi.StringPtrInput
	// How often to re-trigger a continually failing alert.
	// If absent or <= 0, no re-triggering occurs.
	NotificationResendFrequencyMinutes pulumi.IntPtrInput
	// The number of consecutive minutes that a firing series matching the condition
	// query must evaluate to "false" (zero value) before the alert resolves.  When unset, this defaults to
	// the same value as `minutes`.
	ResolveAfterMinutes pulumi.IntPtrInput
	// - Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
	Severity pulumi.StringPtrInput
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayInput
	// A comma-separated list of the email address or integration endpoint
	// (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
	// Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
	Target pulumi.StringPtrInput
	// Targets for severity
	ThresholdTargets pulumi.StringMapInput
}

func (AlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertState)(nil)).Elem()
}

type alertArgs struct {
	// User-supplied additional explanatory information for this alert.
	// Useful for linking runbooks, migrations, etc.
	AdditionalInformation *string `pulumi:"additionalInformation"`
	// The type of alert in Wavefront.  Either `CLASSIC` (default)
	// or `THRESHOLD`.
	AlertType *string `pulumi:"alertType"`
	// A list of users or groups that can modify this resource.
	CanModifies []string `pulumi:"canModifies"`
	// A list of users or groups that can view this resource.
	CanViews []string `pulumi:"canViews"`
	// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
	// The alert fires and notifications are triggered when a data series matching this query evaluates
	// to a non-zero value for a set number of consecutive minutes.
	Condition *string `pulumi:"condition"`
	// a string->string map of `severity` to `condition`
	// for which this alert will trigger.
	Conditions map[string]string `pulumi:"conditions"`
	// A second query whose results are displayed in the alert user
	// interface instead of the condition query.  This field is often used to display a version
	// of the condition query with Boolean operators removed so that numerical values are plotted.
	DisplayExpression *string `pulumi:"displayExpression"`
	// The number of consecutive minutes that a series matching the condition query must
	// evaluate to "true" (non-zero value) before the alert fires.
	Minutes int `pulumi:"minutes"`
	// The name of the alert as it is displayed in Wavefront.
	Name *string `pulumi:"name"`
	// How often to re-trigger a continually failing alert.
	// If absent or <= 0, no re-triggering occurs.
	NotificationResendFrequencyMinutes *int `pulumi:"notificationResendFrequencyMinutes"`
	// The number of consecutive minutes that a firing series matching the condition
	// query must evaluate to "false" (zero value) before the alert resolves.  When unset, this defaults to
	// the same value as `minutes`.
	ResolveAfterMinutes *int `pulumi:"resolveAfterMinutes"`
	// - Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
	Severity *string `pulumi:"severity"`
	// A set of tags to assign to this resource.
	Tags []string `pulumi:"tags"`
	// A comma-separated list of the email address or integration endpoint
	// (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
	// Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
	Target *string `pulumi:"target"`
	// Targets for severity
	ThresholdTargets map[string]string `pulumi:"thresholdTargets"`
}

// The set of arguments for constructing a Alert resource.
type AlertArgs struct {
	// User-supplied additional explanatory information for this alert.
	// Useful for linking runbooks, migrations, etc.
	AdditionalInformation pulumi.StringPtrInput
	// The type of alert in Wavefront.  Either `CLASSIC` (default)
	// or `THRESHOLD`.
	AlertType pulumi.StringPtrInput
	// A list of users or groups that can modify this resource.
	CanModifies pulumi.StringArrayInput
	// A list of users or groups that can view this resource.
	CanViews pulumi.StringArrayInput
	// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
	// The alert fires and notifications are triggered when a data series matching this query evaluates
	// to a non-zero value for a set number of consecutive minutes.
	Condition pulumi.StringPtrInput
	// a string->string map of `severity` to `condition`
	// for which this alert will trigger.
	Conditions pulumi.StringMapInput
	// A second query whose results are displayed in the alert user
	// interface instead of the condition query.  This field is often used to display a version
	// of the condition query with Boolean operators removed so that numerical values are plotted.
	DisplayExpression pulumi.StringPtrInput
	// The number of consecutive minutes that a series matching the condition query must
	// evaluate to "true" (non-zero value) before the alert fires.
	Minutes pulumi.IntInput
	// The name of the alert as it is displayed in Wavefront.
	Name pulumi.StringPtrInput
	// How often to re-trigger a continually failing alert.
	// If absent or <= 0, no re-triggering occurs.
	NotificationResendFrequencyMinutes pulumi.IntPtrInput
	// The number of consecutive minutes that a firing series matching the condition
	// query must evaluate to "false" (zero value) before the alert resolves.  When unset, this defaults to
	// the same value as `minutes`.
	ResolveAfterMinutes pulumi.IntPtrInput
	// - Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
	Severity pulumi.StringPtrInput
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayInput
	// A comma-separated list of the email address or integration endpoint
	// (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
	// Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
	Target pulumi.StringPtrInput
	// Targets for severity
	ThresholdTargets pulumi.StringMapInput
}

func (AlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertArgs)(nil)).Elem()
}

type AlertInput interface {
	pulumi.Input

	ToAlertOutput() AlertOutput
	ToAlertOutputWithContext(ctx context.Context) AlertOutput
}

func (*Alert) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (i *Alert) ToAlertOutput() AlertOutput {
	return i.ToAlertOutputWithContext(context.Background())
}

func (i *Alert) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertOutput)
}

// AlertArrayInput is an input type that accepts AlertArray and AlertArrayOutput values.
// You can construct a concrete instance of `AlertArrayInput` via:
//
//	AlertArray{ AlertArgs{...} }
type AlertArrayInput interface {
	pulumi.Input

	ToAlertArrayOutput() AlertArrayOutput
	ToAlertArrayOutputWithContext(context.Context) AlertArrayOutput
}

type AlertArray []AlertInput

func (AlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (i AlertArray) ToAlertArrayOutput() AlertArrayOutput {
	return i.ToAlertArrayOutputWithContext(context.Background())
}

func (i AlertArray) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertArrayOutput)
}

// AlertMapInput is an input type that accepts AlertMap and AlertMapOutput values.
// You can construct a concrete instance of `AlertMapInput` via:
//
//	AlertMap{ "key": AlertArgs{...} }
type AlertMapInput interface {
	pulumi.Input

	ToAlertMapOutput() AlertMapOutput
	ToAlertMapOutputWithContext(context.Context) AlertMapOutput
}

type AlertMap map[string]AlertInput

func (AlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (i AlertMap) ToAlertMapOutput() AlertMapOutput {
	return i.ToAlertMapOutputWithContext(context.Background())
}

func (i AlertMap) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMapOutput)
}

type AlertOutput struct{ *pulumi.OutputState }

func (AlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (o AlertOutput) ToAlertOutput() AlertOutput {
	return o
}

func (o AlertOutput) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return o
}

type AlertArrayOutput struct{ *pulumi.OutputState }

func (AlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (o AlertArrayOutput) ToAlertArrayOutput() AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) Index(i pulumi.IntInput) AlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].([]*Alert)[vs[1].(int)]
	}).(AlertOutput)
}

type AlertMapOutput struct{ *pulumi.OutputState }

func (AlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (o AlertMapOutput) ToAlertMapOutput() AlertMapOutput {
	return o
}

func (o AlertMapOutput) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return o
}

func (o AlertMapOutput) MapIndex(k pulumi.StringInput) AlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].(map[string]*Alert)[vs[1].(string)]
	}).(AlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertInput)(nil)).Elem(), &Alert{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertArrayInput)(nil)).Elem(), AlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMapInput)(nil)).Elem(), AlertMap{})
	pulumi.RegisterOutputType(AlertOutput{})
	pulumi.RegisterOutputType(AlertArrayOutput{})
	pulumi.RegisterOutputType(AlertMapOutput{})
}
