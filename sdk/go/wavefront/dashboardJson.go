// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Wavefront Dashboard JSON resource. This allows dashboards to be created, updated, and deleted.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wavefront.NewDashboardJson(ctx, "test_dashboard_json", &wavefront.DashboardJsonArgs{
//				DashboardJson: pulumi.String(`{
//	  "acl": {
//	    "canModify": [
//	      "group-uuid",
//	      "role-uuid"
//	    ],
//	    "canView": [
//	      "group-uuid",
//	      "role-uuid"
//	    ]
//	  },
//	  "name": "Terraform Test Dashboard Json",
//	  "description": "a",
//	  "eventFilterType": "BYCHART",
//	  "eventQuery": "",
//	  "defaultTimeWindow": "",
//	  "url": "tftestimport",
//	  "displayDescription": false,
//	  "displaySectionTableOfContents": true,
//	  "displayQueryParameters": false,
//	  "sections": [
//	    {
//	      "name": "section 1",
//	      "rows": [
//	        {
//	          "charts": [
//	            {
//	              "name": "chart 1",
//	              "sources": [
//	                {
//	                  "name": "source 1",
//	                  "query": "ts()",
//	                  "scatterPlotSource": "Y",
//	                  "querybuilderEnabled": false,
//	                  "sourceDescription": ""
//	                }
//	              ],
//	              "units": "someunit",
//	              "base": 0,
//	              "noDefaultEvents": false,
//	              "interpolatePoints": false,
//	              "includeObsoleteMetrics": false,
//	              "description": "This is chart 1, showing something",
//	              "chartSettings": {
//	                "type": "markdown-widget",
//	                "max": 100,
//	                "expectedDataSpacing": 120,
//	                "windowing": "full",
//	                "windowSize": 10,
//	                "autoColumnTags": false,
//	                "columnTags": "deprecated",
//	                "tagMode": "all",
//	                "numTags": 2,
//	                "customTags": [
//	                  "tag1",
//	                  "tag2"
//	                ],
//	                "groupBySource": true,
//	                "y1Max": 100,
//	                "y1Units": "units",
//	                "y0ScaleSIBy1024": true,
//	                "y1ScaleSIBy1024": true,
//	                "y0UnitAutoscaling": true,
//	                "y1UnitAutoscaling": true,
//	                "fixedLegendEnabled": true,
//	                "fixedLegendUseRawStats": true,
//	                "fixedLegendPosition": "RIGHT",
//	                "fixedLegendDisplayStats": [
//	                  "stat1",
//	                  "stat2"
//	                ],
//	                "fixedLegendFilterSort": "TOP",
//	                "fixedLegendFilterLimit": 1,
//	                "fixedLegendFilterField": "CURRENT",
//	                "plainMarkdownContent": "markdown content"
//	              },
//	              "chartAttributes": {
//	                "dashboardLinks": {
//	                  "*": {
//	                    "variables": {
//	                      "xxx": "xxx"
//	                    },
//	                    "destination": "/dashboards/xxxx"
//	                  }
//	                }
//	              },
//	              "summarization": "MEAN"
//	            }
//	          ],
//	          "heightFactor": 50
//	        }
//	      ]
//	    }
//	  ],
//	  "parameterDetails": {
//	    "param": {
//	      "hideFromView": false,
//	      "description": null,
//	      "allowAll": null,
//	      "tagKey": null,
//	      "queryValue": null,
//	      "dynamicFieldType": null,
//	      "reverseDynSort": null,
//	      "parameterType": "SIMPLE",
//	      "label": "test",
//	      "defaultValue": "Label",
//	      "valuesToReadableStrings": {
//	        "Label": "test"
//	      },
//	      "selectedLabel": "Label",
//	      "value": "test"
//	    }
//	  },
//	  "tags": {
//	    "customerTags": [
//	      "terraform"
//	    ]
//	  }
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// *
// *Note:
// ** If there are dynamic variables in the Wavefront dashboard json, then these variables must be present in a separate file as mentioned in the section below.
//
// ## Import
//
// Dashboard JSON can be imported by using the `id`, e.g.:
//
// ```sh
// $ pulumi import wavefront:index/dashboardJson:DashboardJson dashboard_json tftestimport
// ```
type DashboardJson struct {
	pulumi.CustomResourceState

	// See the [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson pulumi.StringOutput `pulumi:"dashboardJson"`
}

// NewDashboardJson registers a new resource with the given unique name, arguments, and options.
func NewDashboardJson(ctx *pulumi.Context,
	name string, args *DashboardJsonArgs, opts ...pulumi.ResourceOption) (*DashboardJson, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardJson == nil {
		return nil, errors.New("invalid value for required argument 'DashboardJson'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardJson
	err := ctx.RegisterResource("wavefront:index/dashboardJson:DashboardJson", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardJson gets an existing DashboardJson resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardJson(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardJsonState, opts ...pulumi.ResourceOption) (*DashboardJson, error) {
	var resource DashboardJson
	err := ctx.ReadResource("wavefront:index/dashboardJson:DashboardJson", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardJson resources.
type dashboardJsonState struct {
	// See the [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson *string `pulumi:"dashboardJson"`
}

type DashboardJsonState struct {
	// See the [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson pulumi.StringPtrInput
}

func (DashboardJsonState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardJsonState)(nil)).Elem()
}

type dashboardJsonArgs struct {
	// See the [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson string `pulumi:"dashboardJson"`
}

// The set of arguments for constructing a DashboardJson resource.
type DashboardJsonArgs struct {
	// See the [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson pulumi.StringInput
}

func (DashboardJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardJsonArgs)(nil)).Elem()
}

type DashboardJsonInput interface {
	pulumi.Input

	ToDashboardJsonOutput() DashboardJsonOutput
	ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput
}

func (*DashboardJson) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardJson)(nil)).Elem()
}

func (i *DashboardJson) ToDashboardJsonOutput() DashboardJsonOutput {
	return i.ToDashboardJsonOutputWithContext(context.Background())
}

func (i *DashboardJson) ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonOutput)
}

// DashboardJsonArrayInput is an input type that accepts DashboardJsonArray and DashboardJsonArrayOutput values.
// You can construct a concrete instance of `DashboardJsonArrayInput` via:
//
//	DashboardJsonArray{ DashboardJsonArgs{...} }
type DashboardJsonArrayInput interface {
	pulumi.Input

	ToDashboardJsonArrayOutput() DashboardJsonArrayOutput
	ToDashboardJsonArrayOutputWithContext(context.Context) DashboardJsonArrayOutput
}

type DashboardJsonArray []DashboardJsonInput

func (DashboardJsonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardJson)(nil)).Elem()
}

func (i DashboardJsonArray) ToDashboardJsonArrayOutput() DashboardJsonArrayOutput {
	return i.ToDashboardJsonArrayOutputWithContext(context.Background())
}

func (i DashboardJsonArray) ToDashboardJsonArrayOutputWithContext(ctx context.Context) DashboardJsonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonArrayOutput)
}

// DashboardJsonMapInput is an input type that accepts DashboardJsonMap and DashboardJsonMapOutput values.
// You can construct a concrete instance of `DashboardJsonMapInput` via:
//
//	DashboardJsonMap{ "key": DashboardJsonArgs{...} }
type DashboardJsonMapInput interface {
	pulumi.Input

	ToDashboardJsonMapOutput() DashboardJsonMapOutput
	ToDashboardJsonMapOutputWithContext(context.Context) DashboardJsonMapOutput
}

type DashboardJsonMap map[string]DashboardJsonInput

func (DashboardJsonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardJson)(nil)).Elem()
}

func (i DashboardJsonMap) ToDashboardJsonMapOutput() DashboardJsonMapOutput {
	return i.ToDashboardJsonMapOutputWithContext(context.Background())
}

func (i DashboardJsonMap) ToDashboardJsonMapOutputWithContext(ctx context.Context) DashboardJsonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonMapOutput)
}

type DashboardJsonOutput struct{ *pulumi.OutputState }

func (DashboardJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardJson)(nil)).Elem()
}

func (o DashboardJsonOutput) ToDashboardJsonOutput() DashboardJsonOutput {
	return o
}

func (o DashboardJsonOutput) ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput {
	return o
}

// See the [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
// for instructions on how to get to your API documentation for more details.
func (o DashboardJsonOutput) DashboardJson() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardJson) pulumi.StringOutput { return v.DashboardJson }).(pulumi.StringOutput)
}

type DashboardJsonArrayOutput struct{ *pulumi.OutputState }

func (DashboardJsonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardJson)(nil)).Elem()
}

func (o DashboardJsonArrayOutput) ToDashboardJsonArrayOutput() DashboardJsonArrayOutput {
	return o
}

func (o DashboardJsonArrayOutput) ToDashboardJsonArrayOutputWithContext(ctx context.Context) DashboardJsonArrayOutput {
	return o
}

func (o DashboardJsonArrayOutput) Index(i pulumi.IntInput) DashboardJsonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardJson {
		return vs[0].([]*DashboardJson)[vs[1].(int)]
	}).(DashboardJsonOutput)
}

type DashboardJsonMapOutput struct{ *pulumi.OutputState }

func (DashboardJsonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardJson)(nil)).Elem()
}

func (o DashboardJsonMapOutput) ToDashboardJsonMapOutput() DashboardJsonMapOutput {
	return o
}

func (o DashboardJsonMapOutput) ToDashboardJsonMapOutputWithContext(ctx context.Context) DashboardJsonMapOutput {
	return o
}

func (o DashboardJsonMapOutput) MapIndex(k pulumi.StringInput) DashboardJsonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardJson {
		return vs[0].(map[string]*DashboardJson)[vs[1].(string)]
	}).(DashboardJsonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardJsonInput)(nil)).Elem(), &DashboardJson{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardJsonArrayInput)(nil)).Elem(), DashboardJsonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardJsonMapInput)(nil)).Elem(), DashboardJsonMap{})
	pulumi.RegisterOutputType(DashboardJsonOutput{})
	pulumi.RegisterOutputType(DashboardJsonArrayOutput{})
	pulumi.RegisterOutputType(DashboardJsonMapOutput{})
}
