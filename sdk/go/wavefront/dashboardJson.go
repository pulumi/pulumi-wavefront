// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront Dashboard JSON resource.  This allows dashboards to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewDashboardJson(ctx, "testDashboardJson", &wavefront.DashboardJsonArgs{
// 			DashboardJson: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"name\": \"Terraform Test Dashboard Json\",\n", "  \"description\": \"a\",\n", "  \"eventFilterType\": \"BYCHART\",\n", "  \"eventQuery\": \"\",\n", "  \"defaultTimeWindow\": \"\",\n", "  \"url\": \"tftestimport\",\n", "  \"displayDescription\": false,\n", "  \"displaySectionTableOfContents\": true,\n", "  \"displayQueryParameters\": false,\n", "  \"sections\": [\n", "    {\n", "      \"name\": \"section 1\",\n", "      \"rows\": [\n", "        {\n", "          \"charts\": [\n", "            {\n", "              \"name\": \"chart 1\",\n", "              \"sources\": [\n", "                {\n", "                  \"name\": \"source 1\",\n", "                  \"query\": \"ts()\",\n", "                  \"scatterPlotSource\": \"Y\",\n", "                  \"querybuilderEnabled\": false,\n", "                  \"sourceDescription\": \"\"\n", "                }\n", "              ],\n", "              \"units\": \"someunit\",\n", "              \"base\": 0,\n", "              \"noDefaultEvents\": false,\n", "              \"interpolatePoints\": false,\n", "              \"includeObsoleteMetrics\": false,\n", "              \"description\": \"This is chart 1, showing something\",\n", "              \"chartSettings\": {\n", "                \"type\": \"markdown-widget\",\n", "                \"max\": 100,\n", "                \"expectedDataSpacing\": 120,\n", "                \"windowing\": \"full\",\n", "                \"windowSize\": 10,\n", "                \"autoColumnTags\": false,\n", "                \"columnTags\": \"deprecated\",\n", "                \"tagMode\": \"all\",\n", "                \"numTags\": 2,\n", "                \"customTags\": [\n", "                  \"tag1\",\n", "                  \"tag2\"\n", "                ],\n", "                \"groupBySource\": true,\n", "                \"y1Max\": 100,\n", "                \"y1Units\": \"units\",\n", "                \"y0ScaleSIBy1024\": true,\n", "                \"y1ScaleSIBy1024\": true,\n", "                \"y0UnitAutoscaling\": true,\n", "                \"y1UnitAutoscaling\": true,\n", "                \"fixedLegendEnabled\": true,\n", "                \"fixedLegendUseRawStats\": true,\n", "                \"fixedLegendPosition\": \"RIGHT\",\n", "                \"fixedLegendDisplayStats\": [\n", "                  \"stat1\",\n", "                  \"stat2\"\n", "                ],\n", "                \"fixedLegendFilterSort\": \"TOP\",\n", "                \"fixedLegendFilterLimit\": 1,\n", "                \"fixedLegendFilterField\": \"CURRENT\",\n", "                \"plainMarkdownContent\": \"markdown content\"\n", "              },\n", "              \"summarization\": \"MEAN\"\n", "            }\n", "          ],\n", "          \"heightFactor\": 50\n", "        }\n", "      ]\n", "    }\n", "  ],\n", "  \"parameterDetails\": {\n", "    \"param\": {\n", "      \"hideFromView\": false,\n", "      \"description\": null,\n", "      \"allowAll\": null,\n", "      \"tagKey\": null,\n", "      \"queryValue\": null,\n", "      \"dynamicFieldType\": null,\n", "      \"reverseDynSort\": null,\n", "      \"parameterType\": \"SIMPLE\",\n", "      \"label\": \"test\",\n", "      \"defaultValue\": \"Label\",\n", "      \"valuesToReadableStrings\": {\n", "        \"Label\": \"test\"\n", "      },\n", "      \"selectedLabel\": \"Label\",\n", "      \"value\": \"test\"\n", "    }\n", "  },\n", "  \"tags\" :{\n", "    \"customerTags\":  [\"terraform\"]\n", "  }\n", "}\n", "\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Dashboard JSON can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import wavefront:index/dashboardJson:DashboardJson dashboard_json tftestimport
// ```
type DashboardJson struct {
	pulumi.CustomResourceState

	// See [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson pulumi.StringOutput `pulumi:"dashboardJson"`
}

// NewDashboardJson registers a new resource with the given unique name, arguments, and options.
func NewDashboardJson(ctx *pulumi.Context,
	name string, args *DashboardJsonArgs, opts ...pulumi.ResourceOption) (*DashboardJson, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardJson == nil {
		return nil, errors.New("invalid value for required argument 'DashboardJson'")
	}
	var resource DashboardJson
	err := ctx.RegisterResource("wavefront:index/dashboardJson:DashboardJson", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardJson gets an existing DashboardJson resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardJson(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardJsonState, opts ...pulumi.ResourceOption) (*DashboardJson, error) {
	var resource DashboardJson
	err := ctx.ReadResource("wavefront:index/dashboardJson:DashboardJson", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardJson resources.
type dashboardJsonState struct {
	// See [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson *string `pulumi:"dashboardJson"`
}

type DashboardJsonState struct {
	// See [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson pulumi.StringPtrInput
}

func (DashboardJsonState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardJsonState)(nil)).Elem()
}

type dashboardJsonArgs struct {
	// See [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson string `pulumi:"dashboardJson"`
}

// The set of arguments for constructing a DashboardJson resource.
type DashboardJsonArgs struct {
	// See [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
	// for instructions on how to get to your API documentation for more details.
	DashboardJson pulumi.StringInput
}

func (DashboardJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardJsonArgs)(nil)).Elem()
}

type DashboardJsonInput interface {
	pulumi.Input

	ToDashboardJsonOutput() DashboardJsonOutput
	ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput
}

func (*DashboardJson) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardJson)(nil))
}

func (i *DashboardJson) ToDashboardJsonOutput() DashboardJsonOutput {
	return i.ToDashboardJsonOutputWithContext(context.Background())
}

func (i *DashboardJson) ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonOutput)
}

func (i *DashboardJson) ToDashboardJsonPtrOutput() DashboardJsonPtrOutput {
	return i.ToDashboardJsonPtrOutputWithContext(context.Background())
}

func (i *DashboardJson) ToDashboardJsonPtrOutputWithContext(ctx context.Context) DashboardJsonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonPtrOutput)
}

type DashboardJsonPtrInput interface {
	pulumi.Input

	ToDashboardJsonPtrOutput() DashboardJsonPtrOutput
	ToDashboardJsonPtrOutputWithContext(ctx context.Context) DashboardJsonPtrOutput
}

type dashboardJsonPtrType DashboardJsonArgs

func (*dashboardJsonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardJson)(nil))
}

func (i *dashboardJsonPtrType) ToDashboardJsonPtrOutput() DashboardJsonPtrOutput {
	return i.ToDashboardJsonPtrOutputWithContext(context.Background())
}

func (i *dashboardJsonPtrType) ToDashboardJsonPtrOutputWithContext(ctx context.Context) DashboardJsonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonPtrOutput)
}

// DashboardJsonArrayInput is an input type that accepts DashboardJsonArray and DashboardJsonArrayOutput values.
// You can construct a concrete instance of `DashboardJsonArrayInput` via:
//
//          DashboardJsonArray{ DashboardJsonArgs{...} }
type DashboardJsonArrayInput interface {
	pulumi.Input

	ToDashboardJsonArrayOutput() DashboardJsonArrayOutput
	ToDashboardJsonArrayOutputWithContext(context.Context) DashboardJsonArrayOutput
}

type DashboardJsonArray []DashboardJsonInput

func (DashboardJsonArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DashboardJson)(nil))
}

func (i DashboardJsonArray) ToDashboardJsonArrayOutput() DashboardJsonArrayOutput {
	return i.ToDashboardJsonArrayOutputWithContext(context.Background())
}

func (i DashboardJsonArray) ToDashboardJsonArrayOutputWithContext(ctx context.Context) DashboardJsonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonArrayOutput)
}

// DashboardJsonMapInput is an input type that accepts DashboardJsonMap and DashboardJsonMapOutput values.
// You can construct a concrete instance of `DashboardJsonMapInput` via:
//
//          DashboardJsonMap{ "key": DashboardJsonArgs{...} }
type DashboardJsonMapInput interface {
	pulumi.Input

	ToDashboardJsonMapOutput() DashboardJsonMapOutput
	ToDashboardJsonMapOutputWithContext(context.Context) DashboardJsonMapOutput
}

type DashboardJsonMap map[string]DashboardJsonInput

func (DashboardJsonMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DashboardJson)(nil))
}

func (i DashboardJsonMap) ToDashboardJsonMapOutput() DashboardJsonMapOutput {
	return i.ToDashboardJsonMapOutputWithContext(context.Background())
}

func (i DashboardJsonMap) ToDashboardJsonMapOutputWithContext(ctx context.Context) DashboardJsonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonMapOutput)
}

type DashboardJsonOutput struct {
	*pulumi.OutputState
}

func (DashboardJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardJson)(nil))
}

func (o DashboardJsonOutput) ToDashboardJsonOutput() DashboardJsonOutput {
	return o
}

func (o DashboardJsonOutput) ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput {
	return o
}

func (o DashboardJsonOutput) ToDashboardJsonPtrOutput() DashboardJsonPtrOutput {
	return o.ToDashboardJsonPtrOutputWithContext(context.Background())
}

func (o DashboardJsonOutput) ToDashboardJsonPtrOutputWithContext(ctx context.Context) DashboardJsonPtrOutput {
	return o.ApplyT(func(v DashboardJson) *DashboardJson {
		return &v
	}).(DashboardJsonPtrOutput)
}

type DashboardJsonPtrOutput struct {
	*pulumi.OutputState
}

func (DashboardJsonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardJson)(nil))
}

func (o DashboardJsonPtrOutput) ToDashboardJsonPtrOutput() DashboardJsonPtrOutput {
	return o
}

func (o DashboardJsonPtrOutput) ToDashboardJsonPtrOutputWithContext(ctx context.Context) DashboardJsonPtrOutput {
	return o
}

type DashboardJsonArrayOutput struct{ *pulumi.OutputState }

func (DashboardJsonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardJson)(nil))
}

func (o DashboardJsonArrayOutput) ToDashboardJsonArrayOutput() DashboardJsonArrayOutput {
	return o
}

func (o DashboardJsonArrayOutput) ToDashboardJsonArrayOutputWithContext(ctx context.Context) DashboardJsonArrayOutput {
	return o
}

func (o DashboardJsonArrayOutput) Index(i pulumi.IntInput) DashboardJsonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardJson {
		return vs[0].([]DashboardJson)[vs[1].(int)]
	}).(DashboardJsonOutput)
}

type DashboardJsonMapOutput struct{ *pulumi.OutputState }

func (DashboardJsonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DashboardJson)(nil))
}

func (o DashboardJsonMapOutput) ToDashboardJsonMapOutput() DashboardJsonMapOutput {
	return o
}

func (o DashboardJsonMapOutput) ToDashboardJsonMapOutputWithContext(ctx context.Context) DashboardJsonMapOutput {
	return o
}

func (o DashboardJsonMapOutput) MapIndex(k pulumi.StringInput) DashboardJsonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DashboardJson {
		return vs[0].(map[string]DashboardJson)[vs[1].(string)]
	}).(DashboardJsonOutput)
}

func init() {
	pulumi.RegisterOutputType(DashboardJsonOutput{})
	pulumi.RegisterOutputType(DashboardJsonPtrOutput{})
	pulumi.RegisterOutputType(DashboardJsonArrayOutput{})
	pulumi.RegisterOutputType(DashboardJsonMapOutput{})
}
