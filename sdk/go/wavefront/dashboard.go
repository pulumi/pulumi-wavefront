// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Wavefront Dashboard resource. This allows dashboards to be created, updated, and deleted.
//
// ## Import
//
// Dashboards can be imported by using the `id`, e.g.:
//
// ```sh
// $ pulumi import wavefront:index/dashboard:Dashboard dashboard tftestimport
// ```
type Dashboard struct {
	pulumi.CustomResourceState

	// A list of users/groups/roles that can modify the dashboard.
	CanModifies pulumi.StringArrayOutput `pulumi:"canModifies"`
	// A list of users/groups/roles that can view the dashboard.
	CanViews pulumi.StringArrayOutput `pulumi:"canViews"`
	// Human-readable description of the dashboard.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether the dashboard parameters section is opened by default when the dashboard
	// is shown.
	DisplayQueryParameters pulumi.BoolPtrOutput `pulumi:"displayQueryParameters"`
	// Whether the "pills" quick-linked the sections of the dashboard are
	// displayed by default when the dashboard is shown.
	DisplaySectionTableOfContents pulumi.BoolPtrOutput `pulumi:"displaySectionTableOfContents"`
	// How charts belonging to this dashboard should display events. `BYCHART` is default if
	// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
	EventFilterType pulumi.StringPtrOutput `pulumi:"eventFilterType"`
	// Name of the dashboard.
	Name pulumi.StringOutput `pulumi:"name"`
	// The current JSON representation of dashboard parameters. See parameter details.
	ParameterDetails DashboardParameterDetailArrayOutput `pulumi:"parameterDetails"`
	// Dashboard chart sections. See dashboard sections.
	Sections DashboardSectionArrayOutput `pulumi:"sections"`
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unique identifier, also a URL slug of the dashboard.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Sections == nil {
		return nil, errors.New("invalid value for required argument 'Sections'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("wavefront:index/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("wavefront:index/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	// A list of users/groups/roles that can modify the dashboard.
	CanModifies []string `pulumi:"canModifies"`
	// A list of users/groups/roles that can view the dashboard.
	CanViews []string `pulumi:"canViews"`
	// Human-readable description of the dashboard.
	Description *string `pulumi:"description"`
	// Whether the dashboard parameters section is opened by default when the dashboard
	// is shown.
	DisplayQueryParameters *bool `pulumi:"displayQueryParameters"`
	// Whether the "pills" quick-linked the sections of the dashboard are
	// displayed by default when the dashboard is shown.
	DisplaySectionTableOfContents *bool `pulumi:"displaySectionTableOfContents"`
	// How charts belonging to this dashboard should display events. `BYCHART` is default if
	// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
	EventFilterType *string `pulumi:"eventFilterType"`
	// Name of the dashboard.
	Name *string `pulumi:"name"`
	// The current JSON representation of dashboard parameters. See parameter details.
	ParameterDetails []DashboardParameterDetail `pulumi:"parameterDetails"`
	// Dashboard chart sections. See dashboard sections.
	Sections []DashboardSection `pulumi:"sections"`
	// A set of tags to assign to this resource.
	Tags []string `pulumi:"tags"`
	// Unique identifier, also a URL slug of the dashboard.
	Url *string `pulumi:"url"`
}

type DashboardState struct {
	// A list of users/groups/roles that can modify the dashboard.
	CanModifies pulumi.StringArrayInput
	// A list of users/groups/roles that can view the dashboard.
	CanViews pulumi.StringArrayInput
	// Human-readable description of the dashboard.
	Description pulumi.StringPtrInput
	// Whether the dashboard parameters section is opened by default when the dashboard
	// is shown.
	DisplayQueryParameters pulumi.BoolPtrInput
	// Whether the "pills" quick-linked the sections of the dashboard are
	// displayed by default when the dashboard is shown.
	DisplaySectionTableOfContents pulumi.BoolPtrInput
	// How charts belonging to this dashboard should display events. `BYCHART` is default if
	// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
	EventFilterType pulumi.StringPtrInput
	// Name of the dashboard.
	Name pulumi.StringPtrInput
	// The current JSON representation of dashboard parameters. See parameter details.
	ParameterDetails DashboardParameterDetailArrayInput
	// Dashboard chart sections. See dashboard sections.
	Sections DashboardSectionArrayInput
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayInput
	// Unique identifier, also a URL slug of the dashboard.
	Url pulumi.StringPtrInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// A list of users/groups/roles that can modify the dashboard.
	CanModifies []string `pulumi:"canModifies"`
	// A list of users/groups/roles that can view the dashboard.
	CanViews []string `pulumi:"canViews"`
	// Human-readable description of the dashboard.
	Description string `pulumi:"description"`
	// Whether the dashboard parameters section is opened by default when the dashboard
	// is shown.
	DisplayQueryParameters *bool `pulumi:"displayQueryParameters"`
	// Whether the "pills" quick-linked the sections of the dashboard are
	// displayed by default when the dashboard is shown.
	DisplaySectionTableOfContents *bool `pulumi:"displaySectionTableOfContents"`
	// How charts belonging to this dashboard should display events. `BYCHART` is default if
	// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
	EventFilterType *string `pulumi:"eventFilterType"`
	// Name of the dashboard.
	Name *string `pulumi:"name"`
	// The current JSON representation of dashboard parameters. See parameter details.
	ParameterDetails []DashboardParameterDetail `pulumi:"parameterDetails"`
	// Dashboard chart sections. See dashboard sections.
	Sections []DashboardSection `pulumi:"sections"`
	// A set of tags to assign to this resource.
	Tags []string `pulumi:"tags"`
	// Unique identifier, also a URL slug of the dashboard.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// A list of users/groups/roles that can modify the dashboard.
	CanModifies pulumi.StringArrayInput
	// A list of users/groups/roles that can view the dashboard.
	CanViews pulumi.StringArrayInput
	// Human-readable description of the dashboard.
	Description pulumi.StringInput
	// Whether the dashboard parameters section is opened by default when the dashboard
	// is shown.
	DisplayQueryParameters pulumi.BoolPtrInput
	// Whether the "pills" quick-linked the sections of the dashboard are
	// displayed by default when the dashboard is shown.
	DisplaySectionTableOfContents pulumi.BoolPtrInput
	// How charts belonging to this dashboard should display events. `BYCHART` is default if
	// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
	EventFilterType pulumi.StringPtrInput
	// Name of the dashboard.
	Name pulumi.StringPtrInput
	// The current JSON representation of dashboard parameters. See parameter details.
	ParameterDetails DashboardParameterDetailArrayInput
	// Dashboard chart sections. See dashboard sections.
	Sections DashboardSectionArrayInput
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayInput
	// Unique identifier, also a URL slug of the dashboard.
	Url pulumi.StringInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

// DashboardArrayInput is an input type that accepts DashboardArray and DashboardArrayOutput values.
// You can construct a concrete instance of `DashboardArrayInput` via:
//
//	DashboardArray{ DashboardArgs{...} }
type DashboardArrayInput interface {
	pulumi.Input

	ToDashboardArrayOutput() DashboardArrayOutput
	ToDashboardArrayOutputWithContext(context.Context) DashboardArrayOutput
}

type DashboardArray []DashboardInput

func (DashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (i DashboardArray) ToDashboardArrayOutput() DashboardArrayOutput {
	return i.ToDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardArray) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardArrayOutput)
}

// DashboardMapInput is an input type that accepts DashboardMap and DashboardMapOutput values.
// You can construct a concrete instance of `DashboardMapInput` via:
//
//	DashboardMap{ "key": DashboardArgs{...} }
type DashboardMapInput interface {
	pulumi.Input

	ToDashboardMapOutput() DashboardMapOutput
	ToDashboardMapOutputWithContext(context.Context) DashboardMapOutput
}

type DashboardMap map[string]DashboardInput

func (DashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (i DashboardMap) ToDashboardMapOutput() DashboardMapOutput {
	return i.ToDashboardMapOutputWithContext(context.Background())
}

func (i DashboardMap) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardMapOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

// A list of users/groups/roles that can modify the dashboard.
func (o DashboardOutput) CanModifies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.CanModifies }).(pulumi.StringArrayOutput)
}

// A list of users/groups/roles that can view the dashboard.
func (o DashboardOutput) CanViews() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.CanViews }).(pulumi.StringArrayOutput)
}

// Human-readable description of the dashboard.
func (o DashboardOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether the dashboard parameters section is opened by default when the dashboard
// is shown.
func (o DashboardOutput) DisplayQueryParameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.BoolPtrOutput { return v.DisplayQueryParameters }).(pulumi.BoolPtrOutput)
}

// Whether the "pills" quick-linked the sections of the dashboard are
// displayed by default when the dashboard is shown.
func (o DashboardOutput) DisplaySectionTableOfContents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.BoolPtrOutput { return v.DisplaySectionTableOfContents }).(pulumi.BoolPtrOutput)
}

// How charts belonging to this dashboard should display events. `BYCHART` is default if
// unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
func (o DashboardOutput) EventFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.EventFilterType }).(pulumi.StringPtrOutput)
}

// Name of the dashboard.
func (o DashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The current JSON representation of dashboard parameters. See parameter details.
func (o DashboardOutput) ParameterDetails() DashboardParameterDetailArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardParameterDetailArrayOutput { return v.ParameterDetails }).(DashboardParameterDetailArrayOutput)
}

// Dashboard chart sections. See dashboard sections.
func (o DashboardOutput) Sections() DashboardSectionArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardSectionArrayOutput { return v.Sections }).(DashboardSectionArrayOutput)
}

// A set of tags to assign to this resource.
func (o DashboardOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unique identifier, also a URL slug of the dashboard.
func (o DashboardOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (o DashboardArrayOutput) ToDashboardArrayOutput() DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) Index(i pulumi.IntInput) DashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].([]*Dashboard)[vs[1].(int)]
	}).(DashboardOutput)
}

type DashboardMapOutput struct{ *pulumi.OutputState }

func (DashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (o DashboardMapOutput) ToDashboardMapOutput() DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) MapIndex(k pulumi.StringInput) DashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].(map[string]*Dashboard)[vs[1].(string)]
	}).(DashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardArrayInput)(nil)).Elem(), DashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardMapInput)(nil)).Elem(), DashboardMap{})
	pulumi.RegisterOutputType(DashboardOutput{})
	pulumi.RegisterOutputType(DashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardMapOutput{})
}
