// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a Wavefront maintenance window by its ID.
func LookupMaintenanceWindow(ctx *pulumi.Context, args *LookupMaintenanceWindowArgs, opts ...pulumi.InvokeOption) (*LookupMaintenanceWindowResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMaintenanceWindowResult
	err := ctx.Invoke("wavefront:index/getMaintenanceWindow:getMaintenanceWindow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMaintenanceWindow.
type LookupMaintenanceWindowArgs struct {
	// The ID of the maintenance window.
	Id string `pulumi:"id"`
}

// A collection of values returned by getMaintenanceWindow.
type LookupMaintenanceWindowResult struct {
	// The timestamp in epoch milliseconds indicating when the maintenance window is created.
	CreatedEpochMillis int `pulumi:"createdEpochMillis"`
	// The ID of the user who created the maintenance window.
	CreatorId string `pulumi:"creatorId"`
	// The ID of the customer in Wavefront.
	CustomerId string `pulumi:"customerId"`
	// The end time in seconds after 1 Jan 1970 GMT.
	EndTimeInSeconds int `pulumi:"endTimeInSeconds"`
	// The event name of the maintenance window.
	EventName string `pulumi:"eventName"`
	// If set to `true`, the source or host must be in `relevantHostNames` and must have tags matching the specification formed by `relevantHostTags` and `relevantHostTagsAnded` in for this maintenance window to apply.
	// If set to false, the source or host must either be in `relevantHostNames` or match `relevantHostTags` and `relevantHostTagsAnded`. Default value is `false`.
	HostTagGroupHostNamesGroupAnded bool `pulumi:"hostTagGroupHostNamesGroupAnded"`
	// The ID of the maintenance window.
	Id string `pulumi:"id"`
	// The reason for the maintenance window.
	Reason string `pulumi:"reason"`
	// The list of alert tags whose matching alerts will be put into maintenance because
	// of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantCustomerTags []string `pulumi:"relevantCustomerTags"`
	// The list of source or host names that will be put into maintenance because of this
	// maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantHostNames []string `pulumi:"relevantHostNames"`
	// The list of source or host tags whose matching sources or hosts will be put into maintenance
	// because of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or
	// `relevantHostNames` is required.
	RelevantHostTags []string `pulumi:"relevantHostTags"`
	// Whether to AND source or host tags listed in `relevantHostTags`.
	// If set to `true`, the source or host must contain all tags for the maintenance window to apply. If set to `false`,
	// the tags are OR'ed, and the source or host must contain one of the tags. Default value is `false`.
	RelevantHostTagsAnded bool `pulumi:"relevantHostTagsAnded"`
	// The running state of the maintenance window.
	RunningState string `pulumi:"runningState"`
	SortAttr     int    `pulumi:"sortAttr"`
	// The start time in seconds after 1 Jan 1970 GMT.
	StartTimeInSeconds int `pulumi:"startTimeInSeconds"`
	// The title of the maintenance window.
	Title string `pulumi:"title"`
	// The timestamp in epoch milliseconds indicating when the maintenance window is updated.
	UpdatedEpochMillis int `pulumi:"updatedEpochMillis"`
	// The ID of the user who updated the maintenance window.
	UpdaterId string `pulumi:"updaterId"`
}

func LookupMaintenanceWindowOutput(ctx *pulumi.Context, args LookupMaintenanceWindowOutputArgs, opts ...pulumi.InvokeOption) LookupMaintenanceWindowResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMaintenanceWindowResult, error) {
			args := v.(LookupMaintenanceWindowArgs)
			r, err := LookupMaintenanceWindow(ctx, &args, opts...)
			var s LookupMaintenanceWindowResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMaintenanceWindowResultOutput)
}

// A collection of arguments for invoking getMaintenanceWindow.
type LookupMaintenanceWindowOutputArgs struct {
	// The ID of the maintenance window.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupMaintenanceWindowOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMaintenanceWindowArgs)(nil)).Elem()
}

// A collection of values returned by getMaintenanceWindow.
type LookupMaintenanceWindowResultOutput struct{ *pulumi.OutputState }

func (LookupMaintenanceWindowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMaintenanceWindowResult)(nil)).Elem()
}

func (o LookupMaintenanceWindowResultOutput) ToLookupMaintenanceWindowResultOutput() LookupMaintenanceWindowResultOutput {
	return o
}

func (o LookupMaintenanceWindowResultOutput) ToLookupMaintenanceWindowResultOutputWithContext(ctx context.Context) LookupMaintenanceWindowResultOutput {
	return o
}

func (o LookupMaintenanceWindowResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupMaintenanceWindowResult] {
	return pulumix.Output[LookupMaintenanceWindowResult]{
		OutputState: o.OutputState,
	}
}

// The timestamp in epoch milliseconds indicating when the maintenance window is created.
func (o LookupMaintenanceWindowResultOutput) CreatedEpochMillis() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) int { return v.CreatedEpochMillis }).(pulumi.IntOutput)
}

// The ID of the user who created the maintenance window.
func (o LookupMaintenanceWindowResultOutput) CreatorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) string { return v.CreatorId }).(pulumi.StringOutput)
}

// The ID of the customer in Wavefront.
func (o LookupMaintenanceWindowResultOutput) CustomerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) string { return v.CustomerId }).(pulumi.StringOutput)
}

// The end time in seconds after 1 Jan 1970 GMT.
func (o LookupMaintenanceWindowResultOutput) EndTimeInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) int { return v.EndTimeInSeconds }).(pulumi.IntOutput)
}

// The event name of the maintenance window.
func (o LookupMaintenanceWindowResultOutput) EventName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) string { return v.EventName }).(pulumi.StringOutput)
}

// If set to `true`, the source or host must be in `relevantHostNames` and must have tags matching the specification formed by `relevantHostTags` and `relevantHostTagsAnded` in for this maintenance window to apply.
// If set to false, the source or host must either be in `relevantHostNames` or match `relevantHostTags` and `relevantHostTagsAnded`. Default value is `false`.
func (o LookupMaintenanceWindowResultOutput) HostTagGroupHostNamesGroupAnded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) bool { return v.HostTagGroupHostNamesGroupAnded }).(pulumi.BoolOutput)
}

// The ID of the maintenance window.
func (o LookupMaintenanceWindowResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) string { return v.Id }).(pulumi.StringOutput)
}

// The reason for the maintenance window.
func (o LookupMaintenanceWindowResultOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) string { return v.Reason }).(pulumi.StringOutput)
}

// The list of alert tags whose matching alerts will be put into maintenance because
// of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
// is required.
func (o LookupMaintenanceWindowResultOutput) RelevantCustomerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) []string { return v.RelevantCustomerTags }).(pulumi.StringArrayOutput)
}

// The list of source or host names that will be put into maintenance because of this
// maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
// is required.
func (o LookupMaintenanceWindowResultOutput) RelevantHostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) []string { return v.RelevantHostNames }).(pulumi.StringArrayOutput)
}

// The list of source or host tags whose matching sources or hosts will be put into maintenance
// because of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or
// `relevantHostNames` is required.
func (o LookupMaintenanceWindowResultOutput) RelevantHostTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) []string { return v.RelevantHostTags }).(pulumi.StringArrayOutput)
}

// Whether to AND source or host tags listed in `relevantHostTags`.
// If set to `true`, the source or host must contain all tags for the maintenance window to apply. If set to `false`,
// the tags are OR'ed, and the source or host must contain one of the tags. Default value is `false`.
func (o LookupMaintenanceWindowResultOutput) RelevantHostTagsAnded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) bool { return v.RelevantHostTagsAnded }).(pulumi.BoolOutput)
}

// The running state of the maintenance window.
func (o LookupMaintenanceWindowResultOutput) RunningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) string { return v.RunningState }).(pulumi.StringOutput)
}

func (o LookupMaintenanceWindowResultOutput) SortAttr() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) int { return v.SortAttr }).(pulumi.IntOutput)
}

// The start time in seconds after 1 Jan 1970 GMT.
func (o LookupMaintenanceWindowResultOutput) StartTimeInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) int { return v.StartTimeInSeconds }).(pulumi.IntOutput)
}

// The title of the maintenance window.
func (o LookupMaintenanceWindowResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) string { return v.Title }).(pulumi.StringOutput)
}

// The timestamp in epoch milliseconds indicating when the maintenance window is updated.
func (o LookupMaintenanceWindowResultOutput) UpdatedEpochMillis() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) int { return v.UpdatedEpochMillis }).(pulumi.IntOutput)
}

// The ID of the user who updated the maintenance window.
func (o LookupMaintenanceWindowResultOutput) UpdaterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceWindowResult) string { return v.UpdaterId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMaintenanceWindowResultOutput{})
}
