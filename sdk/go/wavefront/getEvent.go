// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a certain Wavefront event.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wavefront.LookupEvent(ctx, &wavefront.LookupEventArgs{
//				Id: "sample-event-id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupEvent(ctx *pulumi.Context, args *LookupEventArgs, opts ...pulumi.InvokeOption) (*LookupEventResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEventResult
	err := ctx.Invoke("wavefront:index/getEvent:getEvent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEvent.
type LookupEventArgs struct {
	// The ID associated with the event data to be fetched.
	Id string `pulumi:"id"`
}

// A collection of values returned by getEvent.
type LookupEventResult struct {
	// Annotations associated with the event.
	Annotations map[string]string `pulumi:"annotations"`
	// The description of the event.
	Details    string `pulumi:"details"`
	EndtimeKey int    `pulumi:"endtimeKey"`
	// The ID of the event in Wavefront.
	Id string `pulumi:"id"`
	// A Boolean flag. If set to `true`, creates a point-in-time event (i.e. with no duration).
	IsEphemeral bool `pulumi:"isEphemeral"`
	// The name of the event in Wavefront.
	Name string `pulumi:"name"`
	// The severity category of the event.
	Severity string `pulumi:"severity"`
	// The start time of the event in epoch milliseconds.
	StartTime int `pulumi:"startTime"`
	// A set of tags assigned to the event.
	Tags []string `pulumi:"tags"`
	// The type of the event.
	Type string `pulumi:"type"`
}

func LookupEventOutput(ctx *pulumi.Context, args LookupEventOutputArgs, opts ...pulumi.InvokeOption) LookupEventResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEventResult, error) {
			args := v.(LookupEventArgs)
			r, err := LookupEvent(ctx, &args, opts...)
			var s LookupEventResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEventResultOutput)
}

// A collection of arguments for invoking getEvent.
type LookupEventOutputArgs struct {
	// The ID associated with the event data to be fetched.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupEventOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventArgs)(nil)).Elem()
}

// A collection of values returned by getEvent.
type LookupEventResultOutput struct{ *pulumi.OutputState }

func (LookupEventResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventResult)(nil)).Elem()
}

func (o LookupEventResultOutput) ToLookupEventResultOutput() LookupEventResultOutput {
	return o
}

func (o LookupEventResultOutput) ToLookupEventResultOutputWithContext(ctx context.Context) LookupEventResultOutput {
	return o
}

func (o LookupEventResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupEventResult] {
	return pulumix.Output[LookupEventResult]{
		OutputState: o.OutputState,
	}
}

// Annotations associated with the event.
func (o LookupEventResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupEventResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The description of the event.
func (o LookupEventResultOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventResult) string { return v.Details }).(pulumi.StringOutput)
}

func (o LookupEventResultOutput) EndtimeKey() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEventResult) int { return v.EndtimeKey }).(pulumi.IntOutput)
}

// The ID of the event in Wavefront.
func (o LookupEventResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventResult) string { return v.Id }).(pulumi.StringOutput)
}

// A Boolean flag. If set to `true`, creates a point-in-time event (i.e. with no duration).
func (o LookupEventResultOutput) IsEphemeral() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEventResult) bool { return v.IsEphemeral }).(pulumi.BoolOutput)
}

// The name of the event in Wavefront.
func (o LookupEventResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventResult) string { return v.Name }).(pulumi.StringOutput)
}

// The severity category of the event.
func (o LookupEventResultOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventResult) string { return v.Severity }).(pulumi.StringOutput)
}

// The start time of the event in epoch milliseconds.
func (o LookupEventResultOutput) StartTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEventResult) int { return v.StartTime }).(pulumi.IntOutput)
}

// A set of tags assigned to the event.
func (o LookupEventResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEventResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the event.
func (o LookupEventResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventResultOutput{})
}
