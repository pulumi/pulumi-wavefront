// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront Cloud Integration for NewRelic. This allows NewRelic cloud integrations to be created,
// updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewCloudIntegrationNewRelic(ctx, "newrelic", &wavefront.CloudIntegrationNewRelicArgs{
// 			ApiKey: pulumi.String("example-api-key"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// NewRelic Integrations can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic newrelic a411c16b-3cf7-4f03-bf11-8ca05aab898d
// ```
type CloudIntegrationNewRelic struct {
	pulumi.CustomResourceState

	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags pulumi.StringMapOutput `pulumi:"additionalTags"`
	// NewRelic REST api key
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// A regular expression that an application name must match (case-insensitively) iun order to collect metrics
	AppFilterRegex pulumi.StringPtrOutput `pulumi:"appFilterRegex"`
	// Forces this resource to save, even if errors are present
	ForceSave pulumi.BoolPtrOutput `pulumi:"forceSave"`
	// A regular expression that a host name must match (case-insensitively) in order to collect metrics
	HostFilterRegex pulumi.StringPtrOutput `pulumi:"hostFilterRegex"`
	// See Metric Filter
	MetricFilters CloudIntegrationNewRelicMetricFilterArrayOutput `pulumi:"metricFilters"`
	// The human-readable name of this integration
	Name pulumi.StringOutput `pulumi:"name"`
	// A value denoting which cloud service this service integrates with
	Service pulumi.StringOutput `pulumi:"service"`
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes pulumi.IntPtrOutput `pulumi:"serviceRefreshRateInMinutes"`
}

// NewCloudIntegrationNewRelic registers a new resource with the given unique name, arguments, and options.
func NewCloudIntegrationNewRelic(ctx *pulumi.Context,
	name string, args *CloudIntegrationNewRelicArgs, opts ...pulumi.ResourceOption) (*CloudIntegrationNewRelic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	var resource CloudIntegrationNewRelic
	err := ctx.RegisterResource("wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudIntegrationNewRelic gets an existing CloudIntegrationNewRelic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudIntegrationNewRelic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudIntegrationNewRelicState, opts ...pulumi.ResourceOption) (*CloudIntegrationNewRelic, error) {
	var resource CloudIntegrationNewRelic
	err := ctx.ReadResource("wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudIntegrationNewRelic resources.
type cloudIntegrationNewRelicState struct {
	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags map[string]string `pulumi:"additionalTags"`
	// NewRelic REST api key
	ApiKey *string `pulumi:"apiKey"`
	// A regular expression that an application name must match (case-insensitively) iun order to collect metrics
	AppFilterRegex *string `pulumi:"appFilterRegex"`
	// Forces this resource to save, even if errors are present
	ForceSave *bool `pulumi:"forceSave"`
	// A regular expression that a host name must match (case-insensitively) in order to collect metrics
	HostFilterRegex *string `pulumi:"hostFilterRegex"`
	// See Metric Filter
	MetricFilters []CloudIntegrationNewRelicMetricFilter `pulumi:"metricFilters"`
	// The human-readable name of this integration
	Name *string `pulumi:"name"`
	// A value denoting which cloud service this service integrates with
	Service *string `pulumi:"service"`
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes *int `pulumi:"serviceRefreshRateInMinutes"`
}

type CloudIntegrationNewRelicState struct {
	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags pulumi.StringMapInput
	// NewRelic REST api key
	ApiKey pulumi.StringPtrInput
	// A regular expression that an application name must match (case-insensitively) iun order to collect metrics
	AppFilterRegex pulumi.StringPtrInput
	// Forces this resource to save, even if errors are present
	ForceSave pulumi.BoolPtrInput
	// A regular expression that a host name must match (case-insensitively) in order to collect metrics
	HostFilterRegex pulumi.StringPtrInput
	// See Metric Filter
	MetricFilters CloudIntegrationNewRelicMetricFilterArrayInput
	// The human-readable name of this integration
	Name pulumi.StringPtrInput
	// A value denoting which cloud service this service integrates with
	Service pulumi.StringPtrInput
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes pulumi.IntPtrInput
}

func (CloudIntegrationNewRelicState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudIntegrationNewRelicState)(nil)).Elem()
}

type cloudIntegrationNewRelicArgs struct {
	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags map[string]string `pulumi:"additionalTags"`
	// NewRelic REST api key
	ApiKey string `pulumi:"apiKey"`
	// A regular expression that an application name must match (case-insensitively) iun order to collect metrics
	AppFilterRegex *string `pulumi:"appFilterRegex"`
	// Forces this resource to save, even if errors are present
	ForceSave *bool `pulumi:"forceSave"`
	// A regular expression that a host name must match (case-insensitively) in order to collect metrics
	HostFilterRegex *string `pulumi:"hostFilterRegex"`
	// See Metric Filter
	MetricFilters []CloudIntegrationNewRelicMetricFilter `pulumi:"metricFilters"`
	// The human-readable name of this integration
	Name *string `pulumi:"name"`
	// A value denoting which cloud service this service integrates with
	Service string `pulumi:"service"`
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes *int `pulumi:"serviceRefreshRateInMinutes"`
}

// The set of arguments for constructing a CloudIntegrationNewRelic resource.
type CloudIntegrationNewRelicArgs struct {
	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags pulumi.StringMapInput
	// NewRelic REST api key
	ApiKey pulumi.StringInput
	// A regular expression that an application name must match (case-insensitively) iun order to collect metrics
	AppFilterRegex pulumi.StringPtrInput
	// Forces this resource to save, even if errors are present
	ForceSave pulumi.BoolPtrInput
	// A regular expression that a host name must match (case-insensitively) in order to collect metrics
	HostFilterRegex pulumi.StringPtrInput
	// See Metric Filter
	MetricFilters CloudIntegrationNewRelicMetricFilterArrayInput
	// The human-readable name of this integration
	Name pulumi.StringPtrInput
	// A value denoting which cloud service this service integrates with
	Service pulumi.StringInput
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes pulumi.IntPtrInput
}

func (CloudIntegrationNewRelicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudIntegrationNewRelicArgs)(nil)).Elem()
}

type CloudIntegrationNewRelicInput interface {
	pulumi.Input

	ToCloudIntegrationNewRelicOutput() CloudIntegrationNewRelicOutput
	ToCloudIntegrationNewRelicOutputWithContext(ctx context.Context) CloudIntegrationNewRelicOutput
}

func (CloudIntegrationNewRelic) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudIntegrationNewRelic)(nil)).Elem()
}

func (i CloudIntegrationNewRelic) ToCloudIntegrationNewRelicOutput() CloudIntegrationNewRelicOutput {
	return i.ToCloudIntegrationNewRelicOutputWithContext(context.Background())
}

func (i CloudIntegrationNewRelic) ToCloudIntegrationNewRelicOutputWithContext(ctx context.Context) CloudIntegrationNewRelicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudIntegrationNewRelicOutput)
}

type CloudIntegrationNewRelicOutput struct {
	*pulumi.OutputState
}

func (CloudIntegrationNewRelicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudIntegrationNewRelicOutput)(nil)).Elem()
}

func (o CloudIntegrationNewRelicOutput) ToCloudIntegrationNewRelicOutput() CloudIntegrationNewRelicOutput {
	return o
}

func (o CloudIntegrationNewRelicOutput) ToCloudIntegrationNewRelicOutputWithContext(ctx context.Context) CloudIntegrationNewRelicOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CloudIntegrationNewRelicOutput{})
}
