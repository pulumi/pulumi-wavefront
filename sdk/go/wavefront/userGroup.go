// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront User Group Resource. This allows user groups to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewUserGroup(ctx, "basic", &wavefront.UserGroupArgs{
// 			Description: pulumi.String("Basic User Group for Unit Tests"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User Groups can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import wavefront:index/userGroup:UserGroup some_group a411c16b-3cf7-4f03-bf11-8ca05aab898d
// ```
type UserGroup struct {
	pulumi.CustomResourceState

	// A short description of the user group
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the user group
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewUserGroup registers a new resource with the given unique name, arguments, and options.
func NewUserGroup(ctx *pulumi.Context,
	name string, args *UserGroupArgs, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	var resource UserGroup
	err := ctx.RegisterResource("wavefront:index/userGroup:UserGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroup gets an existing UserGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupState, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	var resource UserGroup
	err := ctx.ReadResource("wavefront:index/userGroup:UserGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroup resources.
type userGroupState struct {
	// A short description of the user group
	Description *string `pulumi:"description"`
	// The name of the user group
	Name *string `pulumi:"name"`
}

type UserGroupState struct {
	// A short description of the user group
	Description pulumi.StringPtrInput
	// The name of the user group
	Name pulumi.StringPtrInput
}

func (UserGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupState)(nil)).Elem()
}

type userGroupArgs struct {
	// A short description of the user group
	Description string `pulumi:"description"`
	// The name of the user group
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a UserGroup resource.
type UserGroupArgs struct {
	// A short description of the user group
	Description pulumi.StringInput
	// The name of the user group
	Name pulumi.StringPtrInput
}

func (UserGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupArgs)(nil)).Elem()
}

type UserGroupInput interface {
	pulumi.Input

	ToUserGroupOutput() UserGroupOutput
	ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput
}

func (UserGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroup)(nil)).Elem()
}

func (i UserGroup) ToUserGroupOutput() UserGroupOutput {
	return i.ToUserGroupOutputWithContext(context.Background())
}

func (i UserGroup) ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupOutput)
}

type UserGroupOutput struct {
	*pulumi.OutputState
}

func (UserGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupOutput)(nil)).Elem()
}

func (o UserGroupOutput) ToUserGroupOutput() UserGroupOutput {
	return o
}

func (o UserGroupOutput) ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UserGroupOutput{})
}
