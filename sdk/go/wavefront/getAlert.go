// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a Wavefront alert by its ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Get the information about the alert.
//			_, err := wavefront.LookupAlert(ctx, &wavefront.LookupAlertArgs{
//				Id: "alert-id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAlert(ctx *pulumi.Context, args *LookupAlertArgs, opts ...pulumi.InvokeOption) (*LookupAlertResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAlertResult
	err := ctx.Invoke("wavefront:index/getAlert:getAlert", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlert.
type LookupAlertArgs struct {
	// The ID associated with the alert data to be fetched.
	Id string `pulumi:"id"`
	// A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
	Targets map[string]string `pulumi:"targets"`
}

// A collection of values returned by getAlert.
type LookupAlertResult struct {
	// User-supplied additional explanatory information about this alert.
	AdditionalInformation string `pulumi:"additionalInformation"`
	// A set of user-supplied dashboard and parameters to create dashboard links for triaging alerts.
	AlertTriageDashboards []GetAlertAlertTriageDashboard `pulumi:"alertTriageDashboards"`
	// The type of alert in Wavefront.
	AlertType string `pulumi:"alertType"`
	// A list of users or groups that can modify the alert.
	CanModifies []string `pulumi:"canModifies"`
	// A list of users or groups that can view the alert.
	CanViews []string `pulumi:"canViews"`
	// A Wavefront query that is evaluated at regular intervals (default is 1 minute). The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes.
	Condition string `pulumi:"condition"`
	// A map of severity to condition for which this alert will trigger.
	Conditions map[string]string `pulumi:"conditions"`
	// A second query the results of which are displayed in the alert user interface instead of the condition query.
	DisplayExpression string `pulumi:"displayExpression"`
	// A Boolean flag to enable real-time evaluation.
	EvaluateRealtimeData bool `pulumi:"evaluateRealtimeData"`
	// A list of failing host label pairs.
	FailingHostLabelPairs []GetAlertFailingHostLabelPair `pulumi:"failingHostLabelPairs"`
	// The ID of the alert in Wavefront.
	Id string `pulumi:"id"`
	// A list of in maintenance host label pairs.
	InMaintenanceHostLabelPairs []GetAlertInMaintenanceHostLabelPair `pulumi:"inMaintenanceHostLabelPairs"`
	// A Boolean flag indicating whether to include obsolete metrics or not.
	IncludeObsoleteMetrics bool `pulumi:"includeObsoleteMetrics"`
	// The number of consecutive minutes that a series matching the condition query must evaluate to "true" (non-zero value) before the alert fires.
	Minutes int `pulumi:"minutes"`
	// The name of the alert as it is displayed in Wavefront.
	Name string `pulumi:"name"`
	// How often to re-trigger a continually failing alert.
	NotificationResendFrequencyMinutes int `pulumi:"notificationResendFrequencyMinutes"`
	// The specified query is executed every `processRateMinutes` minutes.
	ProcessRateMinutes int `pulumi:"processRateMinutes"`
	// The number of consecutive minutes that a firing series matching the condition query must evaluate to "false" (zero value) before the alert resolves.
	ResolveAfterMinutes int `pulumi:"resolveAfterMinutes"`
	// A list of user-supplied runbook links for this alert.
	RunbookLinks []string `pulumi:"runbookLinks"`
	// The severity of the alert.
	Severity      string   `pulumi:"severity"`
	SeverityLists []string `pulumi:"severityLists"`
	// The status of the alert.
	Statuses []string `pulumi:"statuses"`
	// A set of tags assigned to the alert.
	Tags []string `pulumi:"tags"`
	// An email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes.
	Target string `pulumi:"target"`
	// A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
	Targets map[string]string `pulumi:"targets"`
}

func LookupAlertOutput(ctx *pulumi.Context, args LookupAlertOutputArgs, opts ...pulumi.InvokeOption) LookupAlertResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAlertResultOutput, error) {
			args := v.(LookupAlertArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("wavefront:index/getAlert:getAlert", args, LookupAlertResultOutput{}, options).(LookupAlertResultOutput), nil
		}).(LookupAlertResultOutput)
}

// A collection of arguments for invoking getAlert.
type LookupAlertOutputArgs struct {
	// The ID associated with the alert data to be fetched.
	Id pulumi.StringInput `pulumi:"id"`
	// A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
	Targets pulumi.StringMapInput `pulumi:"targets"`
}

func (LookupAlertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertArgs)(nil)).Elem()
}

// A collection of values returned by getAlert.
type LookupAlertResultOutput struct{ *pulumi.OutputState }

func (LookupAlertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertResult)(nil)).Elem()
}

func (o LookupAlertResultOutput) ToLookupAlertResultOutput() LookupAlertResultOutput {
	return o
}

func (o LookupAlertResultOutput) ToLookupAlertResultOutputWithContext(ctx context.Context) LookupAlertResultOutput {
	return o
}

// User-supplied additional explanatory information about this alert.
func (o LookupAlertResultOutput) AdditionalInformation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertResult) string { return v.AdditionalInformation }).(pulumi.StringOutput)
}

// A set of user-supplied dashboard and parameters to create dashboard links for triaging alerts.
func (o LookupAlertResultOutput) AlertTriageDashboards() GetAlertAlertTriageDashboardArrayOutput {
	return o.ApplyT(func(v LookupAlertResult) []GetAlertAlertTriageDashboard { return v.AlertTriageDashboards }).(GetAlertAlertTriageDashboardArrayOutput)
}

// The type of alert in Wavefront.
func (o LookupAlertResultOutput) AlertType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertResult) string { return v.AlertType }).(pulumi.StringOutput)
}

// A list of users or groups that can modify the alert.
func (o LookupAlertResultOutput) CanModifies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlertResult) []string { return v.CanModifies }).(pulumi.StringArrayOutput)
}

// A list of users or groups that can view the alert.
func (o LookupAlertResultOutput) CanViews() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlertResult) []string { return v.CanViews }).(pulumi.StringArrayOutput)
}

// A Wavefront query that is evaluated at regular intervals (default is 1 minute). The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes.
func (o LookupAlertResultOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertResult) string { return v.Condition }).(pulumi.StringOutput)
}

// A map of severity to condition for which this alert will trigger.
func (o LookupAlertResultOutput) Conditions() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAlertResult) map[string]string { return v.Conditions }).(pulumi.StringMapOutput)
}

// A second query the results of which are displayed in the alert user interface instead of the condition query.
func (o LookupAlertResultOutput) DisplayExpression() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertResult) string { return v.DisplayExpression }).(pulumi.StringOutput)
}

// A Boolean flag to enable real-time evaluation.
func (o LookupAlertResultOutput) EvaluateRealtimeData() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAlertResult) bool { return v.EvaluateRealtimeData }).(pulumi.BoolOutput)
}

// A list of failing host label pairs.
func (o LookupAlertResultOutput) FailingHostLabelPairs() GetAlertFailingHostLabelPairArrayOutput {
	return o.ApplyT(func(v LookupAlertResult) []GetAlertFailingHostLabelPair { return v.FailingHostLabelPairs }).(GetAlertFailingHostLabelPairArrayOutput)
}

// The ID of the alert in Wavefront.
func (o LookupAlertResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of in maintenance host label pairs.
func (o LookupAlertResultOutput) InMaintenanceHostLabelPairs() GetAlertInMaintenanceHostLabelPairArrayOutput {
	return o.ApplyT(func(v LookupAlertResult) []GetAlertInMaintenanceHostLabelPair { return v.InMaintenanceHostLabelPairs }).(GetAlertInMaintenanceHostLabelPairArrayOutput)
}

// A Boolean flag indicating whether to include obsolete metrics or not.
func (o LookupAlertResultOutput) IncludeObsoleteMetrics() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAlertResult) bool { return v.IncludeObsoleteMetrics }).(pulumi.BoolOutput)
}

// The number of consecutive minutes that a series matching the condition query must evaluate to "true" (non-zero value) before the alert fires.
func (o LookupAlertResultOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAlertResult) int { return v.Minutes }).(pulumi.IntOutput)
}

// The name of the alert as it is displayed in Wavefront.
func (o LookupAlertResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertResult) string { return v.Name }).(pulumi.StringOutput)
}

// How often to re-trigger a continually failing alert.
func (o LookupAlertResultOutput) NotificationResendFrequencyMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAlertResult) int { return v.NotificationResendFrequencyMinutes }).(pulumi.IntOutput)
}

// The specified query is executed every `processRateMinutes` minutes.
func (o LookupAlertResultOutput) ProcessRateMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAlertResult) int { return v.ProcessRateMinutes }).(pulumi.IntOutput)
}

// The number of consecutive minutes that a firing series matching the condition query must evaluate to "false" (zero value) before the alert resolves.
func (o LookupAlertResultOutput) ResolveAfterMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAlertResult) int { return v.ResolveAfterMinutes }).(pulumi.IntOutput)
}

// A list of user-supplied runbook links for this alert.
func (o LookupAlertResultOutput) RunbookLinks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlertResult) []string { return v.RunbookLinks }).(pulumi.StringArrayOutput)
}

// The severity of the alert.
func (o LookupAlertResultOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertResult) string { return v.Severity }).(pulumi.StringOutput)
}

func (o LookupAlertResultOutput) SeverityLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlertResult) []string { return v.SeverityLists }).(pulumi.StringArrayOutput)
}

// The status of the alert.
func (o LookupAlertResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlertResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// A set of tags assigned to the alert.
func (o LookupAlertResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlertResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// An email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes.
func (o LookupAlertResultOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertResult) string { return v.Target }).(pulumi.StringOutput)
}

// A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
func (o LookupAlertResultOutput) Targets() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAlertResult) map[string]string { return v.Targets }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlertResultOutput{})
}
