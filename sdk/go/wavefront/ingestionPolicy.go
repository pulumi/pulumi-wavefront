// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront Ingestion Policy Resource. This allows ingestion policies to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewIngestionPolicy(ctx, "basic", &wavefront.IngestionPolicyArgs{
// 			Description: pulumi.String("An ingestion policy for testing"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ingestion policies can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import wavefront:index/ingestionPolicy:IngestionPolicy basic test_ingestion-1611946841064
// ```
type IngestionPolicy struct {
	pulumi.CustomResourceState

	// The description of the ingestion policy
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the ingestion policy
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIngestionPolicy registers a new resource with the given unique name, arguments, and options.
func NewIngestionPolicy(ctx *pulumi.Context,
	name string, args *IngestionPolicyArgs, opts ...pulumi.ResourceOption) (*IngestionPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	var resource IngestionPolicy
	err := ctx.RegisterResource("wavefront:index/ingestionPolicy:IngestionPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngestionPolicy gets an existing IngestionPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngestionPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngestionPolicyState, opts ...pulumi.ResourceOption) (*IngestionPolicy, error) {
	var resource IngestionPolicy
	err := ctx.ReadResource("wavefront:index/ingestionPolicy:IngestionPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IngestionPolicy resources.
type ingestionPolicyState struct {
	// The description of the ingestion policy
	Description *string `pulumi:"description"`
	// The name of the ingestion policy
	Name *string `pulumi:"name"`
}

type IngestionPolicyState struct {
	// The description of the ingestion policy
	Description pulumi.StringPtrInput
	// The name of the ingestion policy
	Name pulumi.StringPtrInput
}

func (IngestionPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestionPolicyState)(nil)).Elem()
}

type ingestionPolicyArgs struct {
	// The description of the ingestion policy
	Description string `pulumi:"description"`
	// The name of the ingestion policy
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IngestionPolicy resource.
type IngestionPolicyArgs struct {
	// The description of the ingestion policy
	Description pulumi.StringInput
	// The name of the ingestion policy
	Name pulumi.StringPtrInput
}

func (IngestionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestionPolicyArgs)(nil)).Elem()
}

type IngestionPolicyInput interface {
	pulumi.Input

	ToIngestionPolicyOutput() IngestionPolicyOutput
	ToIngestionPolicyOutputWithContext(ctx context.Context) IngestionPolicyOutput
}

func (*IngestionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*IngestionPolicy)(nil))
}

func (i *IngestionPolicy) ToIngestionPolicyOutput() IngestionPolicyOutput {
	return i.ToIngestionPolicyOutputWithContext(context.Background())
}

func (i *IngestionPolicy) ToIngestionPolicyOutputWithContext(ctx context.Context) IngestionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestionPolicyOutput)
}

type IngestionPolicyOutput struct {
	*pulumi.OutputState
}

func (IngestionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngestionPolicy)(nil))
}

func (o IngestionPolicyOutput) ToIngestionPolicyOutput() IngestionPolicyOutput {
	return o
}

func (o IngestionPolicyOutput) ToIngestionPolicyOutputWithContext(ctx context.Context) IngestionPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IngestionPolicyOutput{})
}
