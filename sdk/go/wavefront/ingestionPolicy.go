// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront Ingestion Policy Resource. This allows ingestion policies to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewIngestionPolicy(ctx, "basic", &wavefront.IngestionPolicyArgs{
// 			Description: pulumi.String("An ingestion policy for testing"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ingestion policies can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import wavefront:index/ingestionPolicy:IngestionPolicy basic test_ingestion-1611946841064
// ```
type IngestionPolicy struct {
	pulumi.CustomResourceState

	// The description of the ingestion policy
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the ingestion policy
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIngestionPolicy registers a new resource with the given unique name, arguments, and options.
func NewIngestionPolicy(ctx *pulumi.Context,
	name string, args *IngestionPolicyArgs, opts ...pulumi.ResourceOption) (*IngestionPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	var resource IngestionPolicy
	err := ctx.RegisterResource("wavefront:index/ingestionPolicy:IngestionPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngestionPolicy gets an existing IngestionPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngestionPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngestionPolicyState, opts ...pulumi.ResourceOption) (*IngestionPolicy, error) {
	var resource IngestionPolicy
	err := ctx.ReadResource("wavefront:index/ingestionPolicy:IngestionPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IngestionPolicy resources.
type ingestionPolicyState struct {
	// The description of the ingestion policy
	Description *string `pulumi:"description"`
	// The name of the ingestion policy
	Name *string `pulumi:"name"`
}

type IngestionPolicyState struct {
	// The description of the ingestion policy
	Description pulumi.StringPtrInput
	// The name of the ingestion policy
	Name pulumi.StringPtrInput
}

func (IngestionPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestionPolicyState)(nil)).Elem()
}

type ingestionPolicyArgs struct {
	// The description of the ingestion policy
	Description string `pulumi:"description"`
	// The name of the ingestion policy
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IngestionPolicy resource.
type IngestionPolicyArgs struct {
	// The description of the ingestion policy
	Description pulumi.StringInput
	// The name of the ingestion policy
	Name pulumi.StringPtrInput
}

func (IngestionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestionPolicyArgs)(nil)).Elem()
}

type IngestionPolicyInput interface {
	pulumi.Input

	ToIngestionPolicyOutput() IngestionPolicyOutput
	ToIngestionPolicyOutputWithContext(ctx context.Context) IngestionPolicyOutput
}

func (*IngestionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*IngestionPolicy)(nil))
}

func (i *IngestionPolicy) ToIngestionPolicyOutput() IngestionPolicyOutput {
	return i.ToIngestionPolicyOutputWithContext(context.Background())
}

func (i *IngestionPolicy) ToIngestionPolicyOutputWithContext(ctx context.Context) IngestionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestionPolicyOutput)
}

func (i *IngestionPolicy) ToIngestionPolicyPtrOutput() IngestionPolicyPtrOutput {
	return i.ToIngestionPolicyPtrOutputWithContext(context.Background())
}

func (i *IngestionPolicy) ToIngestionPolicyPtrOutputWithContext(ctx context.Context) IngestionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestionPolicyPtrOutput)
}

type IngestionPolicyPtrInput interface {
	pulumi.Input

	ToIngestionPolicyPtrOutput() IngestionPolicyPtrOutput
	ToIngestionPolicyPtrOutputWithContext(ctx context.Context) IngestionPolicyPtrOutput
}

type ingestionPolicyPtrType IngestionPolicyArgs

func (*ingestionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngestionPolicy)(nil))
}

func (i *ingestionPolicyPtrType) ToIngestionPolicyPtrOutput() IngestionPolicyPtrOutput {
	return i.ToIngestionPolicyPtrOutputWithContext(context.Background())
}

func (i *ingestionPolicyPtrType) ToIngestionPolicyPtrOutputWithContext(ctx context.Context) IngestionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestionPolicyPtrOutput)
}

// IngestionPolicyArrayInput is an input type that accepts IngestionPolicyArray and IngestionPolicyArrayOutput values.
// You can construct a concrete instance of `IngestionPolicyArrayInput` via:
//
//          IngestionPolicyArray{ IngestionPolicyArgs{...} }
type IngestionPolicyArrayInput interface {
	pulumi.Input

	ToIngestionPolicyArrayOutput() IngestionPolicyArrayOutput
	ToIngestionPolicyArrayOutputWithContext(context.Context) IngestionPolicyArrayOutput
}

type IngestionPolicyArray []IngestionPolicyInput

func (IngestionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*IngestionPolicy)(nil))
}

func (i IngestionPolicyArray) ToIngestionPolicyArrayOutput() IngestionPolicyArrayOutput {
	return i.ToIngestionPolicyArrayOutputWithContext(context.Background())
}

func (i IngestionPolicyArray) ToIngestionPolicyArrayOutputWithContext(ctx context.Context) IngestionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestionPolicyArrayOutput)
}

// IngestionPolicyMapInput is an input type that accepts IngestionPolicyMap and IngestionPolicyMapOutput values.
// You can construct a concrete instance of `IngestionPolicyMapInput` via:
//
//          IngestionPolicyMap{ "key": IngestionPolicyArgs{...} }
type IngestionPolicyMapInput interface {
	pulumi.Input

	ToIngestionPolicyMapOutput() IngestionPolicyMapOutput
	ToIngestionPolicyMapOutputWithContext(context.Context) IngestionPolicyMapOutput
}

type IngestionPolicyMap map[string]IngestionPolicyInput

func (IngestionPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*IngestionPolicy)(nil))
}

func (i IngestionPolicyMap) ToIngestionPolicyMapOutput() IngestionPolicyMapOutput {
	return i.ToIngestionPolicyMapOutputWithContext(context.Background())
}

func (i IngestionPolicyMap) ToIngestionPolicyMapOutputWithContext(ctx context.Context) IngestionPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestionPolicyMapOutput)
}

type IngestionPolicyOutput struct {
	*pulumi.OutputState
}

func (IngestionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngestionPolicy)(nil))
}

func (o IngestionPolicyOutput) ToIngestionPolicyOutput() IngestionPolicyOutput {
	return o
}

func (o IngestionPolicyOutput) ToIngestionPolicyOutputWithContext(ctx context.Context) IngestionPolicyOutput {
	return o
}

func (o IngestionPolicyOutput) ToIngestionPolicyPtrOutput() IngestionPolicyPtrOutput {
	return o.ToIngestionPolicyPtrOutputWithContext(context.Background())
}

func (o IngestionPolicyOutput) ToIngestionPolicyPtrOutputWithContext(ctx context.Context) IngestionPolicyPtrOutput {
	return o.ApplyT(func(v IngestionPolicy) *IngestionPolicy {
		return &v
	}).(IngestionPolicyPtrOutput)
}

type IngestionPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (IngestionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngestionPolicy)(nil))
}

func (o IngestionPolicyPtrOutput) ToIngestionPolicyPtrOutput() IngestionPolicyPtrOutput {
	return o
}

func (o IngestionPolicyPtrOutput) ToIngestionPolicyPtrOutputWithContext(ctx context.Context) IngestionPolicyPtrOutput {
	return o
}

type IngestionPolicyArrayOutput struct{ *pulumi.OutputState }

func (IngestionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngestionPolicy)(nil))
}

func (o IngestionPolicyArrayOutput) ToIngestionPolicyArrayOutput() IngestionPolicyArrayOutput {
	return o
}

func (o IngestionPolicyArrayOutput) ToIngestionPolicyArrayOutputWithContext(ctx context.Context) IngestionPolicyArrayOutput {
	return o
}

func (o IngestionPolicyArrayOutput) Index(i pulumi.IntInput) IngestionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngestionPolicy {
		return vs[0].([]IngestionPolicy)[vs[1].(int)]
	}).(IngestionPolicyOutput)
}

type IngestionPolicyMapOutput struct{ *pulumi.OutputState }

func (IngestionPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IngestionPolicy)(nil))
}

func (o IngestionPolicyMapOutput) ToIngestionPolicyMapOutput() IngestionPolicyMapOutput {
	return o
}

func (o IngestionPolicyMapOutput) ToIngestionPolicyMapOutputWithContext(ctx context.Context) IngestionPolicyMapOutput {
	return o
}

func (o IngestionPolicyMapOutput) MapIndex(k pulumi.StringInput) IngestionPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IngestionPolicy {
		return vs[0].(map[string]IngestionPolicy)[vs[1].(string)]
	}).(IngestionPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(IngestionPolicyOutput{})
	pulumi.RegisterOutputType(IngestionPolicyPtrOutput{})
	pulumi.RegisterOutputType(IngestionPolicyArrayOutput{})
	pulumi.RegisterOutputType(IngestionPolicyMapOutput{})
}
