// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront Derived Metric Resource. This allows derived metrics to be created,
// updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewDerivedMetric(ctx, "derived", &wavefront.DerivedMetricArgs{
// 			Minutes: pulumi.Int(5),
// 			Query:   pulumi.String("aliasMetric(5, \"some.metric\")"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Derived Metrics can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import wavefront:index/derivedMetric:DerivedMetric derived_metric 1577102900578
// ```
type DerivedMetric struct {
	pulumi.CustomResourceState

	// User-supplied additional explanatory information for the derived metric
	AdditionalInformation pulumi.StringPtrOutput `pulumi:"additionalInformation"`
	// How frequently the query generating the derived metric is run
	Minutes pulumi.IntOutput `pulumi:"minutes"`
	// The name of the Derived Metric in Wavefront
	Name pulumi.StringOutput `pulumi:"name"`
	// A Wavefront query that is evaluated at regular intervals (default `1m`)
	Query pulumi.StringOutput `pulumi:"query"`
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewDerivedMetric registers a new resource with the given unique name, arguments, and options.
func NewDerivedMetric(ctx *pulumi.Context,
	name string, args *DerivedMetricArgs, opts ...pulumi.ResourceOption) (*DerivedMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Minutes == nil {
		return nil, errors.New("invalid value for required argument 'Minutes'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	var resource DerivedMetric
	err := ctx.RegisterResource("wavefront:index/derivedMetric:DerivedMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDerivedMetric gets an existing DerivedMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDerivedMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DerivedMetricState, opts ...pulumi.ResourceOption) (*DerivedMetric, error) {
	var resource DerivedMetric
	err := ctx.ReadResource("wavefront:index/derivedMetric:DerivedMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DerivedMetric resources.
type derivedMetricState struct {
	// User-supplied additional explanatory information for the derived metric
	AdditionalInformation *string `pulumi:"additionalInformation"`
	// How frequently the query generating the derived metric is run
	Minutes *int `pulumi:"minutes"`
	// The name of the Derived Metric in Wavefront
	Name *string `pulumi:"name"`
	// A Wavefront query that is evaluated at regular intervals (default `1m`)
	Query *string `pulumi:"query"`
	// A set of tags to assign to this resource.
	Tags []string `pulumi:"tags"`
}

type DerivedMetricState struct {
	// User-supplied additional explanatory information for the derived metric
	AdditionalInformation pulumi.StringPtrInput
	// How frequently the query generating the derived metric is run
	Minutes pulumi.IntPtrInput
	// The name of the Derived Metric in Wavefront
	Name pulumi.StringPtrInput
	// A Wavefront query that is evaluated at regular intervals (default `1m`)
	Query pulumi.StringPtrInput
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayInput
}

func (DerivedMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*derivedMetricState)(nil)).Elem()
}

type derivedMetricArgs struct {
	// User-supplied additional explanatory information for the derived metric
	AdditionalInformation *string `pulumi:"additionalInformation"`
	// How frequently the query generating the derived metric is run
	Minutes int `pulumi:"minutes"`
	// The name of the Derived Metric in Wavefront
	Name *string `pulumi:"name"`
	// A Wavefront query that is evaluated at regular intervals (default `1m`)
	Query string `pulumi:"query"`
	// A set of tags to assign to this resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a DerivedMetric resource.
type DerivedMetricArgs struct {
	// User-supplied additional explanatory information for the derived metric
	AdditionalInformation pulumi.StringPtrInput
	// How frequently the query generating the derived metric is run
	Minutes pulumi.IntInput
	// The name of the Derived Metric in Wavefront
	Name pulumi.StringPtrInput
	// A Wavefront query that is evaluated at regular intervals (default `1m`)
	Query pulumi.StringInput
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayInput
}

func (DerivedMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*derivedMetricArgs)(nil)).Elem()
}

type DerivedMetricInput interface {
	pulumi.Input

	ToDerivedMetricOutput() DerivedMetricOutput
	ToDerivedMetricOutputWithContext(ctx context.Context) DerivedMetricOutput
}

func (*DerivedMetric) ElementType() reflect.Type {
	return reflect.TypeOf((*DerivedMetric)(nil))
}

func (i *DerivedMetric) ToDerivedMetricOutput() DerivedMetricOutput {
	return i.ToDerivedMetricOutputWithContext(context.Background())
}

func (i *DerivedMetric) ToDerivedMetricOutputWithContext(ctx context.Context) DerivedMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedMetricOutput)
}

type DerivedMetricOutput struct {
	*pulumi.OutputState
}

func (DerivedMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DerivedMetric)(nil))
}

func (o DerivedMetricOutput) ToDerivedMetricOutput() DerivedMetricOutput {
	return o
}

func (o DerivedMetricOutput) ToDerivedMetricOutputWithContext(ctx context.Context) DerivedMetricOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DerivedMetricOutput{})
}
