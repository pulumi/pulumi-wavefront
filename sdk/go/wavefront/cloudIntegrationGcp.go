// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Wavefront Cloud Integration for Google Cloud Platform. This allows Google Cloud Platform cloud
// integrations to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wavefront.NewCloudIntegrationGcp(ctx, "gcp", &wavefront.CloudIntegrationGcpArgs{
//				JsonKey:   pulumi.String("{...your gcp key ...}\n\n"),
//				ProjectId: pulumi.String("example-gcp-project"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GCP Cloud Integrations can be imported by using the `id`, e.g.:
//
// ```sh
//
//	$ pulumi import wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp gcp a411c16b-3cf7-4f03-bf11-8ca05aab898d
//
// ```
type CloudIntegrationGcp struct {
	pulumi.CustomResourceState

	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags pulumi.StringMapOutput `pulumi:"additionalTags"`
	// A list of Google Cloud Platform (GCP) services. Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, and `VPN`.
	Categories pulumi.StringArrayOutput `pulumi:"categories"`
	// Forces this resource to save, even if errors are present.
	ForceSave pulumi.BoolPtrOutput `pulumi:"forceSave"`
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must have at least Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey pulumi.StringOutput `pulumi:"jsonKey"`
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested.
	MetricFilterRegex pulumi.StringPtrOutput `pulumi:"metricFilterRegex"`
	// The human-readable name of this integration.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Google Cloud Platform (GCP) Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// A value denoting which cloud service this service integrates with.
	Service pulumi.StringOutput `pulumi:"service"`
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes pulumi.IntPtrOutput `pulumi:"serviceRefreshRateInMinutes"`
}

// NewCloudIntegrationGcp registers a new resource with the given unique name, arguments, and options.
func NewCloudIntegrationGcp(ctx *pulumi.Context,
	name string, args *CloudIntegrationGcpArgs, opts ...pulumi.ResourceOption) (*CloudIntegrationGcp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JsonKey == nil {
		return nil, errors.New("invalid value for required argument 'JsonKey'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.JsonKey != nil {
		args.JsonKey = pulumi.ToSecret(args.JsonKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"jsonKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudIntegrationGcp
	err := ctx.RegisterResource("wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudIntegrationGcp gets an existing CloudIntegrationGcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudIntegrationGcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudIntegrationGcpState, opts ...pulumi.ResourceOption) (*CloudIntegrationGcp, error) {
	var resource CloudIntegrationGcp
	err := ctx.ReadResource("wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudIntegrationGcp resources.
type cloudIntegrationGcpState struct {
	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags map[string]string `pulumi:"additionalTags"`
	// A list of Google Cloud Platform (GCP) services. Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, and `VPN`.
	Categories []string `pulumi:"categories"`
	// Forces this resource to save, even if errors are present.
	ForceSave *bool `pulumi:"forceSave"`
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must have at least Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey *string `pulumi:"jsonKey"`
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested.
	MetricFilterRegex *string `pulumi:"metricFilterRegex"`
	// The human-readable name of this integration.
	Name *string `pulumi:"name"`
	// The Google Cloud Platform (GCP) Project ID.
	ProjectId *string `pulumi:"projectId"`
	// A value denoting which cloud service this service integrates with.
	Service *string `pulumi:"service"`
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes *int `pulumi:"serviceRefreshRateInMinutes"`
}

type CloudIntegrationGcpState struct {
	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags pulumi.StringMapInput
	// A list of Google Cloud Platform (GCP) services. Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, and `VPN`.
	Categories pulumi.StringArrayInput
	// Forces this resource to save, even if errors are present.
	ForceSave pulumi.BoolPtrInput
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must have at least Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey pulumi.StringPtrInput
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested.
	MetricFilterRegex pulumi.StringPtrInput
	// The human-readable name of this integration.
	Name pulumi.StringPtrInput
	// The Google Cloud Platform (GCP) Project ID.
	ProjectId pulumi.StringPtrInput
	// A value denoting which cloud service this service integrates with.
	Service pulumi.StringPtrInput
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes pulumi.IntPtrInput
}

func (CloudIntegrationGcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudIntegrationGcpState)(nil)).Elem()
}

type cloudIntegrationGcpArgs struct {
	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags map[string]string `pulumi:"additionalTags"`
	// A list of Google Cloud Platform (GCP) services. Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, and `VPN`.
	Categories []string `pulumi:"categories"`
	// Forces this resource to save, even if errors are present.
	ForceSave *bool `pulumi:"forceSave"`
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must have at least Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey string `pulumi:"jsonKey"`
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested.
	MetricFilterRegex *string `pulumi:"metricFilterRegex"`
	// The human-readable name of this integration.
	Name *string `pulumi:"name"`
	// The Google Cloud Platform (GCP) Project ID.
	ProjectId string `pulumi:"projectId"`
	// A value denoting which cloud service this service integrates with.
	Service string `pulumi:"service"`
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes *int `pulumi:"serviceRefreshRateInMinutes"`
}

// The set of arguments for constructing a CloudIntegrationGcp resource.
type CloudIntegrationGcpArgs struct {
	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags pulumi.StringMapInput
	// A list of Google Cloud Platform (GCP) services. Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, and `VPN`.
	Categories pulumi.StringArrayInput
	// Forces this resource to save, even if errors are present.
	ForceSave pulumi.BoolPtrInput
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must have at least Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey pulumi.StringInput
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested.
	MetricFilterRegex pulumi.StringPtrInput
	// The human-readable name of this integration.
	Name pulumi.StringPtrInput
	// The Google Cloud Platform (GCP) Project ID.
	ProjectId pulumi.StringInput
	// A value denoting which cloud service this service integrates with.
	Service pulumi.StringInput
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes pulumi.IntPtrInput
}

func (CloudIntegrationGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudIntegrationGcpArgs)(nil)).Elem()
}

type CloudIntegrationGcpInput interface {
	pulumi.Input

	ToCloudIntegrationGcpOutput() CloudIntegrationGcpOutput
	ToCloudIntegrationGcpOutputWithContext(ctx context.Context) CloudIntegrationGcpOutput
}

func (*CloudIntegrationGcp) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudIntegrationGcp)(nil)).Elem()
}

func (i *CloudIntegrationGcp) ToCloudIntegrationGcpOutput() CloudIntegrationGcpOutput {
	return i.ToCloudIntegrationGcpOutputWithContext(context.Background())
}

func (i *CloudIntegrationGcp) ToCloudIntegrationGcpOutputWithContext(ctx context.Context) CloudIntegrationGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudIntegrationGcpOutput)
}

func (i *CloudIntegrationGcp) ToOutput(ctx context.Context) pulumix.Output[*CloudIntegrationGcp] {
	return pulumix.Output[*CloudIntegrationGcp]{
		OutputState: i.ToCloudIntegrationGcpOutputWithContext(ctx).OutputState,
	}
}

// CloudIntegrationGcpArrayInput is an input type that accepts CloudIntegrationGcpArray and CloudIntegrationGcpArrayOutput values.
// You can construct a concrete instance of `CloudIntegrationGcpArrayInput` via:
//
//	CloudIntegrationGcpArray{ CloudIntegrationGcpArgs{...} }
type CloudIntegrationGcpArrayInput interface {
	pulumi.Input

	ToCloudIntegrationGcpArrayOutput() CloudIntegrationGcpArrayOutput
	ToCloudIntegrationGcpArrayOutputWithContext(context.Context) CloudIntegrationGcpArrayOutput
}

type CloudIntegrationGcpArray []CloudIntegrationGcpInput

func (CloudIntegrationGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudIntegrationGcp)(nil)).Elem()
}

func (i CloudIntegrationGcpArray) ToCloudIntegrationGcpArrayOutput() CloudIntegrationGcpArrayOutput {
	return i.ToCloudIntegrationGcpArrayOutputWithContext(context.Background())
}

func (i CloudIntegrationGcpArray) ToCloudIntegrationGcpArrayOutputWithContext(ctx context.Context) CloudIntegrationGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudIntegrationGcpArrayOutput)
}

func (i CloudIntegrationGcpArray) ToOutput(ctx context.Context) pulumix.Output[[]*CloudIntegrationGcp] {
	return pulumix.Output[[]*CloudIntegrationGcp]{
		OutputState: i.ToCloudIntegrationGcpArrayOutputWithContext(ctx).OutputState,
	}
}

// CloudIntegrationGcpMapInput is an input type that accepts CloudIntegrationGcpMap and CloudIntegrationGcpMapOutput values.
// You can construct a concrete instance of `CloudIntegrationGcpMapInput` via:
//
//	CloudIntegrationGcpMap{ "key": CloudIntegrationGcpArgs{...} }
type CloudIntegrationGcpMapInput interface {
	pulumi.Input

	ToCloudIntegrationGcpMapOutput() CloudIntegrationGcpMapOutput
	ToCloudIntegrationGcpMapOutputWithContext(context.Context) CloudIntegrationGcpMapOutput
}

type CloudIntegrationGcpMap map[string]CloudIntegrationGcpInput

func (CloudIntegrationGcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudIntegrationGcp)(nil)).Elem()
}

func (i CloudIntegrationGcpMap) ToCloudIntegrationGcpMapOutput() CloudIntegrationGcpMapOutput {
	return i.ToCloudIntegrationGcpMapOutputWithContext(context.Background())
}

func (i CloudIntegrationGcpMap) ToCloudIntegrationGcpMapOutputWithContext(ctx context.Context) CloudIntegrationGcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudIntegrationGcpMapOutput)
}

func (i CloudIntegrationGcpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudIntegrationGcp] {
	return pulumix.Output[map[string]*CloudIntegrationGcp]{
		OutputState: i.ToCloudIntegrationGcpMapOutputWithContext(ctx).OutputState,
	}
}

type CloudIntegrationGcpOutput struct{ *pulumi.OutputState }

func (CloudIntegrationGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudIntegrationGcp)(nil)).Elem()
}

func (o CloudIntegrationGcpOutput) ToCloudIntegrationGcpOutput() CloudIntegrationGcpOutput {
	return o
}

func (o CloudIntegrationGcpOutput) ToCloudIntegrationGcpOutputWithContext(ctx context.Context) CloudIntegrationGcpOutput {
	return o
}

func (o CloudIntegrationGcpOutput) ToOutput(ctx context.Context) pulumix.Output[*CloudIntegrationGcp] {
	return pulumix.Output[*CloudIntegrationGcp]{
		OutputState: o.OutputState,
	}
}

// A list of point tag key-values to add to every point ingested using this integration.
func (o CloudIntegrationGcpOutput) AdditionalTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudIntegrationGcp) pulumi.StringMapOutput { return v.AdditionalTags }).(pulumi.StringMapOutput)
}

// A list of Google Cloud Platform (GCP) services. Valid values are `APPENGINE`,
// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
// `TPU`, and `VPN`.
func (o CloudIntegrationGcpOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudIntegrationGcp) pulumi.StringArrayOutput { return v.Categories }).(pulumi.StringArrayOutput)
}

// Forces this resource to save, even if errors are present.
func (o CloudIntegrationGcpOutput) ForceSave() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudIntegrationGcp) pulumi.BoolPtrOutput { return v.ForceSave }).(pulumi.BoolPtrOutput)
}

// Private key for a Google Cloud Platform (GCP) service account within your project.
// The account must have at least Viewer permissions. This key must be in the JSON format generated by GCP.
func (o CloudIntegrationGcpOutput) JsonKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudIntegrationGcp) pulumi.StringOutput { return v.JsonKey }).(pulumi.StringOutput)
}

// A regular expression that a metric name must match (case-insensitively) in order to be ingested.
func (o CloudIntegrationGcpOutput) MetricFilterRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudIntegrationGcp) pulumi.StringPtrOutput { return v.MetricFilterRegex }).(pulumi.StringPtrOutput)
}

// The human-readable name of this integration.
func (o CloudIntegrationGcpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudIntegrationGcp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Google Cloud Platform (GCP) Project ID.
func (o CloudIntegrationGcpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudIntegrationGcp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// A value denoting which cloud service this service integrates with.
func (o CloudIntegrationGcpOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudIntegrationGcp) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// How often, in minutes, to refresh the service.
func (o CloudIntegrationGcpOutput) ServiceRefreshRateInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudIntegrationGcp) pulumi.IntPtrOutput { return v.ServiceRefreshRateInMinutes }).(pulumi.IntPtrOutput)
}

type CloudIntegrationGcpArrayOutput struct{ *pulumi.OutputState }

func (CloudIntegrationGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudIntegrationGcp)(nil)).Elem()
}

func (o CloudIntegrationGcpArrayOutput) ToCloudIntegrationGcpArrayOutput() CloudIntegrationGcpArrayOutput {
	return o
}

func (o CloudIntegrationGcpArrayOutput) ToCloudIntegrationGcpArrayOutputWithContext(ctx context.Context) CloudIntegrationGcpArrayOutput {
	return o
}

func (o CloudIntegrationGcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CloudIntegrationGcp] {
	return pulumix.Output[[]*CloudIntegrationGcp]{
		OutputState: o.OutputState,
	}
}

func (o CloudIntegrationGcpArrayOutput) Index(i pulumi.IntInput) CloudIntegrationGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudIntegrationGcp {
		return vs[0].([]*CloudIntegrationGcp)[vs[1].(int)]
	}).(CloudIntegrationGcpOutput)
}

type CloudIntegrationGcpMapOutput struct{ *pulumi.OutputState }

func (CloudIntegrationGcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudIntegrationGcp)(nil)).Elem()
}

func (o CloudIntegrationGcpMapOutput) ToCloudIntegrationGcpMapOutput() CloudIntegrationGcpMapOutput {
	return o
}

func (o CloudIntegrationGcpMapOutput) ToCloudIntegrationGcpMapOutputWithContext(ctx context.Context) CloudIntegrationGcpMapOutput {
	return o
}

func (o CloudIntegrationGcpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudIntegrationGcp] {
	return pulumix.Output[map[string]*CloudIntegrationGcp]{
		OutputState: o.OutputState,
	}
}

func (o CloudIntegrationGcpMapOutput) MapIndex(k pulumi.StringInput) CloudIntegrationGcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudIntegrationGcp {
		return vs[0].(map[string]*CloudIntegrationGcp)[vs[1].(string)]
	}).(CloudIntegrationGcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudIntegrationGcpInput)(nil)).Elem(), &CloudIntegrationGcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudIntegrationGcpArrayInput)(nil)).Elem(), CloudIntegrationGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudIntegrationGcpMapInput)(nil)).Elem(), CloudIntegrationGcpMap{})
	pulumi.RegisterOutputType(CloudIntegrationGcpOutput{})
	pulumi.RegisterOutputType(CloudIntegrationGcpArrayOutput{})
	pulumi.RegisterOutputType(CloudIntegrationGcpMapOutput{})
}
