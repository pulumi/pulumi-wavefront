// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront Cloud Integration for GCP. This allows GCP cloud integrations to be created,
// updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewCloudIntegrationGcp(ctx, "gcp", &wavefront.CloudIntegrationGcpArgs{
// 			JsonKey:   pulumi.String(fmt.Sprintf("%v%v", "{...your gcp key ...}\n", "\n")),
// 			ProjectId: pulumi.String("example-gcp-project"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type CloudIntegrationGcp struct {
	pulumi.CustomResourceState

	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags pulumi.StringMapOutput `pulumi:"additionalTags"`
	// A list of Google Cloud Platform (GCP) services.  Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, `VPN`
	Categories pulumi.StringArrayOutput `pulumi:"categories"`
	// Forces this resource to save, even if errors are present
	ForceSave pulumi.BoolPtrOutput `pulumi:"forceSave"`
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey pulumi.StringOutput `pulumi:"jsonKey"`
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	MetricFilterRegex pulumi.StringPtrOutput `pulumi:"metricFilterRegex"`
	// The human-readable name of this integration
	Name pulumi.StringOutput `pulumi:"name"`
	// The Google Cloud Platform (GCP) Project Id
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// A value denoting which cloud service this service integrates with
	Service pulumi.StringOutput `pulumi:"service"`
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes pulumi.IntPtrOutput `pulumi:"serviceRefreshRateInMinutes"`
}

// NewCloudIntegrationGcp registers a new resource with the given unique name, arguments, and options.
func NewCloudIntegrationGcp(ctx *pulumi.Context,
	name string, args *CloudIntegrationGcpArgs, opts ...pulumi.ResourceOption) (*CloudIntegrationGcp, error) {
	if args == nil || args.JsonKey == nil {
		return nil, errors.New("missing required argument 'JsonKey'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.Service == nil {
		return nil, errors.New("missing required argument 'Service'")
	}
	if args == nil {
		args = &CloudIntegrationGcpArgs{}
	}
	var resource CloudIntegrationGcp
	err := ctx.RegisterResource("wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudIntegrationGcp gets an existing CloudIntegrationGcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudIntegrationGcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudIntegrationGcpState, opts ...pulumi.ResourceOption) (*CloudIntegrationGcp, error) {
	var resource CloudIntegrationGcp
	err := ctx.ReadResource("wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudIntegrationGcp resources.
type cloudIntegrationGcpState struct {
	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags map[string]string `pulumi:"additionalTags"`
	// A list of Google Cloud Platform (GCP) services.  Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, `VPN`
	Categories []string `pulumi:"categories"`
	// Forces this resource to save, even if errors are present
	ForceSave *bool `pulumi:"forceSave"`
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey *string `pulumi:"jsonKey"`
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	MetricFilterRegex *string `pulumi:"metricFilterRegex"`
	// The human-readable name of this integration
	Name *string `pulumi:"name"`
	// The Google Cloud Platform (GCP) Project Id
	ProjectId *string `pulumi:"projectId"`
	// A value denoting which cloud service this service integrates with
	Service *string `pulumi:"service"`
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes *int `pulumi:"serviceRefreshRateInMinutes"`
}

type CloudIntegrationGcpState struct {
	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags pulumi.StringMapInput
	// A list of Google Cloud Platform (GCP) services.  Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, `VPN`
	Categories pulumi.StringArrayInput
	// Forces this resource to save, even if errors are present
	ForceSave pulumi.BoolPtrInput
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey pulumi.StringPtrInput
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	MetricFilterRegex pulumi.StringPtrInput
	// The human-readable name of this integration
	Name pulumi.StringPtrInput
	// The Google Cloud Platform (GCP) Project Id
	ProjectId pulumi.StringPtrInput
	// A value denoting which cloud service this service integrates with
	Service pulumi.StringPtrInput
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes pulumi.IntPtrInput
}

func (CloudIntegrationGcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudIntegrationGcpState)(nil)).Elem()
}

type cloudIntegrationGcpArgs struct {
	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags map[string]string `pulumi:"additionalTags"`
	// A list of Google Cloud Platform (GCP) services.  Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, `VPN`
	Categories []string `pulumi:"categories"`
	// Forces this resource to save, even if errors are present
	ForceSave *bool `pulumi:"forceSave"`
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey string `pulumi:"jsonKey"`
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	MetricFilterRegex *string `pulumi:"metricFilterRegex"`
	// The human-readable name of this integration
	Name *string `pulumi:"name"`
	// The Google Cloud Platform (GCP) Project Id
	ProjectId string `pulumi:"projectId"`
	// A value denoting which cloud service this service integrates with
	Service string `pulumi:"service"`
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes *int `pulumi:"serviceRefreshRateInMinutes"`
}

// The set of arguments for constructing a CloudIntegrationGcp resource.
type CloudIntegrationGcpArgs struct {
	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags pulumi.StringMapInput
	// A list of Google Cloud Platform (GCP) services.  Valid values are `APPENGINE`,
	// `BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,
	// `DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,
	// `LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,
	// `TPU`, `VPN`
	Categories pulumi.StringArrayInput
	// Forces this resource to save, even if errors are present
	ForceSave pulumi.BoolPtrInput
	// Private key for a Google Cloud Platform (GCP) service account within your project.
	// The account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.
	JsonKey pulumi.StringInput
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	MetricFilterRegex pulumi.StringPtrInput
	// The human-readable name of this integration
	Name pulumi.StringPtrInput
	// The Google Cloud Platform (GCP) Project Id
	ProjectId pulumi.StringInput
	// A value denoting which cloud service this service integrates with
	Service pulumi.StringInput
	// How often, in minutes, to refresh the service
	ServiceRefreshRateInMinutes pulumi.IntPtrInput
}

func (CloudIntegrationGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudIntegrationGcpArgs)(nil)).Elem()
}
