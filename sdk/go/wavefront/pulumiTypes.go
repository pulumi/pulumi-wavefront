// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AlertTargetRoute struct {
	Filter map[string]string `pulumi:"filter"`
	// The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
	Method string `pulumi:"method"`
	Target string `pulumi:"target"`
}

// AlertTargetRouteInput is an input type that accepts AlertTargetRouteArgs and AlertTargetRouteOutput values.
// You can construct a concrete instance of `AlertTargetRouteInput` via:
//
//          AlertTargetRouteArgs{...}
type AlertTargetRouteInput interface {
	pulumi.Input

	ToAlertTargetRouteOutput() AlertTargetRouteOutput
	ToAlertTargetRouteOutputWithContext(context.Context) AlertTargetRouteOutput
}

type AlertTargetRouteArgs struct {
	Filter pulumi.StringMapInput `pulumi:"filter"`
	// The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
	Method pulumi.StringInput `pulumi:"method"`
	Target pulumi.StringInput `pulumi:"target"`
}

func (AlertTargetRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertTargetRoute)(nil)).Elem()
}

func (i AlertTargetRouteArgs) ToAlertTargetRouteOutput() AlertTargetRouteOutput {
	return i.ToAlertTargetRouteOutputWithContext(context.Background())
}

func (i AlertTargetRouteArgs) ToAlertTargetRouteOutputWithContext(ctx context.Context) AlertTargetRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertTargetRouteOutput)
}

// AlertTargetRouteArrayInput is an input type that accepts AlertTargetRouteArray and AlertTargetRouteArrayOutput values.
// You can construct a concrete instance of `AlertTargetRouteArrayInput` via:
//
//          AlertTargetRouteArray{ AlertTargetRouteArgs{...} }
type AlertTargetRouteArrayInput interface {
	pulumi.Input

	ToAlertTargetRouteArrayOutput() AlertTargetRouteArrayOutput
	ToAlertTargetRouteArrayOutputWithContext(context.Context) AlertTargetRouteArrayOutput
}

type AlertTargetRouteArray []AlertTargetRouteInput

func (AlertTargetRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertTargetRoute)(nil)).Elem()
}

func (i AlertTargetRouteArray) ToAlertTargetRouteArrayOutput() AlertTargetRouteArrayOutput {
	return i.ToAlertTargetRouteArrayOutputWithContext(context.Background())
}

func (i AlertTargetRouteArray) ToAlertTargetRouteArrayOutputWithContext(ctx context.Context) AlertTargetRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertTargetRouteArrayOutput)
}

type AlertTargetRouteOutput struct{ *pulumi.OutputState }

func (AlertTargetRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertTargetRoute)(nil)).Elem()
}

func (o AlertTargetRouteOutput) ToAlertTargetRouteOutput() AlertTargetRouteOutput {
	return o
}

func (o AlertTargetRouteOutput) ToAlertTargetRouteOutputWithContext(ctx context.Context) AlertTargetRouteOutput {
	return o
}

func (o AlertTargetRouteOutput) Filter() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertTargetRoute) map[string]string { return v.Filter }).(pulumi.StringMapOutput)
}

// The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
func (o AlertTargetRouteOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v AlertTargetRoute) string { return v.Method }).(pulumi.StringOutput)
}

func (o AlertTargetRouteOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v AlertTargetRoute) string { return v.Target }).(pulumi.StringOutput)
}

type AlertTargetRouteArrayOutput struct{ *pulumi.OutputState }

func (AlertTargetRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertTargetRoute)(nil)).Elem()
}

func (o AlertTargetRouteArrayOutput) ToAlertTargetRouteArrayOutput() AlertTargetRouteArrayOutput {
	return o
}

func (o AlertTargetRouteArrayOutput) ToAlertTargetRouteArrayOutputWithContext(ctx context.Context) AlertTargetRouteArrayOutput {
	return o
}

func (o AlertTargetRouteArrayOutput) Index(i pulumi.IntInput) AlertTargetRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertTargetRoute {
		return vs[0].([]AlertTargetRoute)[vs[1].(int)]
	}).(AlertTargetRouteOutput)
}

type CloudIntegrationNewRelicMetricFilter struct {
	// The name of a NewRelic App
	AppName string `pulumi:"appName"`
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	MetricFilterRegex string `pulumi:"metricFilterRegex"`
}

// CloudIntegrationNewRelicMetricFilterInput is an input type that accepts CloudIntegrationNewRelicMetricFilterArgs and CloudIntegrationNewRelicMetricFilterOutput values.
// You can construct a concrete instance of `CloudIntegrationNewRelicMetricFilterInput` via:
//
//          CloudIntegrationNewRelicMetricFilterArgs{...}
type CloudIntegrationNewRelicMetricFilterInput interface {
	pulumi.Input

	ToCloudIntegrationNewRelicMetricFilterOutput() CloudIntegrationNewRelicMetricFilterOutput
	ToCloudIntegrationNewRelicMetricFilterOutputWithContext(context.Context) CloudIntegrationNewRelicMetricFilterOutput
}

type CloudIntegrationNewRelicMetricFilterArgs struct {
	// The name of a NewRelic App
	AppName pulumi.StringInput `pulumi:"appName"`
	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	MetricFilterRegex pulumi.StringInput `pulumi:"metricFilterRegex"`
}

func (CloudIntegrationNewRelicMetricFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudIntegrationNewRelicMetricFilter)(nil)).Elem()
}

func (i CloudIntegrationNewRelicMetricFilterArgs) ToCloudIntegrationNewRelicMetricFilterOutput() CloudIntegrationNewRelicMetricFilterOutput {
	return i.ToCloudIntegrationNewRelicMetricFilterOutputWithContext(context.Background())
}

func (i CloudIntegrationNewRelicMetricFilterArgs) ToCloudIntegrationNewRelicMetricFilterOutputWithContext(ctx context.Context) CloudIntegrationNewRelicMetricFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudIntegrationNewRelicMetricFilterOutput)
}

// CloudIntegrationNewRelicMetricFilterArrayInput is an input type that accepts CloudIntegrationNewRelicMetricFilterArray and CloudIntegrationNewRelicMetricFilterArrayOutput values.
// You can construct a concrete instance of `CloudIntegrationNewRelicMetricFilterArrayInput` via:
//
//          CloudIntegrationNewRelicMetricFilterArray{ CloudIntegrationNewRelicMetricFilterArgs{...} }
type CloudIntegrationNewRelicMetricFilterArrayInput interface {
	pulumi.Input

	ToCloudIntegrationNewRelicMetricFilterArrayOutput() CloudIntegrationNewRelicMetricFilterArrayOutput
	ToCloudIntegrationNewRelicMetricFilterArrayOutputWithContext(context.Context) CloudIntegrationNewRelicMetricFilterArrayOutput
}

type CloudIntegrationNewRelicMetricFilterArray []CloudIntegrationNewRelicMetricFilterInput

func (CloudIntegrationNewRelicMetricFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudIntegrationNewRelicMetricFilter)(nil)).Elem()
}

func (i CloudIntegrationNewRelicMetricFilterArray) ToCloudIntegrationNewRelicMetricFilterArrayOutput() CloudIntegrationNewRelicMetricFilterArrayOutput {
	return i.ToCloudIntegrationNewRelicMetricFilterArrayOutputWithContext(context.Background())
}

func (i CloudIntegrationNewRelicMetricFilterArray) ToCloudIntegrationNewRelicMetricFilterArrayOutputWithContext(ctx context.Context) CloudIntegrationNewRelicMetricFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudIntegrationNewRelicMetricFilterArrayOutput)
}

type CloudIntegrationNewRelicMetricFilterOutput struct{ *pulumi.OutputState }

func (CloudIntegrationNewRelicMetricFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudIntegrationNewRelicMetricFilter)(nil)).Elem()
}

func (o CloudIntegrationNewRelicMetricFilterOutput) ToCloudIntegrationNewRelicMetricFilterOutput() CloudIntegrationNewRelicMetricFilterOutput {
	return o
}

func (o CloudIntegrationNewRelicMetricFilterOutput) ToCloudIntegrationNewRelicMetricFilterOutputWithContext(ctx context.Context) CloudIntegrationNewRelicMetricFilterOutput {
	return o
}

// The name of a NewRelic App
func (o CloudIntegrationNewRelicMetricFilterOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v CloudIntegrationNewRelicMetricFilter) string { return v.AppName }).(pulumi.StringOutput)
}

// A regular expression that a metric name must match (case-insensitively) in order to be ingested
func (o CloudIntegrationNewRelicMetricFilterOutput) MetricFilterRegex() pulumi.StringOutput {
	return o.ApplyT(func(v CloudIntegrationNewRelicMetricFilter) string { return v.MetricFilterRegex }).(pulumi.StringOutput)
}

type CloudIntegrationNewRelicMetricFilterArrayOutput struct{ *pulumi.OutputState }

func (CloudIntegrationNewRelicMetricFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudIntegrationNewRelicMetricFilter)(nil)).Elem()
}

func (o CloudIntegrationNewRelicMetricFilterArrayOutput) ToCloudIntegrationNewRelicMetricFilterArrayOutput() CloudIntegrationNewRelicMetricFilterArrayOutput {
	return o
}

func (o CloudIntegrationNewRelicMetricFilterArrayOutput) ToCloudIntegrationNewRelicMetricFilterArrayOutputWithContext(ctx context.Context) CloudIntegrationNewRelicMetricFilterArrayOutput {
	return o
}

func (o CloudIntegrationNewRelicMetricFilterArrayOutput) Index(i pulumi.IntInput) CloudIntegrationNewRelicMetricFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudIntegrationNewRelicMetricFilter {
		return vs[0].([]CloudIntegrationNewRelicMetricFilter)[vs[1].(int)]
	}).(CloudIntegrationNewRelicMetricFilterOutput)
}

type DashboardParameterDetail struct {
	// The default value of the parameter
	DefaultValue string `pulumi:"defaultValue"`
	// For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
	// `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, `MATCHING_SOURCE_TAG`
	DynamicFieldType *string `pulumi:"dynamicFieldType"`
	// If `true` the parameter will only be shown on the edit view of the dashboard
	HideFromView bool `pulumi:"hideFromView"`
	// The label for the parameter
	Label string `pulumi:"label"`
	// The name of the parameters
	Name string `pulumi:"name"`
	// The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`
	ParameterType string `pulumi:"parameterType"`
	// For `DYNAMIC` parameter types, the query to execute to return values
	QueryValue *string `pulumi:"queryValue"`
	// for `TAG_KEY` dynamic field types, the tag key to return
	TagKey *string `pulumi:"tagKey"`
	// A string->string map.  At least one of the keys must match the value of
	// `defaultValue`
	ValuesToReadableStrings map[string]string `pulumi:"valuesToReadableStrings"`
}

// DashboardParameterDetailInput is an input type that accepts DashboardParameterDetailArgs and DashboardParameterDetailOutput values.
// You can construct a concrete instance of `DashboardParameterDetailInput` via:
//
//          DashboardParameterDetailArgs{...}
type DashboardParameterDetailInput interface {
	pulumi.Input

	ToDashboardParameterDetailOutput() DashboardParameterDetailOutput
	ToDashboardParameterDetailOutputWithContext(context.Context) DashboardParameterDetailOutput
}

type DashboardParameterDetailArgs struct {
	// The default value of the parameter
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
	// `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, `MATCHING_SOURCE_TAG`
	DynamicFieldType pulumi.StringPtrInput `pulumi:"dynamicFieldType"`
	// If `true` the parameter will only be shown on the edit view of the dashboard
	HideFromView pulumi.BoolInput `pulumi:"hideFromView"`
	// The label for the parameter
	Label pulumi.StringInput `pulumi:"label"`
	// The name of the parameters
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`
	ParameterType pulumi.StringInput `pulumi:"parameterType"`
	// For `DYNAMIC` parameter types, the query to execute to return values
	QueryValue pulumi.StringPtrInput `pulumi:"queryValue"`
	// for `TAG_KEY` dynamic field types, the tag key to return
	TagKey pulumi.StringPtrInput `pulumi:"tagKey"`
	// A string->string map.  At least one of the keys must match the value of
	// `defaultValue`
	ValuesToReadableStrings pulumi.StringMapInput `pulumi:"valuesToReadableStrings"`
}

func (DashboardParameterDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParameterDetail)(nil)).Elem()
}

func (i DashboardParameterDetailArgs) ToDashboardParameterDetailOutput() DashboardParameterDetailOutput {
	return i.ToDashboardParameterDetailOutputWithContext(context.Background())
}

func (i DashboardParameterDetailArgs) ToDashboardParameterDetailOutputWithContext(ctx context.Context) DashboardParameterDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParameterDetailOutput)
}

// DashboardParameterDetailArrayInput is an input type that accepts DashboardParameterDetailArray and DashboardParameterDetailArrayOutput values.
// You can construct a concrete instance of `DashboardParameterDetailArrayInput` via:
//
//          DashboardParameterDetailArray{ DashboardParameterDetailArgs{...} }
type DashboardParameterDetailArrayInput interface {
	pulumi.Input

	ToDashboardParameterDetailArrayOutput() DashboardParameterDetailArrayOutput
	ToDashboardParameterDetailArrayOutputWithContext(context.Context) DashboardParameterDetailArrayOutput
}

type DashboardParameterDetailArray []DashboardParameterDetailInput

func (DashboardParameterDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParameterDetail)(nil)).Elem()
}

func (i DashboardParameterDetailArray) ToDashboardParameterDetailArrayOutput() DashboardParameterDetailArrayOutput {
	return i.ToDashboardParameterDetailArrayOutputWithContext(context.Background())
}

func (i DashboardParameterDetailArray) ToDashboardParameterDetailArrayOutputWithContext(ctx context.Context) DashboardParameterDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParameterDetailArrayOutput)
}

type DashboardParameterDetailOutput struct{ *pulumi.OutputState }

func (DashboardParameterDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParameterDetail)(nil)).Elem()
}

func (o DashboardParameterDetailOutput) ToDashboardParameterDetailOutput() DashboardParameterDetailOutput {
	return o
}

func (o DashboardParameterDetailOutput) ToDashboardParameterDetailOutputWithContext(ctx context.Context) DashboardParameterDetailOutput {
	return o
}

// The default value of the parameter
func (o DashboardParameterDetailOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardParameterDetail) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
// `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, `MATCHING_SOURCE_TAG`
func (o DashboardParameterDetailOutput) DynamicFieldType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardParameterDetail) *string { return v.DynamicFieldType }).(pulumi.StringPtrOutput)
}

// If `true` the parameter will only be shown on the edit view of the dashboard
func (o DashboardParameterDetailOutput) HideFromView() pulumi.BoolOutput {
	return o.ApplyT(func(v DashboardParameterDetail) bool { return v.HideFromView }).(pulumi.BoolOutput)
}

// The label for the parameter
func (o DashboardParameterDetailOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardParameterDetail) string { return v.Label }).(pulumi.StringOutput)
}

// The name of the parameters
func (o DashboardParameterDetailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardParameterDetail) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`
func (o DashboardParameterDetailOutput) ParameterType() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardParameterDetail) string { return v.ParameterType }).(pulumi.StringOutput)
}

// For `DYNAMIC` parameter types, the query to execute to return values
func (o DashboardParameterDetailOutput) QueryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardParameterDetail) *string { return v.QueryValue }).(pulumi.StringPtrOutput)
}

// for `TAG_KEY` dynamic field types, the tag key to return
func (o DashboardParameterDetailOutput) TagKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardParameterDetail) *string { return v.TagKey }).(pulumi.StringPtrOutput)
}

// A string->string map.  At least one of the keys must match the value of
// `defaultValue`
func (o DashboardParameterDetailOutput) ValuesToReadableStrings() pulumi.StringMapOutput {
	return o.ApplyT(func(v DashboardParameterDetail) map[string]string { return v.ValuesToReadableStrings }).(pulumi.StringMapOutput)
}

type DashboardParameterDetailArrayOutput struct{ *pulumi.OutputState }

func (DashboardParameterDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParameterDetail)(nil)).Elem()
}

func (o DashboardParameterDetailArrayOutput) ToDashboardParameterDetailArrayOutput() DashboardParameterDetailArrayOutput {
	return o
}

func (o DashboardParameterDetailArrayOutput) ToDashboardParameterDetailArrayOutputWithContext(ctx context.Context) DashboardParameterDetailArrayOutput {
	return o
}

func (o DashboardParameterDetailArrayOutput) Index(i pulumi.IntInput) DashboardParameterDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardParameterDetail {
		return vs[0].([]DashboardParameterDetail)[vs[1].(int)]
	}).(DashboardParameterDetailOutput)
}

type DashboardSection struct {
	// Name of this section
	Name string `pulumi:"name"`
	// See dashboard section rows
	Rows []DashboardSectionRow `pulumi:"rows"`
}

// DashboardSectionInput is an input type that accepts DashboardSectionArgs and DashboardSectionOutput values.
// You can construct a concrete instance of `DashboardSectionInput` via:
//
//          DashboardSectionArgs{...}
type DashboardSectionInput interface {
	pulumi.Input

	ToDashboardSectionOutput() DashboardSectionOutput
	ToDashboardSectionOutputWithContext(context.Context) DashboardSectionOutput
}

type DashboardSectionArgs struct {
	// Name of this section
	Name pulumi.StringInput `pulumi:"name"`
	// See dashboard section rows
	Rows DashboardSectionRowArrayInput `pulumi:"rows"`
}

func (DashboardSectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSection)(nil)).Elem()
}

func (i DashboardSectionArgs) ToDashboardSectionOutput() DashboardSectionOutput {
	return i.ToDashboardSectionOutputWithContext(context.Background())
}

func (i DashboardSectionArgs) ToDashboardSectionOutputWithContext(ctx context.Context) DashboardSectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionOutput)
}

// DashboardSectionArrayInput is an input type that accepts DashboardSectionArray and DashboardSectionArrayOutput values.
// You can construct a concrete instance of `DashboardSectionArrayInput` via:
//
//          DashboardSectionArray{ DashboardSectionArgs{...} }
type DashboardSectionArrayInput interface {
	pulumi.Input

	ToDashboardSectionArrayOutput() DashboardSectionArrayOutput
	ToDashboardSectionArrayOutputWithContext(context.Context) DashboardSectionArrayOutput
}

type DashboardSectionArray []DashboardSectionInput

func (DashboardSectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSection)(nil)).Elem()
}

func (i DashboardSectionArray) ToDashboardSectionArrayOutput() DashboardSectionArrayOutput {
	return i.ToDashboardSectionArrayOutputWithContext(context.Background())
}

func (i DashboardSectionArray) ToDashboardSectionArrayOutputWithContext(ctx context.Context) DashboardSectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionArrayOutput)
}

type DashboardSectionOutput struct{ *pulumi.OutputState }

func (DashboardSectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSection)(nil)).Elem()
}

func (o DashboardSectionOutput) ToDashboardSectionOutput() DashboardSectionOutput {
	return o
}

func (o DashboardSectionOutput) ToDashboardSectionOutputWithContext(ctx context.Context) DashboardSectionOutput {
	return o
}

// Name of this section
func (o DashboardSectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSection) string { return v.Name }).(pulumi.StringOutput)
}

// See dashboard section rows
func (o DashboardSectionOutput) Rows() DashboardSectionRowArrayOutput {
	return o.ApplyT(func(v DashboardSection) []DashboardSectionRow { return v.Rows }).(DashboardSectionRowArrayOutput)
}

type DashboardSectionArrayOutput struct{ *pulumi.OutputState }

func (DashboardSectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSection)(nil)).Elem()
}

func (o DashboardSectionArrayOutput) ToDashboardSectionArrayOutput() DashboardSectionArrayOutput {
	return o
}

func (o DashboardSectionArrayOutput) ToDashboardSectionArrayOutputWithContext(ctx context.Context) DashboardSectionArrayOutput {
	return o
}

func (o DashboardSectionArrayOutput) Index(i pulumi.IntInput) DashboardSectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSection {
		return vs[0].([]DashboardSection)[vs[1].(int)]
	}).(DashboardSectionOutput)
}

type DashboardSectionRow struct {
	// Charts in this section. See dashboard chart
	Charts []DashboardSectionRowChart `pulumi:"charts"`
}

// DashboardSectionRowInput is an input type that accepts DashboardSectionRowArgs and DashboardSectionRowOutput values.
// You can construct a concrete instance of `DashboardSectionRowInput` via:
//
//          DashboardSectionRowArgs{...}
type DashboardSectionRowInput interface {
	pulumi.Input

	ToDashboardSectionRowOutput() DashboardSectionRowOutput
	ToDashboardSectionRowOutputWithContext(context.Context) DashboardSectionRowOutput
}

type DashboardSectionRowArgs struct {
	// Charts in this section. See dashboard chart
	Charts DashboardSectionRowChartArrayInput `pulumi:"charts"`
}

func (DashboardSectionRowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionRow)(nil)).Elem()
}

func (i DashboardSectionRowArgs) ToDashboardSectionRowOutput() DashboardSectionRowOutput {
	return i.ToDashboardSectionRowOutputWithContext(context.Background())
}

func (i DashboardSectionRowArgs) ToDashboardSectionRowOutputWithContext(ctx context.Context) DashboardSectionRowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionRowOutput)
}

// DashboardSectionRowArrayInput is an input type that accepts DashboardSectionRowArray and DashboardSectionRowArrayOutput values.
// You can construct a concrete instance of `DashboardSectionRowArrayInput` via:
//
//          DashboardSectionRowArray{ DashboardSectionRowArgs{...} }
type DashboardSectionRowArrayInput interface {
	pulumi.Input

	ToDashboardSectionRowArrayOutput() DashboardSectionRowArrayOutput
	ToDashboardSectionRowArrayOutputWithContext(context.Context) DashboardSectionRowArrayOutput
}

type DashboardSectionRowArray []DashboardSectionRowInput

func (DashboardSectionRowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSectionRow)(nil)).Elem()
}

func (i DashboardSectionRowArray) ToDashboardSectionRowArrayOutput() DashboardSectionRowArrayOutput {
	return i.ToDashboardSectionRowArrayOutputWithContext(context.Background())
}

func (i DashboardSectionRowArray) ToDashboardSectionRowArrayOutputWithContext(ctx context.Context) DashboardSectionRowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionRowArrayOutput)
}

type DashboardSectionRowOutput struct{ *pulumi.OutputState }

func (DashboardSectionRowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionRow)(nil)).Elem()
}

func (o DashboardSectionRowOutput) ToDashboardSectionRowOutput() DashboardSectionRowOutput {
	return o
}

func (o DashboardSectionRowOutput) ToDashboardSectionRowOutputWithContext(ctx context.Context) DashboardSectionRowOutput {
	return o
}

// Charts in this section. See dashboard chart
func (o DashboardSectionRowOutput) Charts() DashboardSectionRowChartArrayOutput {
	return o.ApplyT(func(v DashboardSectionRow) []DashboardSectionRowChart { return v.Charts }).(DashboardSectionRowChartArrayOutput)
}

type DashboardSectionRowArrayOutput struct{ *pulumi.OutputState }

func (DashboardSectionRowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSectionRow)(nil)).Elem()
}

func (o DashboardSectionRowArrayOutput) ToDashboardSectionRowArrayOutput() DashboardSectionRowArrayOutput {
	return o
}

func (o DashboardSectionRowArrayOutput) ToDashboardSectionRowArrayOutputWithContext(ctx context.Context) DashboardSectionRowArrayOutput {
	return o
}

func (o DashboardSectionRowArrayOutput) Index(i pulumi.IntInput) DashboardSectionRowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSectionRow {
		return vs[0].([]DashboardSectionRow)[vs[1].(int)]
	}).(DashboardSectionRowOutput)
}

type DashboardSectionRowChart struct {
	// The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.
	Base           *int    `pulumi:"base"`
	ChartAttribute *string `pulumi:"chartAttribute"`
	// Chart settings. See chart settings
	ChartSetting DashboardSectionRowChartChartSetting `pulumi:"chartSetting"`
	// Description of the chart
	Description *string `pulumi:"description"`
	// Name of the source
	Name string `pulumi:"name"`
	// Query expression to plot on the chart. See chart source queries
	Sources []DashboardSectionRowChartSource `pulumi:"sources"`
	// Summarization strategy for the chart. MEAN is default. Valid options are, `MEAN`,
	// `MEDIAN`, `MIN`, `MAX`, `SUM`, `COUNT`, `LAST`, `FIRST`
	Summarization string `pulumi:"summarization"`
	// String to label the units of the chart on the Y-Axis
	Units string `pulumi:"units"`
}

// DashboardSectionRowChartInput is an input type that accepts DashboardSectionRowChartArgs and DashboardSectionRowChartOutput values.
// You can construct a concrete instance of `DashboardSectionRowChartInput` via:
//
//          DashboardSectionRowChartArgs{...}
type DashboardSectionRowChartInput interface {
	pulumi.Input

	ToDashboardSectionRowChartOutput() DashboardSectionRowChartOutput
	ToDashboardSectionRowChartOutputWithContext(context.Context) DashboardSectionRowChartOutput
}

type DashboardSectionRowChartArgs struct {
	// The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.
	Base           pulumi.IntPtrInput    `pulumi:"base"`
	ChartAttribute pulumi.StringPtrInput `pulumi:"chartAttribute"`
	// Chart settings. See chart settings
	ChartSetting DashboardSectionRowChartChartSettingInput `pulumi:"chartSetting"`
	// Description of the chart
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Name of the source
	Name pulumi.StringInput `pulumi:"name"`
	// Query expression to plot on the chart. See chart source queries
	Sources DashboardSectionRowChartSourceArrayInput `pulumi:"sources"`
	// Summarization strategy for the chart. MEAN is default. Valid options are, `MEAN`,
	// `MEDIAN`, `MIN`, `MAX`, `SUM`, `COUNT`, `LAST`, `FIRST`
	Summarization pulumi.StringInput `pulumi:"summarization"`
	// String to label the units of the chart on the Y-Axis
	Units pulumi.StringInput `pulumi:"units"`
}

func (DashboardSectionRowChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionRowChart)(nil)).Elem()
}

func (i DashboardSectionRowChartArgs) ToDashboardSectionRowChartOutput() DashboardSectionRowChartOutput {
	return i.ToDashboardSectionRowChartOutputWithContext(context.Background())
}

func (i DashboardSectionRowChartArgs) ToDashboardSectionRowChartOutputWithContext(ctx context.Context) DashboardSectionRowChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionRowChartOutput)
}

// DashboardSectionRowChartArrayInput is an input type that accepts DashboardSectionRowChartArray and DashboardSectionRowChartArrayOutput values.
// You can construct a concrete instance of `DashboardSectionRowChartArrayInput` via:
//
//          DashboardSectionRowChartArray{ DashboardSectionRowChartArgs{...} }
type DashboardSectionRowChartArrayInput interface {
	pulumi.Input

	ToDashboardSectionRowChartArrayOutput() DashboardSectionRowChartArrayOutput
	ToDashboardSectionRowChartArrayOutputWithContext(context.Context) DashboardSectionRowChartArrayOutput
}

type DashboardSectionRowChartArray []DashboardSectionRowChartInput

func (DashboardSectionRowChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSectionRowChart)(nil)).Elem()
}

func (i DashboardSectionRowChartArray) ToDashboardSectionRowChartArrayOutput() DashboardSectionRowChartArrayOutput {
	return i.ToDashboardSectionRowChartArrayOutputWithContext(context.Background())
}

func (i DashboardSectionRowChartArray) ToDashboardSectionRowChartArrayOutputWithContext(ctx context.Context) DashboardSectionRowChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionRowChartArrayOutput)
}

type DashboardSectionRowChartOutput struct{ *pulumi.OutputState }

func (DashboardSectionRowChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionRowChart)(nil)).Elem()
}

func (o DashboardSectionRowChartOutput) ToDashboardSectionRowChartOutput() DashboardSectionRowChartOutput {
	return o
}

func (o DashboardSectionRowChartOutput) ToDashboardSectionRowChartOutputWithContext(ctx context.Context) DashboardSectionRowChartOutput {
	return o
}

// The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.
func (o DashboardSectionRowChartOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChart) *int { return v.Base }).(pulumi.IntPtrOutput)
}

func (o DashboardSectionRowChartOutput) ChartAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChart) *string { return v.ChartAttribute }).(pulumi.StringPtrOutput)
}

// Chart settings. See chart settings
func (o DashboardSectionRowChartOutput) ChartSetting() DashboardSectionRowChartChartSettingOutput {
	return o.ApplyT(func(v DashboardSectionRowChart) DashboardSectionRowChartChartSetting { return v.ChartSetting }).(DashboardSectionRowChartChartSettingOutput)
}

// Description of the chart
func (o DashboardSectionRowChartOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChart) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the source
func (o DashboardSectionRowChartOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSectionRowChart) string { return v.Name }).(pulumi.StringOutput)
}

// Query expression to plot on the chart. See chart source queries
func (o DashboardSectionRowChartOutput) Sources() DashboardSectionRowChartSourceArrayOutput {
	return o.ApplyT(func(v DashboardSectionRowChart) []DashboardSectionRowChartSource { return v.Sources }).(DashboardSectionRowChartSourceArrayOutput)
}

// Summarization strategy for the chart. MEAN is default. Valid options are, `MEAN`,
// `MEDIAN`, `MIN`, `MAX`, `SUM`, `COUNT`, `LAST`, `FIRST`
func (o DashboardSectionRowChartOutput) Summarization() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSectionRowChart) string { return v.Summarization }).(pulumi.StringOutput)
}

// String to label the units of the chart on the Y-Axis
func (o DashboardSectionRowChartOutput) Units() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSectionRowChart) string { return v.Units }).(pulumi.StringOutput)
}

type DashboardSectionRowChartArrayOutput struct{ *pulumi.OutputState }

func (DashboardSectionRowChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSectionRowChart)(nil)).Elem()
}

func (o DashboardSectionRowChartArrayOutput) ToDashboardSectionRowChartArrayOutput() DashboardSectionRowChartArrayOutput {
	return o
}

func (o DashboardSectionRowChartArrayOutput) ToDashboardSectionRowChartArrayOutputWithContext(ctx context.Context) DashboardSectionRowChartArrayOutput {
	return o
}

func (o DashboardSectionRowChartArrayOutput) Index(i pulumi.IntInput) DashboardSectionRowChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSectionRowChart {
		return vs[0].([]DashboardSectionRowChart)[vs[1].(int)]
	}).(DashboardSectionRowChartOutput)
}

type DashboardSectionRowChartChartSetting struct {
	// deprecated
	AutoColumnTags *bool `pulumi:"autoColumnTags"`
	// deprecated
	ColumnTags *string `pulumi:"columnTags"`
	// For the tabular view, a list of point tags to display when using the `custom` tag display mode
	CustomTags []string `pulumi:"customTags"`
	// Threshold (in seconds) for time delta between consecutive points in a series
	// above which a dotted line will replace a solid in in line plots. Default 60
	ExpectedDataSpacing *int `pulumi:"expectedDataSpacing"`
	// For a chart with a fixed legend, a list of statistics to display in the legend
	FixedLegendDisplayStats []string `pulumi:"fixedLegendDisplayStats"`
	// Whether to enable a fixed tabular legend adjacent to the chart
	FixedLegendEnabled *bool `pulumi:"fixedLegendEnabled"`
	// Statistic to use for determining whether a series is displayed on the fixed legend.
	// Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, `COUNT`
	FixedLegendFilterField *string `pulumi:"fixedLegendFilterField"`
	// Number of series to include in the fixed legend
	FixedLegendFilterLimit *int `pulumi:"fixedLegendFilterLimit"`
	// Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
	// are `TOP`, and `BOTTOM`
	FixedLegendFilterSort *string `pulumi:"fixedLegendFilterSort"`
	// deprecated
	FixedLegendHideLabel *bool `pulumi:"fixedLegendHideLabel"`
	// Where the fixed legend should be displayed with respect ot the chart.
	// Valid options are `RIGHt`, `TOP`, `LEFT`, `BOTTOM`
	FixedLegendPosition *string `pulumi:"fixedLegendPosition"`
	// If `true`, the legend uses non-summarized stats instead of summarized
	FixedLegendUseRawStats *bool `pulumi:"fixedLegendUseRawStats"`
	// For the tabular view, whether to group multi metrics into a single row by a common source.
	// If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host will be displayed as different
	// columns in the same row
	GroupBySource *bool `pulumi:"groupBySource"`
	// Whether to disable the display of the floating legend (but
	// reenable it when the ctrl-key is pressed)
	InvertDynamicLegendHoverControl *bool `pulumi:"invertDynamicLegendHoverControl"`
	// Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`,
	// `step-after`, `basis`, `cardinal`, `monotone`
	LineType *string `pulumi:"lineType"`
	// Max value of the Y-axis. Set to null or leave blank for auto
	Max *float64 `pulumi:"max"`
	// Min value of the Y-axis. Set to null or leave blank for auto
	Min *float64 `pulumi:"min"`
	// For the tabular view, how many point tags to display
	NumTags *int `pulumi:"numTags"`
	// The markdown content for a Markdown display, in plain text.
	PlainMarkdownContent *string `pulumi:"plainMarkdownContent"`
	// For the tabular view, whether to display sources. Default is `true`
	ShowHosts *bool `pulumi:"showHosts"`
	// For the tabular view, whether to display labels. Default is `true`
	ShowLabels *bool `pulumi:"showLabels"`
	// For the tabular view, whether to display raw values. Default is `false`
	ShowRawValues *bool `pulumi:"showRawValues"`
	// For the tabular view, whether to display display values in descending order. Default is `false`
	SortValuesDescending *bool `pulumi:"sortValuesDescending"`
	// For the single stat view, the decimal precision of the displayed number
	SparklineDecimalPrecision *int `pulumi:"sparklineDecimalPrecision"`
	// For the single stat view, the color of the displayed text (when not dynamically determined).
	// Values should be in `rgba(,,,,)` format
	SparklineDisplayColor *string `pulumi:"sparklineDisplayColor"`
	// For the single stat view, the font size of the displayed text, in percent
	SparklineDisplayFontSize *string `pulumi:"sparklineDisplayFontSize"`
	// For the single stat view, the horizontal position of the displayed text.
	// Valid options are `MIDDLE`, `LEFT`, `RIGHT`
	SparklineDisplayHorizontalPosition *string `pulumi:"sparklineDisplayHorizontalPosition"`
	// For the single stat view, a string to append to the displayed text
	SparklineDisplayPostfix *string `pulumi:"sparklineDisplayPostfix"`
	// For the single stat view, a string to add before the displayed text
	SparklineDisplayPrefix *string `pulumi:"sparklineDisplayPrefix"`
	// For the single stat view, where to display the name of the query or the value of the query.
	// Valid options are `VALUE` or `LABEL`
	SparklineDisplayValueType *string `pulumi:"sparklineDisplayValueType"`
	// deprecated
	SparklineDisplayVerticalPosition *string `pulumi:"sparklineDisplayVerticalPosition"`
	// For the single stat view, the color of the background fill.  Values should be
	// in `rgba(,,,,)`
	SparklineFillColor *string `pulumi:"sparklineFillColor"`
	// For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format
	SparklineLineColor *string `pulumi:"sparklineLineColor"`
	// For the single stat view, This determines whether the sparkline of the statistic is displayed in the chart `BACKGROUND`, `BOTTOM`, or `NONE`.
	// Valid options are `BACKGROUND`, `BOTTOM`, `NONE`
	SparklineSize *string `pulumi:"sparklineSize"`
	// For the single stat view, whether to apply dyunamic color settings to
	// the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`
	SparklineValueColorMapApplyTo *string `pulumi:"sparklineValueColorMapApplyTo"`
	// For the single stat view, A list of colors that differing query values map to.
	// Must contain one more element than `sparklineValueColorMapValuesV2`. Values should be in `rgba(,,,,)`
	SparklineValueColorMapColors []string `pulumi:"sparklineValueColorMapColors"`
	// deprecated
	SparklineValueColorMapValues []int `pulumi:"sparklineValueColorMapValues"`
	// For the single stat view, a list of boundaries for mapping different
	// query values to colors.  Must contain one less element than `sparklineValueColorMapColors`
	SparklineValueColorMapValuesV2s []float64 `pulumi:"sparklineValueColorMapValuesV2s"`
	// For the single stat view, a list of display text values that different query
	// values map to.  Must contain one more element than `sparklineValueTextMapThresholds`
	SparklineValueTextMapTexts []string `pulumi:"sparklineValueTextMapTexts"`
	// For the single stat view, a list of threshold boundaries for
	// mapping different query values to display text.  Must contain one less element than `sparklineValueTextMapText`
	SparklineValueTextMapThresholds []float64 `pulumi:"sparklineValueTextMapThresholds"`
	// Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
	// stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
	// center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, `bars`
	StackType *string `pulumi:"stackType"`
	// For the tabular view, which mode to use to determine which point tags to display.
	// Valid options are `all`, `top`, or `custom`
	TagMode *string `pulumi:"tagMode"`
	// For x-y scatterplots, whether to color more recent points as darker than older points
	TimeBasedColoring *bool `pulumi:"timeBasedColoring"`
	// Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to
	// the Stacked Area plot, `table` to the Tabular View, `scatterploy-xy` to Scatter Plot, `markdown-widget` to the
	// Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
	// `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
	// `top-k`, `status-list`, `histogram`
	Type string `pulumi:"type"`
	// Width, in minutes, of the time window to use for `last` windowing
	WindowSize *int `pulumi:"windowSize"`
	// For the tabular view, whether to use the full time window for the query or the last X minutes.
	// Valid options are `full` or `last`
	Windowing *string `pulumi:"windowing"`
	// For x-y scatterplots, max value for the X-axis. Set to null for auto
	Xmax *float64 `pulumi:"xmax"`
	// For x-y scatterplots, min value for the X-axis. Set to null for auto
	Xmin *float64 `pulumi:"xmin"`
	// Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)
	Y0ScaleSiBy1024 *bool `pulumi:"y0ScaleSiBy1024"`
	// Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units
	Y0UnitAutoscaling *bool `pulumi:"y0UnitAutoscaling"`
	// Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)
	Y1ScaleSiBy1024 *bool `pulumi:"y1ScaleSiBy1024"`
	// Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units
	Y1UnitAutoscaling *bool `pulumi:"y1UnitAutoscaling"`
	// For plots with multiple Y-axes, units for right side Y-axis
	Y1Units *string `pulumi:"y1Units"`
	// For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto
	Y1max *float64 `pulumi:"y1max"`
	// For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto
	Y1min *float64 `pulumi:"y1min"`
	// For x-y scatterplots, max value for the Y-axis. Set to null for auto
	Ymax *float64 `pulumi:"ymax"`
	// For x-y scatterplots, min value for the Y-axis. Set to null for auto
	Ymin *float64 `pulumi:"ymin"`
}

// DashboardSectionRowChartChartSettingInput is an input type that accepts DashboardSectionRowChartChartSettingArgs and DashboardSectionRowChartChartSettingOutput values.
// You can construct a concrete instance of `DashboardSectionRowChartChartSettingInput` via:
//
//          DashboardSectionRowChartChartSettingArgs{...}
type DashboardSectionRowChartChartSettingInput interface {
	pulumi.Input

	ToDashboardSectionRowChartChartSettingOutput() DashboardSectionRowChartChartSettingOutput
	ToDashboardSectionRowChartChartSettingOutputWithContext(context.Context) DashboardSectionRowChartChartSettingOutput
}

type DashboardSectionRowChartChartSettingArgs struct {
	// deprecated
	AutoColumnTags pulumi.BoolPtrInput `pulumi:"autoColumnTags"`
	// deprecated
	ColumnTags pulumi.StringPtrInput `pulumi:"columnTags"`
	// For the tabular view, a list of point tags to display when using the `custom` tag display mode
	CustomTags pulumi.StringArrayInput `pulumi:"customTags"`
	// Threshold (in seconds) for time delta between consecutive points in a series
	// above which a dotted line will replace a solid in in line plots. Default 60
	ExpectedDataSpacing pulumi.IntPtrInput `pulumi:"expectedDataSpacing"`
	// For a chart with a fixed legend, a list of statistics to display in the legend
	FixedLegendDisplayStats pulumi.StringArrayInput `pulumi:"fixedLegendDisplayStats"`
	// Whether to enable a fixed tabular legend adjacent to the chart
	FixedLegendEnabled pulumi.BoolPtrInput `pulumi:"fixedLegendEnabled"`
	// Statistic to use for determining whether a series is displayed on the fixed legend.
	// Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, `COUNT`
	FixedLegendFilterField pulumi.StringPtrInput `pulumi:"fixedLegendFilterField"`
	// Number of series to include in the fixed legend
	FixedLegendFilterLimit pulumi.IntPtrInput `pulumi:"fixedLegendFilterLimit"`
	// Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
	// are `TOP`, and `BOTTOM`
	FixedLegendFilterSort pulumi.StringPtrInput `pulumi:"fixedLegendFilterSort"`
	// deprecated
	FixedLegendHideLabel pulumi.BoolPtrInput `pulumi:"fixedLegendHideLabel"`
	// Where the fixed legend should be displayed with respect ot the chart.
	// Valid options are `RIGHt`, `TOP`, `LEFT`, `BOTTOM`
	FixedLegendPosition pulumi.StringPtrInput `pulumi:"fixedLegendPosition"`
	// If `true`, the legend uses non-summarized stats instead of summarized
	FixedLegendUseRawStats pulumi.BoolPtrInput `pulumi:"fixedLegendUseRawStats"`
	// For the tabular view, whether to group multi metrics into a single row by a common source.
	// If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host will be displayed as different
	// columns in the same row
	GroupBySource pulumi.BoolPtrInput `pulumi:"groupBySource"`
	// Whether to disable the display of the floating legend (but
	// reenable it when the ctrl-key is pressed)
	InvertDynamicLegendHoverControl pulumi.BoolPtrInput `pulumi:"invertDynamicLegendHoverControl"`
	// Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`,
	// `step-after`, `basis`, `cardinal`, `monotone`
	LineType pulumi.StringPtrInput `pulumi:"lineType"`
	// Max value of the Y-axis. Set to null or leave blank for auto
	Max pulumi.Float64PtrInput `pulumi:"max"`
	// Min value of the Y-axis. Set to null or leave blank for auto
	Min pulumi.Float64PtrInput `pulumi:"min"`
	// For the tabular view, how many point tags to display
	NumTags pulumi.IntPtrInput `pulumi:"numTags"`
	// The markdown content for a Markdown display, in plain text.
	PlainMarkdownContent pulumi.StringPtrInput `pulumi:"plainMarkdownContent"`
	// For the tabular view, whether to display sources. Default is `true`
	ShowHosts pulumi.BoolPtrInput `pulumi:"showHosts"`
	// For the tabular view, whether to display labels. Default is `true`
	ShowLabels pulumi.BoolPtrInput `pulumi:"showLabels"`
	// For the tabular view, whether to display raw values. Default is `false`
	ShowRawValues pulumi.BoolPtrInput `pulumi:"showRawValues"`
	// For the tabular view, whether to display display values in descending order. Default is `false`
	SortValuesDescending pulumi.BoolPtrInput `pulumi:"sortValuesDescending"`
	// For the single stat view, the decimal precision of the displayed number
	SparklineDecimalPrecision pulumi.IntPtrInput `pulumi:"sparklineDecimalPrecision"`
	// For the single stat view, the color of the displayed text (when not dynamically determined).
	// Values should be in `rgba(,,,,)` format
	SparklineDisplayColor pulumi.StringPtrInput `pulumi:"sparklineDisplayColor"`
	// For the single stat view, the font size of the displayed text, in percent
	SparklineDisplayFontSize pulumi.StringPtrInput `pulumi:"sparklineDisplayFontSize"`
	// For the single stat view, the horizontal position of the displayed text.
	// Valid options are `MIDDLE`, `LEFT`, `RIGHT`
	SparklineDisplayHorizontalPosition pulumi.StringPtrInput `pulumi:"sparklineDisplayHorizontalPosition"`
	// For the single stat view, a string to append to the displayed text
	SparklineDisplayPostfix pulumi.StringPtrInput `pulumi:"sparklineDisplayPostfix"`
	// For the single stat view, a string to add before the displayed text
	SparklineDisplayPrefix pulumi.StringPtrInput `pulumi:"sparklineDisplayPrefix"`
	// For the single stat view, where to display the name of the query or the value of the query.
	// Valid options are `VALUE` or `LABEL`
	SparklineDisplayValueType pulumi.StringPtrInput `pulumi:"sparklineDisplayValueType"`
	// deprecated
	SparklineDisplayVerticalPosition pulumi.StringPtrInput `pulumi:"sparklineDisplayVerticalPosition"`
	// For the single stat view, the color of the background fill.  Values should be
	// in `rgba(,,,,)`
	SparklineFillColor pulumi.StringPtrInput `pulumi:"sparklineFillColor"`
	// For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format
	SparklineLineColor pulumi.StringPtrInput `pulumi:"sparklineLineColor"`
	// For the single stat view, This determines whether the sparkline of the statistic is displayed in the chart `BACKGROUND`, `BOTTOM`, or `NONE`.
	// Valid options are `BACKGROUND`, `BOTTOM`, `NONE`
	SparklineSize pulumi.StringPtrInput `pulumi:"sparklineSize"`
	// For the single stat view, whether to apply dyunamic color settings to
	// the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`
	SparklineValueColorMapApplyTo pulumi.StringPtrInput `pulumi:"sparklineValueColorMapApplyTo"`
	// For the single stat view, A list of colors that differing query values map to.
	// Must contain one more element than `sparklineValueColorMapValuesV2`. Values should be in `rgba(,,,,)`
	SparklineValueColorMapColors pulumi.StringArrayInput `pulumi:"sparklineValueColorMapColors"`
	// deprecated
	SparklineValueColorMapValues pulumi.IntArrayInput `pulumi:"sparklineValueColorMapValues"`
	// For the single stat view, a list of boundaries for mapping different
	// query values to colors.  Must contain one less element than `sparklineValueColorMapColors`
	SparklineValueColorMapValuesV2s pulumi.Float64ArrayInput `pulumi:"sparklineValueColorMapValuesV2s"`
	// For the single stat view, a list of display text values that different query
	// values map to.  Must contain one more element than `sparklineValueTextMapThresholds`
	SparklineValueTextMapTexts pulumi.StringArrayInput `pulumi:"sparklineValueTextMapTexts"`
	// For the single stat view, a list of threshold boundaries for
	// mapping different query values to display text.  Must contain one less element than `sparklineValueTextMapText`
	SparklineValueTextMapThresholds pulumi.Float64ArrayInput `pulumi:"sparklineValueTextMapThresholds"`
	// Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
	// stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
	// center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, `bars`
	StackType pulumi.StringPtrInput `pulumi:"stackType"`
	// For the tabular view, which mode to use to determine which point tags to display.
	// Valid options are `all`, `top`, or `custom`
	TagMode pulumi.StringPtrInput `pulumi:"tagMode"`
	// For x-y scatterplots, whether to color more recent points as darker than older points
	TimeBasedColoring pulumi.BoolPtrInput `pulumi:"timeBasedColoring"`
	// Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to
	// the Stacked Area plot, `table` to the Tabular View, `scatterploy-xy` to Scatter Plot, `markdown-widget` to the
	// Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
	// `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
	// `top-k`, `status-list`, `histogram`
	Type pulumi.StringInput `pulumi:"type"`
	// Width, in minutes, of the time window to use for `last` windowing
	WindowSize pulumi.IntPtrInput `pulumi:"windowSize"`
	// For the tabular view, whether to use the full time window for the query or the last X minutes.
	// Valid options are `full` or `last`
	Windowing pulumi.StringPtrInput `pulumi:"windowing"`
	// For x-y scatterplots, max value for the X-axis. Set to null for auto
	Xmax pulumi.Float64PtrInput `pulumi:"xmax"`
	// For x-y scatterplots, min value for the X-axis. Set to null for auto
	Xmin pulumi.Float64PtrInput `pulumi:"xmin"`
	// Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)
	Y0ScaleSiBy1024 pulumi.BoolPtrInput `pulumi:"y0ScaleSiBy1024"`
	// Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units
	Y0UnitAutoscaling pulumi.BoolPtrInput `pulumi:"y0UnitAutoscaling"`
	// Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)
	Y1ScaleSiBy1024 pulumi.BoolPtrInput `pulumi:"y1ScaleSiBy1024"`
	// Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units
	Y1UnitAutoscaling pulumi.BoolPtrInput `pulumi:"y1UnitAutoscaling"`
	// For plots with multiple Y-axes, units for right side Y-axis
	Y1Units pulumi.StringPtrInput `pulumi:"y1Units"`
	// For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto
	Y1max pulumi.Float64PtrInput `pulumi:"y1max"`
	// For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto
	Y1min pulumi.Float64PtrInput `pulumi:"y1min"`
	// For x-y scatterplots, max value for the Y-axis. Set to null for auto
	Ymax pulumi.Float64PtrInput `pulumi:"ymax"`
	// For x-y scatterplots, min value for the Y-axis. Set to null for auto
	Ymin pulumi.Float64PtrInput `pulumi:"ymin"`
}

func (DashboardSectionRowChartChartSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionRowChartChartSetting)(nil)).Elem()
}

func (i DashboardSectionRowChartChartSettingArgs) ToDashboardSectionRowChartChartSettingOutput() DashboardSectionRowChartChartSettingOutput {
	return i.ToDashboardSectionRowChartChartSettingOutputWithContext(context.Background())
}

func (i DashboardSectionRowChartChartSettingArgs) ToDashboardSectionRowChartChartSettingOutputWithContext(ctx context.Context) DashboardSectionRowChartChartSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionRowChartChartSettingOutput)
}

type DashboardSectionRowChartChartSettingOutput struct{ *pulumi.OutputState }

func (DashboardSectionRowChartChartSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionRowChartChartSetting)(nil)).Elem()
}

func (o DashboardSectionRowChartChartSettingOutput) ToDashboardSectionRowChartChartSettingOutput() DashboardSectionRowChartChartSettingOutput {
	return o
}

func (o DashboardSectionRowChartChartSettingOutput) ToDashboardSectionRowChartChartSettingOutputWithContext(ctx context.Context) DashboardSectionRowChartChartSettingOutput {
	return o
}

// deprecated
func (o DashboardSectionRowChartChartSettingOutput) AutoColumnTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.AutoColumnTags }).(pulumi.BoolPtrOutput)
}

// deprecated
func (o DashboardSectionRowChartChartSettingOutput) ColumnTags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.ColumnTags }).(pulumi.StringPtrOutput)
}

// For the tabular view, a list of point tags to display when using the `custom` tag display mode
func (o DashboardSectionRowChartChartSettingOutput) CustomTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) []string { return v.CustomTags }).(pulumi.StringArrayOutput)
}

// Threshold (in seconds) for time delta between consecutive points in a series
// above which a dotted line will replace a solid in in line plots. Default 60
func (o DashboardSectionRowChartChartSettingOutput) ExpectedDataSpacing() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *int { return v.ExpectedDataSpacing }).(pulumi.IntPtrOutput)
}

// For a chart with a fixed legend, a list of statistics to display in the legend
func (o DashboardSectionRowChartChartSettingOutput) FixedLegendDisplayStats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) []string { return v.FixedLegendDisplayStats }).(pulumi.StringArrayOutput)
}

// Whether to enable a fixed tabular legend adjacent to the chart
func (o DashboardSectionRowChartChartSettingOutput) FixedLegendEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.FixedLegendEnabled }).(pulumi.BoolPtrOutput)
}

// Statistic to use for determining whether a series is displayed on the fixed legend.
// Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, `COUNT`
func (o DashboardSectionRowChartChartSettingOutput) FixedLegendFilterField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.FixedLegendFilterField }).(pulumi.StringPtrOutput)
}

// Number of series to include in the fixed legend
func (o DashboardSectionRowChartChartSettingOutput) FixedLegendFilterLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *int { return v.FixedLegendFilterLimit }).(pulumi.IntPtrOutput)
}

// Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
// are `TOP`, and `BOTTOM`
func (o DashboardSectionRowChartChartSettingOutput) FixedLegendFilterSort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.FixedLegendFilterSort }).(pulumi.StringPtrOutput)
}

// deprecated
func (o DashboardSectionRowChartChartSettingOutput) FixedLegendHideLabel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.FixedLegendHideLabel }).(pulumi.BoolPtrOutput)
}

// Where the fixed legend should be displayed with respect ot the chart.
// Valid options are `RIGHt`, `TOP`, `LEFT`, `BOTTOM`
func (o DashboardSectionRowChartChartSettingOutput) FixedLegendPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.FixedLegendPosition }).(pulumi.StringPtrOutput)
}

// If `true`, the legend uses non-summarized stats instead of summarized
func (o DashboardSectionRowChartChartSettingOutput) FixedLegendUseRawStats() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.FixedLegendUseRawStats }).(pulumi.BoolPtrOutput)
}

// For the tabular view, whether to group multi metrics into a single row by a common source.
// If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host will be displayed as different
// columns in the same row
func (o DashboardSectionRowChartChartSettingOutput) GroupBySource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.GroupBySource }).(pulumi.BoolPtrOutput)
}

// Whether to disable the display of the floating legend (but
// reenable it when the ctrl-key is pressed)
func (o DashboardSectionRowChartChartSettingOutput) InvertDynamicLegendHoverControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.InvertDynamicLegendHoverControl }).(pulumi.BoolPtrOutput)
}

// Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`,
// `step-after`, `basis`, `cardinal`, `monotone`
func (o DashboardSectionRowChartChartSettingOutput) LineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.LineType }).(pulumi.StringPtrOutput)
}

// Max value of the Y-axis. Set to null or leave blank for auto
func (o DashboardSectionRowChartChartSettingOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *float64 { return v.Max }).(pulumi.Float64PtrOutput)
}

// Min value of the Y-axis. Set to null or leave blank for auto
func (o DashboardSectionRowChartChartSettingOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *float64 { return v.Min }).(pulumi.Float64PtrOutput)
}

// For the tabular view, how many point tags to display
func (o DashboardSectionRowChartChartSettingOutput) NumTags() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *int { return v.NumTags }).(pulumi.IntPtrOutput)
}

// The markdown content for a Markdown display, in plain text.
func (o DashboardSectionRowChartChartSettingOutput) PlainMarkdownContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.PlainMarkdownContent }).(pulumi.StringPtrOutput)
}

// For the tabular view, whether to display sources. Default is `true`
func (o DashboardSectionRowChartChartSettingOutput) ShowHosts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.ShowHosts }).(pulumi.BoolPtrOutput)
}

// For the tabular view, whether to display labels. Default is `true`
func (o DashboardSectionRowChartChartSettingOutput) ShowLabels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.ShowLabels }).(pulumi.BoolPtrOutput)
}

// For the tabular view, whether to display raw values. Default is `false`
func (o DashboardSectionRowChartChartSettingOutput) ShowRawValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.ShowRawValues }).(pulumi.BoolPtrOutput)
}

// For the tabular view, whether to display display values in descending order. Default is `false`
func (o DashboardSectionRowChartChartSettingOutput) SortValuesDescending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.SortValuesDescending }).(pulumi.BoolPtrOutput)
}

// For the single stat view, the decimal precision of the displayed number
func (o DashboardSectionRowChartChartSettingOutput) SparklineDecimalPrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *int { return v.SparklineDecimalPrecision }).(pulumi.IntPtrOutput)
}

// For the single stat view, the color of the displayed text (when not dynamically determined).
// Values should be in `rgba(,,,,)` format
func (o DashboardSectionRowChartChartSettingOutput) SparklineDisplayColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineDisplayColor }).(pulumi.StringPtrOutput)
}

// For the single stat view, the font size of the displayed text, in percent
func (o DashboardSectionRowChartChartSettingOutput) SparklineDisplayFontSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineDisplayFontSize }).(pulumi.StringPtrOutput)
}

// For the single stat view, the horizontal position of the displayed text.
// Valid options are `MIDDLE`, `LEFT`, `RIGHT`
func (o DashboardSectionRowChartChartSettingOutput) SparklineDisplayHorizontalPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineDisplayHorizontalPosition }).(pulumi.StringPtrOutput)
}

// For the single stat view, a string to append to the displayed text
func (o DashboardSectionRowChartChartSettingOutput) SparklineDisplayPostfix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineDisplayPostfix }).(pulumi.StringPtrOutput)
}

// For the single stat view, a string to add before the displayed text
func (o DashboardSectionRowChartChartSettingOutput) SparklineDisplayPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineDisplayPrefix }).(pulumi.StringPtrOutput)
}

// For the single stat view, where to display the name of the query or the value of the query.
// Valid options are `VALUE` or `LABEL`
func (o DashboardSectionRowChartChartSettingOutput) SparklineDisplayValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineDisplayValueType }).(pulumi.StringPtrOutput)
}

// deprecated
func (o DashboardSectionRowChartChartSettingOutput) SparklineDisplayVerticalPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineDisplayVerticalPosition }).(pulumi.StringPtrOutput)
}

// For the single stat view, the color of the background fill.  Values should be
// in `rgba(,,,,)`
func (o DashboardSectionRowChartChartSettingOutput) SparklineFillColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineFillColor }).(pulumi.StringPtrOutput)
}

// For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format
func (o DashboardSectionRowChartChartSettingOutput) SparklineLineColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineLineColor }).(pulumi.StringPtrOutput)
}

// For the single stat view, This determines whether the sparkline of the statistic is displayed in the chart `BACKGROUND`, `BOTTOM`, or `NONE`.
// Valid options are `BACKGROUND`, `BOTTOM`, `NONE`
func (o DashboardSectionRowChartChartSettingOutput) SparklineSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineSize }).(pulumi.StringPtrOutput)
}

// For the single stat view, whether to apply dyunamic color settings to
// the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`
func (o DashboardSectionRowChartChartSettingOutput) SparklineValueColorMapApplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.SparklineValueColorMapApplyTo }).(pulumi.StringPtrOutput)
}

// For the single stat view, A list of colors that differing query values map to.
// Must contain one more element than `sparklineValueColorMapValuesV2`. Values should be in `rgba(,,,,)`
func (o DashboardSectionRowChartChartSettingOutput) SparklineValueColorMapColors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) []string { return v.SparklineValueColorMapColors }).(pulumi.StringArrayOutput)
}

// deprecated
func (o DashboardSectionRowChartChartSettingOutput) SparklineValueColorMapValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) []int { return v.SparklineValueColorMapValues }).(pulumi.IntArrayOutput)
}

// For the single stat view, a list of boundaries for mapping different
// query values to colors.  Must contain one less element than `sparklineValueColorMapColors`
func (o DashboardSectionRowChartChartSettingOutput) SparklineValueColorMapValuesV2s() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) []float64 { return v.SparklineValueColorMapValuesV2s }).(pulumi.Float64ArrayOutput)
}

// For the single stat view, a list of display text values that different query
// values map to.  Must contain one more element than `sparklineValueTextMapThresholds`
func (o DashboardSectionRowChartChartSettingOutput) SparklineValueTextMapTexts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) []string { return v.SparklineValueTextMapTexts }).(pulumi.StringArrayOutput)
}

// For the single stat view, a list of threshold boundaries for
// mapping different query values to display text.  Must contain one less element than `sparklineValueTextMapText`
func (o DashboardSectionRowChartChartSettingOutput) SparklineValueTextMapThresholds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) []float64 { return v.SparklineValueTextMapThresholds }).(pulumi.Float64ArrayOutput)
}

// Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
// stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
// center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, `bars`
func (o DashboardSectionRowChartChartSettingOutput) StackType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.StackType }).(pulumi.StringPtrOutput)
}

// For the tabular view, which mode to use to determine which point tags to display.
// Valid options are `all`, `top`, or `custom`
func (o DashboardSectionRowChartChartSettingOutput) TagMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.TagMode }).(pulumi.StringPtrOutput)
}

// For x-y scatterplots, whether to color more recent points as darker than older points
func (o DashboardSectionRowChartChartSettingOutput) TimeBasedColoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.TimeBasedColoring }).(pulumi.BoolPtrOutput)
}

// Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to
// the Stacked Area plot, `table` to the Tabular View, `scatterploy-xy` to Scatter Plot, `markdown-widget` to the
// Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
// `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
// `top-k`, `status-list`, `histogram`
func (o DashboardSectionRowChartChartSettingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) string { return v.Type }).(pulumi.StringOutput)
}

// Width, in minutes, of the time window to use for `last` windowing
func (o DashboardSectionRowChartChartSettingOutput) WindowSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *int { return v.WindowSize }).(pulumi.IntPtrOutput)
}

// For the tabular view, whether to use the full time window for the query or the last X minutes.
// Valid options are `full` or `last`
func (o DashboardSectionRowChartChartSettingOutput) Windowing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.Windowing }).(pulumi.StringPtrOutput)
}

// For x-y scatterplots, max value for the X-axis. Set to null for auto
func (o DashboardSectionRowChartChartSettingOutput) Xmax() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *float64 { return v.Xmax }).(pulumi.Float64PtrOutput)
}

// For x-y scatterplots, min value for the X-axis. Set to null for auto
func (o DashboardSectionRowChartChartSettingOutput) Xmin() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *float64 { return v.Xmin }).(pulumi.Float64PtrOutput)
}

// Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)
func (o DashboardSectionRowChartChartSettingOutput) Y0ScaleSiBy1024() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.Y0ScaleSiBy1024 }).(pulumi.BoolPtrOutput)
}

// Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units
func (o DashboardSectionRowChartChartSettingOutput) Y0UnitAutoscaling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.Y0UnitAutoscaling }).(pulumi.BoolPtrOutput)
}

// Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)
func (o DashboardSectionRowChartChartSettingOutput) Y1ScaleSiBy1024() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.Y1ScaleSiBy1024 }).(pulumi.BoolPtrOutput)
}

// Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units
func (o DashboardSectionRowChartChartSettingOutput) Y1UnitAutoscaling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *bool { return v.Y1UnitAutoscaling }).(pulumi.BoolPtrOutput)
}

// For plots with multiple Y-axes, units for right side Y-axis
func (o DashboardSectionRowChartChartSettingOutput) Y1Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *string { return v.Y1Units }).(pulumi.StringPtrOutput)
}

// For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto
func (o DashboardSectionRowChartChartSettingOutput) Y1max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *float64 { return v.Y1max }).(pulumi.Float64PtrOutput)
}

// For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto
func (o DashboardSectionRowChartChartSettingOutput) Y1min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *float64 { return v.Y1min }).(pulumi.Float64PtrOutput)
}

// For x-y scatterplots, max value for the Y-axis. Set to null for auto
func (o DashboardSectionRowChartChartSettingOutput) Ymax() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *float64 { return v.Ymax }).(pulumi.Float64PtrOutput)
}

// For x-y scatterplots, min value for the Y-axis. Set to null for auto
func (o DashboardSectionRowChartChartSettingOutput) Ymin() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartChartSetting) *float64 { return v.Ymin }).(pulumi.Float64PtrOutput)
}

type DashboardSectionRowChartSource struct {
	// Whether the source is disabled
	Disabled *bool `pulumi:"disabled"`
	// Name of the source
	Name string `pulumi:"name"`
	// Query expression to plot on the chart
	Query string `pulumi:"query"`
	// Whether oir not this source line should have the query builder enabled
	QueryBuilderEnabled *bool `pulumi:"queryBuilderEnabled"`
	// For scatter plots, does this query source the X-axis or the Y-axis, `X`, or `Y`.
	ScatterPlotSource *string `pulumi:"scatterPlotSource"`
	// A description for the purpose of this source
	SourceDescription *string `pulumi:"sourceDescription"`
}

// DashboardSectionRowChartSourceInput is an input type that accepts DashboardSectionRowChartSourceArgs and DashboardSectionRowChartSourceOutput values.
// You can construct a concrete instance of `DashboardSectionRowChartSourceInput` via:
//
//          DashboardSectionRowChartSourceArgs{...}
type DashboardSectionRowChartSourceInput interface {
	pulumi.Input

	ToDashboardSectionRowChartSourceOutput() DashboardSectionRowChartSourceOutput
	ToDashboardSectionRowChartSourceOutputWithContext(context.Context) DashboardSectionRowChartSourceOutput
}

type DashboardSectionRowChartSourceArgs struct {
	// Whether the source is disabled
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Name of the source
	Name pulumi.StringInput `pulumi:"name"`
	// Query expression to plot on the chart
	Query pulumi.StringInput `pulumi:"query"`
	// Whether oir not this source line should have the query builder enabled
	QueryBuilderEnabled pulumi.BoolPtrInput `pulumi:"queryBuilderEnabled"`
	// For scatter plots, does this query source the X-axis or the Y-axis, `X`, or `Y`.
	ScatterPlotSource pulumi.StringPtrInput `pulumi:"scatterPlotSource"`
	// A description for the purpose of this source
	SourceDescription pulumi.StringPtrInput `pulumi:"sourceDescription"`
}

func (DashboardSectionRowChartSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionRowChartSource)(nil)).Elem()
}

func (i DashboardSectionRowChartSourceArgs) ToDashboardSectionRowChartSourceOutput() DashboardSectionRowChartSourceOutput {
	return i.ToDashboardSectionRowChartSourceOutputWithContext(context.Background())
}

func (i DashboardSectionRowChartSourceArgs) ToDashboardSectionRowChartSourceOutputWithContext(ctx context.Context) DashboardSectionRowChartSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionRowChartSourceOutput)
}

// DashboardSectionRowChartSourceArrayInput is an input type that accepts DashboardSectionRowChartSourceArray and DashboardSectionRowChartSourceArrayOutput values.
// You can construct a concrete instance of `DashboardSectionRowChartSourceArrayInput` via:
//
//          DashboardSectionRowChartSourceArray{ DashboardSectionRowChartSourceArgs{...} }
type DashboardSectionRowChartSourceArrayInput interface {
	pulumi.Input

	ToDashboardSectionRowChartSourceArrayOutput() DashboardSectionRowChartSourceArrayOutput
	ToDashboardSectionRowChartSourceArrayOutputWithContext(context.Context) DashboardSectionRowChartSourceArrayOutput
}

type DashboardSectionRowChartSourceArray []DashboardSectionRowChartSourceInput

func (DashboardSectionRowChartSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSectionRowChartSource)(nil)).Elem()
}

func (i DashboardSectionRowChartSourceArray) ToDashboardSectionRowChartSourceArrayOutput() DashboardSectionRowChartSourceArrayOutput {
	return i.ToDashboardSectionRowChartSourceArrayOutputWithContext(context.Background())
}

func (i DashboardSectionRowChartSourceArray) ToDashboardSectionRowChartSourceArrayOutputWithContext(ctx context.Context) DashboardSectionRowChartSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionRowChartSourceArrayOutput)
}

type DashboardSectionRowChartSourceOutput struct{ *pulumi.OutputState }

func (DashboardSectionRowChartSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionRowChartSource)(nil)).Elem()
}

func (o DashboardSectionRowChartSourceOutput) ToDashboardSectionRowChartSourceOutput() DashboardSectionRowChartSourceOutput {
	return o
}

func (o DashboardSectionRowChartSourceOutput) ToDashboardSectionRowChartSourceOutputWithContext(ctx context.Context) DashboardSectionRowChartSourceOutput {
	return o
}

// Whether the source is disabled
func (o DashboardSectionRowChartSourceOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartSource) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Name of the source
func (o DashboardSectionRowChartSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSectionRowChartSource) string { return v.Name }).(pulumi.StringOutput)
}

// Query expression to plot on the chart
func (o DashboardSectionRowChartSourceOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSectionRowChartSource) string { return v.Query }).(pulumi.StringOutput)
}

// Whether oir not this source line should have the query builder enabled
func (o DashboardSectionRowChartSourceOutput) QueryBuilderEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartSource) *bool { return v.QueryBuilderEnabled }).(pulumi.BoolPtrOutput)
}

// For scatter plots, does this query source the X-axis or the Y-axis, `X`, or `Y`.
func (o DashboardSectionRowChartSourceOutput) ScatterPlotSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartSource) *string { return v.ScatterPlotSource }).(pulumi.StringPtrOutput)
}

// A description for the purpose of this source
func (o DashboardSectionRowChartSourceOutput) SourceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionRowChartSource) *string { return v.SourceDescription }).(pulumi.StringPtrOutput)
}

type DashboardSectionRowChartSourceArrayOutput struct{ *pulumi.OutputState }

func (DashboardSectionRowChartSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSectionRowChartSource)(nil)).Elem()
}

func (o DashboardSectionRowChartSourceArrayOutput) ToDashboardSectionRowChartSourceArrayOutput() DashboardSectionRowChartSourceArrayOutput {
	return o
}

func (o DashboardSectionRowChartSourceArrayOutput) ToDashboardSectionRowChartSourceArrayOutputWithContext(ctx context.Context) DashboardSectionRowChartSourceArrayOutput {
	return o
}

func (o DashboardSectionRowChartSourceArrayOutput) Index(i pulumi.IntInput) DashboardSectionRowChartSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSectionRowChartSource {
		return vs[0].([]DashboardSectionRowChartSource)[vs[1].(int)]
	}).(DashboardSectionRowChartSourceOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertTargetRouteOutput{})
	pulumi.RegisterOutputType(AlertTargetRouteArrayOutput{})
	pulumi.RegisterOutputType(CloudIntegrationNewRelicMetricFilterOutput{})
	pulumi.RegisterOutputType(CloudIntegrationNewRelicMetricFilterArrayOutput{})
	pulumi.RegisterOutputType(DashboardParameterDetailOutput{})
	pulumi.RegisterOutputType(DashboardParameterDetailArrayOutput{})
	pulumi.RegisterOutputType(DashboardSectionOutput{})
	pulumi.RegisterOutputType(DashboardSectionArrayOutput{})
	pulumi.RegisterOutputType(DashboardSectionRowOutput{})
	pulumi.RegisterOutputType(DashboardSectionRowArrayOutput{})
	pulumi.RegisterOutputType(DashboardSectionRowChartOutput{})
	pulumi.RegisterOutputType(DashboardSectionRowChartArrayOutput{})
	pulumi.RegisterOutputType(DashboardSectionRowChartChartSettingOutput{})
	pulumi.RegisterOutputType(DashboardSectionRowChartSourceOutput{})
	pulumi.RegisterOutputType(DashboardSectionRowChartSourceArrayOutput{})
}
