// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Wavefront event resource. This allows events to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wavefront.NewEvent(ctx, "event", &wavefront.EventArgs{
//				Name: pulumi.String("terraform-test"),
//				Annotations: pulumi.StringMap{
//					"severity": pulumi.String("info"),
//					"type":     pulumi.String("event type"),
//					"details":  pulumi.String("description"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("eventTag1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import events by using the id, for example:
//
// ```sh
// $ pulumi import wavefront:index/event:Event event 1479868728473
// ```
type Event struct {
	pulumi.CustomResourceState

	// The annotations associated with the event.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	EndtimeKey  pulumi.IntPtrOutput    `pulumi:"endtimeKey"`
	// The name of the event as it is displayed in Wavefront.
	Name pulumi.StringOutput `pulumi:"name"`
	// The start time of the event in epoch milliseconds.
	StartTime pulumi.IntPtrOutput `pulumi:"startTime"`
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewEvent registers a new resource with the given unique name, arguments, and options.
func NewEvent(ctx *pulumi.Context,
	name string, args *EventArgs, opts ...pulumi.ResourceOption) (*Event, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Annotations == nil {
		return nil, errors.New("invalid value for required argument 'Annotations'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Event
	err := ctx.RegisterResource("wavefront:index/event:Event", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvent gets an existing Event resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventState, opts ...pulumi.ResourceOption) (*Event, error) {
	var resource Event
	err := ctx.ReadResource("wavefront:index/event:Event", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Event resources.
type eventState struct {
	// The annotations associated with the event.
	Annotations map[string]string `pulumi:"annotations"`
	EndtimeKey  *int              `pulumi:"endtimeKey"`
	// The name of the event as it is displayed in Wavefront.
	Name *string `pulumi:"name"`
	// The start time of the event in epoch milliseconds.
	StartTime *int `pulumi:"startTime"`
	// A set of tags to assign to this resource.
	Tags []string `pulumi:"tags"`
}

type EventState struct {
	// The annotations associated with the event.
	Annotations pulumi.StringMapInput
	EndtimeKey  pulumi.IntPtrInput
	// The name of the event as it is displayed in Wavefront.
	Name pulumi.StringPtrInput
	// The start time of the event in epoch milliseconds.
	StartTime pulumi.IntPtrInput
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayInput
}

func (EventState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventState)(nil)).Elem()
}

type eventArgs struct {
	// The annotations associated with the event.
	Annotations map[string]string `pulumi:"annotations"`
	EndtimeKey  *int              `pulumi:"endtimeKey"`
	// The name of the event as it is displayed in Wavefront.
	Name *string `pulumi:"name"`
	// The start time of the event in epoch milliseconds.
	StartTime *int `pulumi:"startTime"`
	// A set of tags to assign to this resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Event resource.
type EventArgs struct {
	// The annotations associated with the event.
	Annotations pulumi.StringMapInput
	EndtimeKey  pulumi.IntPtrInput
	// The name of the event as it is displayed in Wavefront.
	Name pulumi.StringPtrInput
	// The start time of the event in epoch milliseconds.
	StartTime pulumi.IntPtrInput
	// A set of tags to assign to this resource.
	Tags pulumi.StringArrayInput
}

func (EventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventArgs)(nil)).Elem()
}

type EventInput interface {
	pulumi.Input

	ToEventOutput() EventOutput
	ToEventOutputWithContext(ctx context.Context) EventOutput
}

func (*Event) ElementType() reflect.Type {
	return reflect.TypeOf((**Event)(nil)).Elem()
}

func (i *Event) ToEventOutput() EventOutput {
	return i.ToEventOutputWithContext(context.Background())
}

func (i *Event) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOutput)
}

// EventArrayInput is an input type that accepts EventArray and EventArrayOutput values.
// You can construct a concrete instance of `EventArrayInput` via:
//
//	EventArray{ EventArgs{...} }
type EventArrayInput interface {
	pulumi.Input

	ToEventArrayOutput() EventArrayOutput
	ToEventArrayOutputWithContext(context.Context) EventArrayOutput
}

type EventArray []EventInput

func (EventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Event)(nil)).Elem()
}

func (i EventArray) ToEventArrayOutput() EventArrayOutput {
	return i.ToEventArrayOutputWithContext(context.Background())
}

func (i EventArray) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventArrayOutput)
}

// EventMapInput is an input type that accepts EventMap and EventMapOutput values.
// You can construct a concrete instance of `EventMapInput` via:
//
//	EventMap{ "key": EventArgs{...} }
type EventMapInput interface {
	pulumi.Input

	ToEventMapOutput() EventMapOutput
	ToEventMapOutputWithContext(context.Context) EventMapOutput
}

type EventMap map[string]EventInput

func (EventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Event)(nil)).Elem()
}

func (i EventMap) ToEventMapOutput() EventMapOutput {
	return i.ToEventMapOutputWithContext(context.Background())
}

func (i EventMap) ToEventMapOutputWithContext(ctx context.Context) EventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventMapOutput)
}

type EventOutput struct{ *pulumi.OutputState }

func (EventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Event)(nil)).Elem()
}

func (o EventOutput) ToEventOutput() EventOutput {
	return o
}

func (o EventOutput) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return o
}

// The annotations associated with the event.
func (o EventOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Event) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o EventOutput) EndtimeKey() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Event) pulumi.IntPtrOutput { return v.EndtimeKey }).(pulumi.IntPtrOutput)
}

// The name of the event as it is displayed in Wavefront.
func (o EventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Event) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The start time of the event in epoch milliseconds.
func (o EventOutput) StartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Event) pulumi.IntPtrOutput { return v.StartTime }).(pulumi.IntPtrOutput)
}

// A set of tags to assign to this resource.
func (o EventOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Event) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type EventArrayOutput struct{ *pulumi.OutputState }

func (EventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Event)(nil)).Elem()
}

func (o EventArrayOutput) ToEventArrayOutput() EventArrayOutput {
	return o
}

func (o EventArrayOutput) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return o
}

func (o EventArrayOutput) Index(i pulumi.IntInput) EventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Event {
		return vs[0].([]*Event)[vs[1].(int)]
	}).(EventOutput)
}

type EventMapOutput struct{ *pulumi.OutputState }

func (EventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Event)(nil)).Elem()
}

func (o EventMapOutput) ToEventMapOutput() EventMapOutput {
	return o
}

func (o EventMapOutput) ToEventMapOutputWithContext(ctx context.Context) EventMapOutput {
	return o
}

func (o EventMapOutput) MapIndex(k pulumi.StringInput) EventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Event {
		return vs[0].(map[string]*Event)[vs[1].(string)]
	}).(EventOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventInput)(nil)).Elem(), &Event{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventArrayInput)(nil)).Elem(), EventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventMapInput)(nil)).Elem(), EventMap{})
	pulumi.RegisterOutputType(EventOutput{})
	pulumi.RegisterOutputType(EventArrayOutput{})
	pulumi.RegisterOutputType(EventMapOutput{})
}
