// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront User Resource. This allows users to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewUser(ctx, "basic", &wavefront.UserArgs{
// 			Email: pulumi.String("test+tftesting@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type User struct {
	pulumi.CustomResourceState

	Customer pulumi.StringOutput `pulumi:"customer"`
	// The (unique) identifier of the user to create. Must be a valid email address
	Email pulumi.StringOutput `pulumi:"email"`
	// List of permission to grant to this user.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// List of user groups to this user
	UserGroups pulumi.StringArrayOutput `pulumi:"userGroups"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	if args == nil {
		args = &UserArgs{}
	}
	var resource User
	err := ctx.RegisterResource("wavefront:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("wavefront:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	Customer *string `pulumi:"customer"`
	// The (unique) identifier of the user to create. Must be a valid email address
	Email *string `pulumi:"email"`
	// List of permission to grant to this user.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions []string `pulumi:"permissions"`
	// List of user groups to this user
	UserGroups []string `pulumi:"userGroups"`
}

type UserState struct {
	Customer pulumi.StringPtrInput
	// The (unique) identifier of the user to create. Must be a valid email address
	Email pulumi.StringPtrInput
	// List of permission to grant to this user.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions pulumi.StringArrayInput
	// List of user groups to this user
	UserGroups pulumi.StringArrayInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	Customer *string `pulumi:"customer"`
	// The (unique) identifier of the user to create. Must be a valid email address
	Email string `pulumi:"email"`
	// List of permission to grant to this user.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions []string `pulumi:"permissions"`
	// List of user groups to this user
	UserGroups []string `pulumi:"userGroups"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	Customer pulumi.StringPtrInput
	// The (unique) identifier of the user to create. Must be a valid email address
	Email pulumi.StringInput
	// List of permission to grant to this user.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions pulumi.StringArrayInput
	// List of user groups to this user
	UserGroups pulumi.StringArrayInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}
