// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "wavefront:index/alert:Alert":
		r = &Alert{}
	case "wavefront:index/alertTarget:AlertTarget":
		r = &AlertTarget{}
	case "wavefront:index/cloudIntegrationAppDynamics:CloudIntegrationAppDynamics":
		r = &CloudIntegrationAppDynamics{}
	case "wavefront:index/cloudIntegrationAwsExternalId:CloudIntegrationAwsExternalId":
		r = &CloudIntegrationAwsExternalId{}
	case "wavefront:index/cloudIntegrationAzure:CloudIntegrationAzure":
		r = &CloudIntegrationAzure{}
	case "wavefront:index/cloudIntegrationAzureActivityLog:CloudIntegrationAzureActivityLog":
		r = &CloudIntegrationAzureActivityLog{}
	case "wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail":
		r = &CloudIntegrationCloudTrail{}
	case "wavefront:index/cloudIntegrationCloudWatch:CloudIntegrationCloudWatch":
		r = &CloudIntegrationCloudWatch{}
	case "wavefront:index/cloudIntegrationEc2:CloudIntegrationEc2":
		r = &CloudIntegrationEc2{}
	case "wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp":
		r = &CloudIntegrationGcp{}
	case "wavefront:index/cloudIntegrationGcpBilling:CloudIntegrationGcpBilling":
		r = &CloudIntegrationGcpBilling{}
	case "wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic":
		r = &CloudIntegrationNewRelic{}
	case "wavefront:index/cloudIntegrationTesla:CloudIntegrationTesla":
		r = &CloudIntegrationTesla{}
	case "wavefront:index/dashboard:Dashboard":
		r = &Dashboard{}
	case "wavefront:index/dashboardJson:DashboardJson":
		r = &DashboardJson{}
	case "wavefront:index/derivedMetric:DerivedMetric":
		r = &DerivedMetric{}
	case "wavefront:index/externalLink:ExternalLink":
		r = &ExternalLink{}
	case "wavefront:index/ingestionPolicy:IngestionPolicy":
		r = &IngestionPolicy{}
	case "wavefront:index/maintenanceWindow:MaintenanceWindow":
		r = &MaintenanceWindow{}
	case "wavefront:index/role:Role":
		r = &Role{}
	case "wavefront:index/serviceAccount:ServiceAccount":
		r = &ServiceAccount{}
	case "wavefront:index/user:User":
		r = &User{}
	case "wavefront:index/userGroup:UserGroup":
		r = &UserGroup{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:wavefront" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/alert",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/alertTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationAppDynamics",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationAwsExternalId",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationAzure",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationAzureActivityLog",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationCloudTrail",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationCloudWatch",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationEc2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationGcp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationGcpBilling",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationNewRelic",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/cloudIntegrationTesla",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/dashboard",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/dashboardJson",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/derivedMetric",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/externalLink",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/ingestionPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/maintenanceWindow",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/role",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/serviceAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"wavefront",
		"index/userGroup",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"wavefront",
		&pkg{version},
	)
}
