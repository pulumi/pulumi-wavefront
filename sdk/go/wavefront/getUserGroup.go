// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a Wavefront user group by its ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Get the information about the user group.
//			_, err := wavefront.LookupUserGroup(ctx, &wavefront.LookupUserGroupArgs{
//				Id: "user-group-id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUserGroup(ctx *pulumi.Context, args *LookupUserGroupArgs, opts ...pulumi.InvokeOption) (*LookupUserGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserGroupResult
	err := ctx.Invoke("wavefront:index/getUserGroup:getUserGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserGroup.
type LookupUserGroupArgs struct {
	// The ID associated with the user group data to be fetched.
	Id string `pulumi:"id"`
}

// A collection of values returned by getUserGroup.
type LookupUserGroupResult struct {
	// Human-readable description of the group.
	Description string `pulumi:"description"`
	// The ID of the group in Wavefront.
	Id string `pulumi:"id"`
	// The name of the group in Wavefront.
	Name string `pulumi:"name"`
	// The list of roles associated with the group.
	Roles []string `pulumi:"roles"`
	// The list of users assigned to the group.
	Users []string `pulumi:"users"`
}

func LookupUserGroupOutput(ctx *pulumi.Context, args LookupUserGroupOutputArgs, opts ...pulumi.InvokeOption) LookupUserGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserGroupResultOutput, error) {
			args := v.(LookupUserGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("wavefront:index/getUserGroup:getUserGroup", args, LookupUserGroupResultOutput{}, options).(LookupUserGroupResultOutput), nil
		}).(LookupUserGroupResultOutput)
}

// A collection of arguments for invoking getUserGroup.
type LookupUserGroupOutputArgs struct {
	// The ID associated with the user group data to be fetched.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupUserGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserGroupArgs)(nil)).Elem()
}

// A collection of values returned by getUserGroup.
type LookupUserGroupResultOutput struct{ *pulumi.OutputState }

func (LookupUserGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserGroupResult)(nil)).Elem()
}

func (o LookupUserGroupResultOutput) ToLookupUserGroupResultOutput() LookupUserGroupResultOutput {
	return o
}

func (o LookupUserGroupResultOutput) ToLookupUserGroupResultOutputWithContext(ctx context.Context) LookupUserGroupResultOutput {
	return o
}

// Human-readable description of the group.
func (o LookupUserGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the group in Wavefront.
func (o LookupUserGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the group in Wavefront.
func (o LookupUserGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// The list of roles associated with the group.
func (o LookupUserGroupResultOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserGroupResult) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// The list of users assigned to the group.
func (o LookupUserGroupResultOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserGroupResult) []string { return v.Users }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserGroupResultOutput{})
}
