// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront Role Resource. This allows user groups to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewRole(ctx, "role", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Role struct {
	pulumi.CustomResourceState

	// A list of user groups or accounts to assign to this role.
	Assignees pulumi.StringArrayOutput `pulumi:"assignees"`
	// A short description of the user group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the user group
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of permissions to assign to this role. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		args = &RoleArgs{}
	}
	var resource Role
	err := ctx.RegisterResource("wavefront:index/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("wavefront:index/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// A list of user groups or accounts to assign to this role.
	Assignees []string `pulumi:"assignees"`
	// A short description of the user group
	Description *string `pulumi:"description"`
	// The name of the user group
	Name *string `pulumi:"name"`
	// A list of permissions to assign to this role. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions []string `pulumi:"permissions"`
}

type RoleState struct {
	// A list of user groups or accounts to assign to this role.
	Assignees pulumi.StringArrayInput
	// A short description of the user group
	Description pulumi.StringPtrInput
	// The name of the user group
	Name pulumi.StringPtrInput
	// A list of permissions to assign to this role. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions pulumi.StringArrayInput
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// A list of user groups or accounts to assign to this role.
	Assignees []string `pulumi:"assignees"`
	// A short description of the user group
	Description *string `pulumi:"description"`
	// The name of the user group
	Name *string `pulumi:"name"`
	// A list of permissions to assign to this role. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// A list of user groups or accounts to assign to this role.
	Assignees pulumi.StringArrayInput
	// A short description of the user group
	Description pulumi.StringPtrInput
	// The name of the user group
	Name pulumi.StringPtrInput
	// A list of permissions to assign to this role. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions pulumi.StringArrayInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}
