// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Wavefront Service Account Resource. This allows service accounts to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewServiceAccount(ctx, "basic", &wavefront.ServiceAccountArgs{
// 			Active:     pulumi.Bool(true),
// 			Identifier: pulumi.String("sa::tftesting"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Service accounts can be imported using `identifier`, e.g.
//
// ```sh
//  $ pulumi import wavefront:index/serviceAccount:ServiceAccount basic sa::tftesting
// ```
type ServiceAccount struct {
	pulumi.CustomResourceState

	// Whether or not the service account is active
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The description of the service account
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The (unique) identifier of the service account to create. Must start with sa::
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// ID of ingestion policy
	IngestionPolicy pulumi.StringPtrOutput `pulumi:"ingestionPolicy"`
	// List of permission to grant to this service account.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// List of user groups for this service account
	UserGroups pulumi.StringArrayOutput `pulumi:"userGroups"`
}

// NewServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewServiceAccount(ctx *pulumi.Context,
	name string, args *ServiceAccountArgs, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	var resource ServiceAccount
	err := ctx.RegisterResource("wavefront:index/serviceAccount:ServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccount gets an existing ServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountState, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	var resource ServiceAccount
	err := ctx.ReadResource("wavefront:index/serviceAccount:ServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccount resources.
type serviceAccountState struct {
	// Whether or not the service account is active
	Active *bool `pulumi:"active"`
	// The description of the service account
	Description *string `pulumi:"description"`
	// The (unique) identifier of the service account to create. Must start with sa::
	Identifier *string `pulumi:"identifier"`
	// ID of ingestion policy
	IngestionPolicy *string `pulumi:"ingestionPolicy"`
	// List of permission to grant to this service account.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions []string `pulumi:"permissions"`
	// List of user groups for this service account
	UserGroups []string `pulumi:"userGroups"`
}

type ServiceAccountState struct {
	// Whether or not the service account is active
	Active pulumi.BoolPtrInput
	// The description of the service account
	Description pulumi.StringPtrInput
	// The (unique) identifier of the service account to create. Must start with sa::
	Identifier pulumi.StringPtrInput
	// ID of ingestion policy
	IngestionPolicy pulumi.StringPtrInput
	// List of permission to grant to this service account.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions pulumi.StringArrayInput
	// List of user groups for this service account
	UserGroups pulumi.StringArrayInput
}

func (ServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountState)(nil)).Elem()
}

type serviceAccountArgs struct {
	// Whether or not the service account is active
	Active *bool `pulumi:"active"`
	// The description of the service account
	Description *string `pulumi:"description"`
	// The (unique) identifier of the service account to create. Must start with sa::
	Identifier string `pulumi:"identifier"`
	// ID of ingestion policy
	IngestionPolicy *string `pulumi:"ingestionPolicy"`
	// List of permission to grant to this service account.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions []string `pulumi:"permissions"`
	// List of user groups for this service account
	UserGroups []string `pulumi:"userGroups"`
}

// The set of arguments for constructing a ServiceAccount resource.
type ServiceAccountArgs struct {
	// Whether or not the service account is active
	Active pulumi.BoolPtrInput
	// The description of the service account
	Description pulumi.StringPtrInput
	// The (unique) identifier of the service account to create. Must start with sa::
	Identifier pulumi.StringInput
	// ID of ingestion policy
	IngestionPolicy pulumi.StringPtrInput
	// List of permission to grant to this service account.  Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, `userManagement`
	Permissions pulumi.StringArrayInput
	// List of user groups for this service account
	UserGroups pulumi.StringArrayInput
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountArgs)(nil)).Elem()
}

type ServiceAccountInput interface {
	pulumi.Input

	ToServiceAccountOutput() ServiceAccountOutput
	ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput
}

func (*ServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil))
}

func (i *ServiceAccount) ToServiceAccountOutput() ServiceAccountOutput {
	return i.ToServiceAccountOutputWithContext(context.Background())
}

func (i *ServiceAccount) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput)
}

type ServiceAccountOutput struct {
	*pulumi.OutputState
}

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil))
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceAccountOutput{})
}
