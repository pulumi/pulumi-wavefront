// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Wavefront Service Account Resource. This allows service accounts to be created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wavefront.NewServiceAccount(ctx, "basic", &wavefront.ServiceAccountArgs{
//				Active:     pulumi.Bool(true),
//				Identifier: pulumi.String("sa::tftesting"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service accounts can be imported by using `identifier`, e.g.
//
// ```sh
//
//	$ pulumi import wavefront:index/serviceAccount:ServiceAccount basic sa::tftesting
//
// ```
type ServiceAccount struct {
	pulumi.CustomResourceState

	// Whether or not the service account is active.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The description of the service account.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique identifier of the service account to create. Must have the prefix `sa::`.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// ID of ingestion policy.
	IngestionPolicy pulumi.StringPtrOutput `pulumi:"ingestionPolicy"`
	// List of permission to grant to this service account. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, and `userManagement`.
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// List of user groups for this service account.
	UserGroups pulumi.StringArrayOutput `pulumi:"userGroups"`
}

// NewServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewServiceAccount(ctx *pulumi.Context,
	name string, args *ServiceAccountArgs, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccount
	err := ctx.RegisterResource("wavefront:index/serviceAccount:ServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccount gets an existing ServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountState, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	var resource ServiceAccount
	err := ctx.ReadResource("wavefront:index/serviceAccount:ServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccount resources.
type serviceAccountState struct {
	// Whether or not the service account is active.
	Active *bool `pulumi:"active"`
	// The description of the service account.
	Description *string `pulumi:"description"`
	// The unique identifier of the service account to create. Must have the prefix `sa::`.
	Identifier *string `pulumi:"identifier"`
	// ID of ingestion policy.
	IngestionPolicy *string `pulumi:"ingestionPolicy"`
	// List of permission to grant to this service account. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, and `userManagement`.
	Permissions []string `pulumi:"permissions"`
	// List of user groups for this service account.
	UserGroups []string `pulumi:"userGroups"`
}

type ServiceAccountState struct {
	// Whether or not the service account is active.
	Active pulumi.BoolPtrInput
	// The description of the service account.
	Description pulumi.StringPtrInput
	// The unique identifier of the service account to create. Must have the prefix `sa::`.
	Identifier pulumi.StringPtrInput
	// ID of ingestion policy.
	IngestionPolicy pulumi.StringPtrInput
	// List of permission to grant to this service account. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, and `userManagement`.
	Permissions pulumi.StringArrayInput
	// List of user groups for this service account.
	UserGroups pulumi.StringArrayInput
}

func (ServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountState)(nil)).Elem()
}

type serviceAccountArgs struct {
	// Whether or not the service account is active.
	Active *bool `pulumi:"active"`
	// The description of the service account.
	Description *string `pulumi:"description"`
	// The unique identifier of the service account to create. Must have the prefix `sa::`.
	Identifier string `pulumi:"identifier"`
	// ID of ingestion policy.
	IngestionPolicy *string `pulumi:"ingestionPolicy"`
	// List of permission to grant to this service account. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, and `userManagement`.
	Permissions []string `pulumi:"permissions"`
	// List of user groups for this service account.
	UserGroups []string `pulumi:"userGroups"`
}

// The set of arguments for constructing a ServiceAccount resource.
type ServiceAccountArgs struct {
	// Whether or not the service account is active.
	Active pulumi.BoolPtrInput
	// The description of the service account.
	Description pulumi.StringPtrInput
	// The unique identifier of the service account to create. Must have the prefix `sa::`.
	Identifier pulumi.StringInput
	// ID of ingestion policy.
	IngestionPolicy pulumi.StringPtrInput
	// List of permission to grant to this service account. Valid options are
	// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
	// `hostTagManagement`, `metricsManagement`, and `userManagement`.
	Permissions pulumi.StringArrayInput
	// List of user groups for this service account.
	UserGroups pulumi.StringArrayInput
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountArgs)(nil)).Elem()
}

type ServiceAccountInput interface {
	pulumi.Input

	ToServiceAccountOutput() ServiceAccountOutput
	ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput
}

func (*ServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (i *ServiceAccount) ToServiceAccountOutput() ServiceAccountOutput {
	return i.ToServiceAccountOutputWithContext(context.Background())
}

func (i *ServiceAccount) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput)
}

// ServiceAccountArrayInput is an input type that accepts ServiceAccountArray and ServiceAccountArrayOutput values.
// You can construct a concrete instance of `ServiceAccountArrayInput` via:
//
//	ServiceAccountArray{ ServiceAccountArgs{...} }
type ServiceAccountArrayInput interface {
	pulumi.Input

	ToServiceAccountArrayOutput() ServiceAccountArrayOutput
	ToServiceAccountArrayOutputWithContext(context.Context) ServiceAccountArrayOutput
}

type ServiceAccountArray []ServiceAccountInput

func (ServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArray) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return i.ToServiceAccountArrayOutputWithContext(context.Background())
}

func (i ServiceAccountArray) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountArrayOutput)
}

// ServiceAccountMapInput is an input type that accepts ServiceAccountMap and ServiceAccountMapOutput values.
// You can construct a concrete instance of `ServiceAccountMapInput` via:
//
//	ServiceAccountMap{ "key": ServiceAccountArgs{...} }
type ServiceAccountMapInput interface {
	pulumi.Input

	ToServiceAccountMapOutput() ServiceAccountMapOutput
	ToServiceAccountMapOutputWithContext(context.Context) ServiceAccountMapOutput
}

type ServiceAccountMap map[string]ServiceAccountInput

func (ServiceAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountMap) ToServiceAccountMapOutput() ServiceAccountMapOutput {
	return i.ToServiceAccountMapOutputWithContext(context.Background())
}

func (i ServiceAccountMap) ToServiceAccountMapOutputWithContext(ctx context.Context) ServiceAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountMapOutput)
}

type ServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

// Whether or not the service account is active.
func (o ServiceAccountOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The description of the service account.
func (o ServiceAccountOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier of the service account to create. Must have the prefix `sa::`.
func (o ServiceAccountOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// ID of ingestion policy.
func (o ServiceAccountOutput) IngestionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringPtrOutput { return v.IngestionPolicy }).(pulumi.StringPtrOutput)
}

// List of permission to grant to this service account. Valid options are
// `agentManagement`, `alertsManagement`, `dashboardManagement`, `embeddedCharts`, `eventsManagement`, `externalLinksManagement`,
// `hostTagManagement`, `metricsManagement`, and `userManagement`.
func (o ServiceAccountOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

// List of user groups for this service account.
func (o ServiceAccountOutput) UserGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringArrayOutput { return v.UserGroups }).(pulumi.StringArrayOutput)
}

type ServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) Index(i pulumi.IntInput) ServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceAccount {
		return vs[0].([]*ServiceAccount)[vs[1].(int)]
	}).(ServiceAccountOutput)
}

type ServiceAccountMapOutput struct{ *pulumi.OutputState }

func (ServiceAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountMapOutput) ToServiceAccountMapOutput() ServiceAccountMapOutput {
	return o
}

func (o ServiceAccountMapOutput) ToServiceAccountMapOutputWithContext(ctx context.Context) ServiceAccountMapOutput {
	return o
}

func (o ServiceAccountMapOutput) MapIndex(k pulumi.StringInput) ServiceAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceAccount {
		return vs[0].(map[string]*ServiceAccount)[vs[1].(string)]
	}).(ServiceAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountInput)(nil)).Elem(), &ServiceAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountArrayInput)(nil)).Elem(), ServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountMapInput)(nil)).Elem(), ServiceAccountMap{})
	pulumi.RegisterOutputType(ServiceAccountOutput{})
	pulumi.RegisterOutputType(ServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountMapOutput{})
}
