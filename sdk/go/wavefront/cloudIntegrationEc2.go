// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Wavefront Cloud Integration for EC2. This allows EC2 cloud integrations to be created,
// updated, and deleted.
//
// ## Import
//
// EC2 Cloud Integrations can be imported by using the `id`, e.g.:
//
// ```sh
//
//	$ pulumi import wavefront:index/cloudIntegrationEc2:CloudIntegrationEc2 ec2 a411c16b-3cf7-4f03-bf11-8ca05aab898d
//
// ```
type CloudIntegrationEc2 struct {
	pulumi.CustomResourceState

	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags pulumi.StringMapOutput `pulumi:"additionalTags"`
	// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
	ExternalId pulumi.StringOutput `pulumi:"externalId"`
	// Forces this resource to save, even if errors are present.
	ForceSave pulumi.BoolPtrOutput `pulumi:"forceSave"`
	// A list of AWS instance tags to use as the `source` name
	// in a series. Default is `["hostname", "host", "name"]`. If no tag in the list is found, the series source
	// is set to the instance id.
	HostnameTags pulumi.StringArrayOutput `pulumi:"hostnameTags"`
	// The human-readable name of this integration.
	Name pulumi.StringOutput `pulumi:"name"`
	// The external ID corresponding to the Role ARN.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// A value denoting which cloud service this service integrates with.
	Service pulumi.StringOutput `pulumi:"service"`
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes pulumi.IntPtrOutput `pulumi:"serviceRefreshRateInMinutes"`
}

// NewCloudIntegrationEc2 registers a new resource with the given unique name, arguments, and options.
func NewCloudIntegrationEc2(ctx *pulumi.Context,
	name string, args *CloudIntegrationEc2Args, opts ...pulumi.ResourceOption) (*CloudIntegrationEc2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalId'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudIntegrationEc2
	err := ctx.RegisterResource("wavefront:index/cloudIntegrationEc2:CloudIntegrationEc2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudIntegrationEc2 gets an existing CloudIntegrationEc2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudIntegrationEc2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudIntegrationEc2State, opts ...pulumi.ResourceOption) (*CloudIntegrationEc2, error) {
	var resource CloudIntegrationEc2
	err := ctx.ReadResource("wavefront:index/cloudIntegrationEc2:CloudIntegrationEc2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudIntegrationEc2 resources.
type cloudIntegrationEc2State struct {
	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags map[string]string `pulumi:"additionalTags"`
	// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
	ExternalId *string `pulumi:"externalId"`
	// Forces this resource to save, even if errors are present.
	ForceSave *bool `pulumi:"forceSave"`
	// A list of AWS instance tags to use as the `source` name
	// in a series. Default is `["hostname", "host", "name"]`. If no tag in the list is found, the series source
	// is set to the instance id.
	HostnameTags []string `pulumi:"hostnameTags"`
	// The human-readable name of this integration.
	Name *string `pulumi:"name"`
	// The external ID corresponding to the Role ARN.
	RoleArn *string `pulumi:"roleArn"`
	// A value denoting which cloud service this service integrates with.
	Service *string `pulumi:"service"`
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes *int `pulumi:"serviceRefreshRateInMinutes"`
}

type CloudIntegrationEc2State struct {
	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags pulumi.StringMapInput
	// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
	ExternalId pulumi.StringPtrInput
	// Forces this resource to save, even if errors are present.
	ForceSave pulumi.BoolPtrInput
	// A list of AWS instance tags to use as the `source` name
	// in a series. Default is `["hostname", "host", "name"]`. If no tag in the list is found, the series source
	// is set to the instance id.
	HostnameTags pulumi.StringArrayInput
	// The human-readable name of this integration.
	Name pulumi.StringPtrInput
	// The external ID corresponding to the Role ARN.
	RoleArn pulumi.StringPtrInput
	// A value denoting which cloud service this service integrates with.
	Service pulumi.StringPtrInput
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes pulumi.IntPtrInput
}

func (CloudIntegrationEc2State) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudIntegrationEc2State)(nil)).Elem()
}

type cloudIntegrationEc2Args struct {
	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags map[string]string `pulumi:"additionalTags"`
	// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
	ExternalId string `pulumi:"externalId"`
	// Forces this resource to save, even if errors are present.
	ForceSave *bool `pulumi:"forceSave"`
	// A list of AWS instance tags to use as the `source` name
	// in a series. Default is `["hostname", "host", "name"]`. If no tag in the list is found, the series source
	// is set to the instance id.
	HostnameTags []string `pulumi:"hostnameTags"`
	// The human-readable name of this integration.
	Name *string `pulumi:"name"`
	// The external ID corresponding to the Role ARN.
	RoleArn string `pulumi:"roleArn"`
	// A value denoting which cloud service this service integrates with.
	Service string `pulumi:"service"`
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes *int `pulumi:"serviceRefreshRateInMinutes"`
}

// The set of arguments for constructing a CloudIntegrationEc2 resource.
type CloudIntegrationEc2Args struct {
	// A list of point tag key-values to add to every point ingested using this integration.
	AdditionalTags pulumi.StringMapInput
	// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
	ExternalId pulumi.StringInput
	// Forces this resource to save, even if errors are present.
	ForceSave pulumi.BoolPtrInput
	// A list of AWS instance tags to use as the `source` name
	// in a series. Default is `["hostname", "host", "name"]`. If no tag in the list is found, the series source
	// is set to the instance id.
	HostnameTags pulumi.StringArrayInput
	// The human-readable name of this integration.
	Name pulumi.StringPtrInput
	// The external ID corresponding to the Role ARN.
	RoleArn pulumi.StringInput
	// A value denoting which cloud service this service integrates with.
	Service pulumi.StringInput
	// How often, in minutes, to refresh the service.
	ServiceRefreshRateInMinutes pulumi.IntPtrInput
}

func (CloudIntegrationEc2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudIntegrationEc2Args)(nil)).Elem()
}

type CloudIntegrationEc2Input interface {
	pulumi.Input

	ToCloudIntegrationEc2Output() CloudIntegrationEc2Output
	ToCloudIntegrationEc2OutputWithContext(ctx context.Context) CloudIntegrationEc2Output
}

func (*CloudIntegrationEc2) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudIntegrationEc2)(nil)).Elem()
}

func (i *CloudIntegrationEc2) ToCloudIntegrationEc2Output() CloudIntegrationEc2Output {
	return i.ToCloudIntegrationEc2OutputWithContext(context.Background())
}

func (i *CloudIntegrationEc2) ToCloudIntegrationEc2OutputWithContext(ctx context.Context) CloudIntegrationEc2Output {
	return pulumi.ToOutputWithContext(ctx, i).(CloudIntegrationEc2Output)
}

func (i *CloudIntegrationEc2) ToOutput(ctx context.Context) pulumix.Output[*CloudIntegrationEc2] {
	return pulumix.Output[*CloudIntegrationEc2]{
		OutputState: i.ToCloudIntegrationEc2OutputWithContext(ctx).OutputState,
	}
}

// CloudIntegrationEc2ArrayInput is an input type that accepts CloudIntegrationEc2Array and CloudIntegrationEc2ArrayOutput values.
// You can construct a concrete instance of `CloudIntegrationEc2ArrayInput` via:
//
//	CloudIntegrationEc2Array{ CloudIntegrationEc2Args{...} }
type CloudIntegrationEc2ArrayInput interface {
	pulumi.Input

	ToCloudIntegrationEc2ArrayOutput() CloudIntegrationEc2ArrayOutput
	ToCloudIntegrationEc2ArrayOutputWithContext(context.Context) CloudIntegrationEc2ArrayOutput
}

type CloudIntegrationEc2Array []CloudIntegrationEc2Input

func (CloudIntegrationEc2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudIntegrationEc2)(nil)).Elem()
}

func (i CloudIntegrationEc2Array) ToCloudIntegrationEc2ArrayOutput() CloudIntegrationEc2ArrayOutput {
	return i.ToCloudIntegrationEc2ArrayOutputWithContext(context.Background())
}

func (i CloudIntegrationEc2Array) ToCloudIntegrationEc2ArrayOutputWithContext(ctx context.Context) CloudIntegrationEc2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudIntegrationEc2ArrayOutput)
}

func (i CloudIntegrationEc2Array) ToOutput(ctx context.Context) pulumix.Output[[]*CloudIntegrationEc2] {
	return pulumix.Output[[]*CloudIntegrationEc2]{
		OutputState: i.ToCloudIntegrationEc2ArrayOutputWithContext(ctx).OutputState,
	}
}

// CloudIntegrationEc2MapInput is an input type that accepts CloudIntegrationEc2Map and CloudIntegrationEc2MapOutput values.
// You can construct a concrete instance of `CloudIntegrationEc2MapInput` via:
//
//	CloudIntegrationEc2Map{ "key": CloudIntegrationEc2Args{...} }
type CloudIntegrationEc2MapInput interface {
	pulumi.Input

	ToCloudIntegrationEc2MapOutput() CloudIntegrationEc2MapOutput
	ToCloudIntegrationEc2MapOutputWithContext(context.Context) CloudIntegrationEc2MapOutput
}

type CloudIntegrationEc2Map map[string]CloudIntegrationEc2Input

func (CloudIntegrationEc2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudIntegrationEc2)(nil)).Elem()
}

func (i CloudIntegrationEc2Map) ToCloudIntegrationEc2MapOutput() CloudIntegrationEc2MapOutput {
	return i.ToCloudIntegrationEc2MapOutputWithContext(context.Background())
}

func (i CloudIntegrationEc2Map) ToCloudIntegrationEc2MapOutputWithContext(ctx context.Context) CloudIntegrationEc2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudIntegrationEc2MapOutput)
}

func (i CloudIntegrationEc2Map) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudIntegrationEc2] {
	return pulumix.Output[map[string]*CloudIntegrationEc2]{
		OutputState: i.ToCloudIntegrationEc2MapOutputWithContext(ctx).OutputState,
	}
}

type CloudIntegrationEc2Output struct{ *pulumi.OutputState }

func (CloudIntegrationEc2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudIntegrationEc2)(nil)).Elem()
}

func (o CloudIntegrationEc2Output) ToCloudIntegrationEc2Output() CloudIntegrationEc2Output {
	return o
}

func (o CloudIntegrationEc2Output) ToCloudIntegrationEc2OutputWithContext(ctx context.Context) CloudIntegrationEc2Output {
	return o
}

func (o CloudIntegrationEc2Output) ToOutput(ctx context.Context) pulumix.Output[*CloudIntegrationEc2] {
	return pulumix.Output[*CloudIntegrationEc2]{
		OutputState: o.OutputState,
	}
}

// A list of point tag key-values to add to every point ingested using this integration.
func (o CloudIntegrationEc2Output) AdditionalTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudIntegrationEc2) pulumi.StringMapOutput { return v.AdditionalTags }).(pulumi.StringMapOutput)
}

// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront.
func (o CloudIntegrationEc2Output) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudIntegrationEc2) pulumi.StringOutput { return v.ExternalId }).(pulumi.StringOutput)
}

// Forces this resource to save, even if errors are present.
func (o CloudIntegrationEc2Output) ForceSave() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudIntegrationEc2) pulumi.BoolPtrOutput { return v.ForceSave }).(pulumi.BoolPtrOutput)
}

// A list of AWS instance tags to use as the `source` name
// in a series. Default is `["hostname", "host", "name"]`. If no tag in the list is found, the series source
// is set to the instance id.
func (o CloudIntegrationEc2Output) HostnameTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudIntegrationEc2) pulumi.StringArrayOutput { return v.HostnameTags }).(pulumi.StringArrayOutput)
}

// The human-readable name of this integration.
func (o CloudIntegrationEc2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudIntegrationEc2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The external ID corresponding to the Role ARN.
func (o CloudIntegrationEc2Output) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudIntegrationEc2) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// A value denoting which cloud service this service integrates with.
func (o CloudIntegrationEc2Output) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudIntegrationEc2) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// How often, in minutes, to refresh the service.
func (o CloudIntegrationEc2Output) ServiceRefreshRateInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudIntegrationEc2) pulumi.IntPtrOutput { return v.ServiceRefreshRateInMinutes }).(pulumi.IntPtrOutput)
}

type CloudIntegrationEc2ArrayOutput struct{ *pulumi.OutputState }

func (CloudIntegrationEc2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudIntegrationEc2)(nil)).Elem()
}

func (o CloudIntegrationEc2ArrayOutput) ToCloudIntegrationEc2ArrayOutput() CloudIntegrationEc2ArrayOutput {
	return o
}

func (o CloudIntegrationEc2ArrayOutput) ToCloudIntegrationEc2ArrayOutputWithContext(ctx context.Context) CloudIntegrationEc2ArrayOutput {
	return o
}

func (o CloudIntegrationEc2ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CloudIntegrationEc2] {
	return pulumix.Output[[]*CloudIntegrationEc2]{
		OutputState: o.OutputState,
	}
}

func (o CloudIntegrationEc2ArrayOutput) Index(i pulumi.IntInput) CloudIntegrationEc2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudIntegrationEc2 {
		return vs[0].([]*CloudIntegrationEc2)[vs[1].(int)]
	}).(CloudIntegrationEc2Output)
}

type CloudIntegrationEc2MapOutput struct{ *pulumi.OutputState }

func (CloudIntegrationEc2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudIntegrationEc2)(nil)).Elem()
}

func (o CloudIntegrationEc2MapOutput) ToCloudIntegrationEc2MapOutput() CloudIntegrationEc2MapOutput {
	return o
}

func (o CloudIntegrationEc2MapOutput) ToCloudIntegrationEc2MapOutputWithContext(ctx context.Context) CloudIntegrationEc2MapOutput {
	return o
}

func (o CloudIntegrationEc2MapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudIntegrationEc2] {
	return pulumix.Output[map[string]*CloudIntegrationEc2]{
		OutputState: o.OutputState,
	}
}

func (o CloudIntegrationEc2MapOutput) MapIndex(k pulumi.StringInput) CloudIntegrationEc2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudIntegrationEc2 {
		return vs[0].(map[string]*CloudIntegrationEc2)[vs[1].(string)]
	}).(CloudIntegrationEc2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudIntegrationEc2Input)(nil)).Elem(), &CloudIntegrationEc2{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudIntegrationEc2ArrayInput)(nil)).Elem(), CloudIntegrationEc2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudIntegrationEc2MapInput)(nil)).Elem(), CloudIntegrationEc2Map{})
	pulumi.RegisterOutputType(CloudIntegrationEc2Output{})
	pulumi.RegisterOutputType(CloudIntegrationEc2ArrayOutput{})
	pulumi.RegisterOutputType(CloudIntegrationEc2MapOutput{})
}
