// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a certain Wavefront derived metric by its ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wavefront.LookupDerivedMetric(ctx, &wavefront.LookupDerivedMetricArgs{
//				Id: "derived_metric_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDerivedMetric(ctx *pulumi.Context, args *LookupDerivedMetricArgs, opts ...pulumi.InvokeOption) (*LookupDerivedMetricResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDerivedMetricResult
	err := ctx.Invoke("wavefront:index/getDerivedMetric:getDerivedMetric", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDerivedMetric.
type LookupDerivedMetricArgs struct {
	// The ID associated with the derived metric data to be fetched.
	Id string `pulumi:"id"`
}

// A collection of values returned by getDerivedMetric.
type LookupDerivedMetricResult struct {
	// User-supplied additional explanatory information about the derived metric.
	AdditionalInformation string `pulumi:"additionalInformation"`
	// The ID of the user who created the derived metric.
	CreateUserId string `pulumi:"createUserId"`
	// The timestamp in epoch milliseconds indicating when the derived metric is created.
	CreatedEpochMillis int `pulumi:"createdEpochMillis"`
	// A Boolean flag indicating whether the derived metric is deleted or not.
	Deleted bool `pulumi:"deleted"`
	// A list of hosts used in the derived metric.
	HostsUseds []string `pulumi:"hostsUseds"`
	// The ID of the derived metric in Wavefront.
	Id string `pulumi:"id"`
	// A Boolean variable indicating trash status.
	InTrash bool `pulumi:"inTrash"`
	// A Boolean flag indicating whether to include obsolete metrics or not.
	IncludeObsoleteMetrics bool `pulumi:"includeObsoleteMetrics"`
	// Last error message occurred.
	LastErrorMessage string `pulumi:"lastErrorMessage"`
	// Timestamp of the last failed derived metric.
	LastFailedTime int `pulumi:"lastFailedTime"`
	// The last processed timestamp.
	LastProcessedMillis int `pulumi:"lastProcessedMillis"`
	// The timestamp indicating the last time the query was executed.
	LastQueryTime int `pulumi:"lastQueryTime"`
	// A list of metrics used in the derived metric.
	MetricsUseds []string `pulumi:"metricsUseds"`
	// How frequently the query generating the derived metric is run.
	Minutes int `pulumi:"minutes"`
	// The name of the derived metric in Wavefront.
	Name string `pulumi:"name"`
	// The number of points scanned when last query was executed.
	PointsScannedAtLastQuery int `pulumi:"pointsScannedAtLastQuery"`
	// The specified query is executed every `processRateMinutes` minutes.
	ProcessRateMinutes int `pulumi:"processRateMinutes"`
	// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
	Query string `pulumi:"query"`
	// A Boolean variable indicating whether query is failing for the derived metric.
	QueryFailing bool `pulumi:"queryFailing"`
	// A Boolean flag for enabling `queryQb`
	QueryQbEnabled bool `pulumi:"queryQbEnabled"`
	// The status of the derived metric.
	Statuses []string `pulumi:"statuses"`
	// A set of tags assigned to the derived metric.
	Tags []string `pulumi:"tags"`
	// The ID of the user who updated the derived metric.
	UpdateUserId string `pulumi:"updateUserId"`
	// The timestamp in epoch milliseconds indicating when the derived metric is updated.
	UpdatedEpochMillis int `pulumi:"updatedEpochMillis"`
}

func LookupDerivedMetricOutput(ctx *pulumi.Context, args LookupDerivedMetricOutputArgs, opts ...pulumi.InvokeOption) LookupDerivedMetricResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDerivedMetricResult, error) {
			args := v.(LookupDerivedMetricArgs)
			r, err := LookupDerivedMetric(ctx, &args, opts...)
			var s LookupDerivedMetricResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDerivedMetricResultOutput)
}

// A collection of arguments for invoking getDerivedMetric.
type LookupDerivedMetricOutputArgs struct {
	// The ID associated with the derived metric data to be fetched.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDerivedMetricOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDerivedMetricArgs)(nil)).Elem()
}

// A collection of values returned by getDerivedMetric.
type LookupDerivedMetricResultOutput struct{ *pulumi.OutputState }

func (LookupDerivedMetricResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDerivedMetricResult)(nil)).Elem()
}

func (o LookupDerivedMetricResultOutput) ToLookupDerivedMetricResultOutput() LookupDerivedMetricResultOutput {
	return o
}

func (o LookupDerivedMetricResultOutput) ToLookupDerivedMetricResultOutputWithContext(ctx context.Context) LookupDerivedMetricResultOutput {
	return o
}

func (o LookupDerivedMetricResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDerivedMetricResult] {
	return pulumix.Output[LookupDerivedMetricResult]{
		OutputState: o.OutputState,
	}
}

// User-supplied additional explanatory information about the derived metric.
func (o LookupDerivedMetricResultOutput) AdditionalInformation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) string { return v.AdditionalInformation }).(pulumi.StringOutput)
}

// The ID of the user who created the derived metric.
func (o LookupDerivedMetricResultOutput) CreateUserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) string { return v.CreateUserId }).(pulumi.StringOutput)
}

// The timestamp in epoch milliseconds indicating when the derived metric is created.
func (o LookupDerivedMetricResultOutput) CreatedEpochMillis() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) int { return v.CreatedEpochMillis }).(pulumi.IntOutput)
}

// A Boolean flag indicating whether the derived metric is deleted or not.
func (o LookupDerivedMetricResultOutput) Deleted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) bool { return v.Deleted }).(pulumi.BoolOutput)
}

// A list of hosts used in the derived metric.
func (o LookupDerivedMetricResultOutput) HostsUseds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) []string { return v.HostsUseds }).(pulumi.StringArrayOutput)
}

// The ID of the derived metric in Wavefront.
func (o LookupDerivedMetricResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) string { return v.Id }).(pulumi.StringOutput)
}

// A Boolean variable indicating trash status.
func (o LookupDerivedMetricResultOutput) InTrash() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) bool { return v.InTrash }).(pulumi.BoolOutput)
}

// A Boolean flag indicating whether to include obsolete metrics or not.
func (o LookupDerivedMetricResultOutput) IncludeObsoleteMetrics() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) bool { return v.IncludeObsoleteMetrics }).(pulumi.BoolOutput)
}

// Last error message occurred.
func (o LookupDerivedMetricResultOutput) LastErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) string { return v.LastErrorMessage }).(pulumi.StringOutput)
}

// Timestamp of the last failed derived metric.
func (o LookupDerivedMetricResultOutput) LastFailedTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) int { return v.LastFailedTime }).(pulumi.IntOutput)
}

// The last processed timestamp.
func (o LookupDerivedMetricResultOutput) LastProcessedMillis() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) int { return v.LastProcessedMillis }).(pulumi.IntOutput)
}

// The timestamp indicating the last time the query was executed.
func (o LookupDerivedMetricResultOutput) LastQueryTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) int { return v.LastQueryTime }).(pulumi.IntOutput)
}

// A list of metrics used in the derived metric.
func (o LookupDerivedMetricResultOutput) MetricsUseds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) []string { return v.MetricsUseds }).(pulumi.StringArrayOutput)
}

// How frequently the query generating the derived metric is run.
func (o LookupDerivedMetricResultOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) int { return v.Minutes }).(pulumi.IntOutput)
}

// The name of the derived metric in Wavefront.
func (o LookupDerivedMetricResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of points scanned when last query was executed.
func (o LookupDerivedMetricResultOutput) PointsScannedAtLastQuery() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) int { return v.PointsScannedAtLastQuery }).(pulumi.IntOutput)
}

// The specified query is executed every `processRateMinutes` minutes.
func (o LookupDerivedMetricResultOutput) ProcessRateMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) int { return v.ProcessRateMinutes }).(pulumi.IntOutput)
}

// A Wavefront query that is evaluated at regular intervals (default is 1 minute).
func (o LookupDerivedMetricResultOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) string { return v.Query }).(pulumi.StringOutput)
}

// A Boolean variable indicating whether query is failing for the derived metric.
func (o LookupDerivedMetricResultOutput) QueryFailing() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) bool { return v.QueryFailing }).(pulumi.BoolOutput)
}

// A Boolean flag for enabling `queryQb`
func (o LookupDerivedMetricResultOutput) QueryQbEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) bool { return v.QueryQbEnabled }).(pulumi.BoolOutput)
}

// The status of the derived metric.
func (o LookupDerivedMetricResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// A set of tags assigned to the derived metric.
func (o LookupDerivedMetricResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The ID of the user who updated the derived metric.
func (o LookupDerivedMetricResultOutput) UpdateUserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) string { return v.UpdateUserId }).(pulumi.StringOutput)
}

// The timestamp in epoch milliseconds indicating when the derived metric is updated.
func (o LookupDerivedMetricResultOutput) UpdatedEpochMillis() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDerivedMetricResult) int { return v.UpdatedEpochMillis }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDerivedMetricResultOutput{})
}
