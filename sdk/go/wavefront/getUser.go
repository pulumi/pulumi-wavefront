// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information for a given user by email from Wavefront.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Get the info for user "example.user@example.com"
//			_, err := wavefront.LookupUser(ctx, &wavefront.LookupUserArgs{
//				Email: "example.user@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("wavefront:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The email associated with the user data to be fetched.
	Email string `pulumi:"email"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// The customer the user is associated with.
	Customer string `pulumi:"customer"`
	Email    string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// When the user last logged in to Wavefront.
	LastSuccessfulLogin int `pulumi:"lastSuccessfulLogin"`
	// List of permissions granted to a user.
	Permissions []string `pulumi:"permissions"`
	// List of User Group Ids the user is a member of.
	UserGroupIds []string `pulumi:"userGroupIds"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserResultOutput, error) {
			args := v.(LookupUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("wavefront:index/getUser:getUser", args, LookupUserResultOutput{}, options).(LookupUserResultOutput), nil
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// The email associated with the user data to be fetched.
	Email pulumi.StringInput `pulumi:"email"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// The customer the user is associated with.
func (o LookupUserResultOutput) Customer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Customer }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// When the user last logged in to Wavefront.
func (o LookupUserResultOutput) LastSuccessfulLogin() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserResult) int { return v.LastSuccessfulLogin }).(pulumi.IntOutput)
}

// List of permissions granted to a user.
func (o LookupUserResultOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// List of User Group Ids the user is a member of.
func (o LookupUserResultOutput) UserGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.UserGroupIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
