// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Wavefront Maintenance Window Resource. This allows maintenance windows to be created, updated, and deleted.
//
// ## Example usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-wavefront/sdk/v3/go/wavefront"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wavefront.NewMaintenanceWindow(ctx, "basic", &wavefront.MaintenanceWindowArgs{
//				Reason:             pulumi.String("Routine maintenance for 2020"),
//				Title:              pulumi.String("Routine maintenance"),
//				StartTimeInSeconds: pulumi.Int(1600123456),
//				EndTimeInSeconds:   pulumi.Int(1601123456),
//				RelevantHostNames: pulumi.StringArray{
//					pulumi.String("my_hostname"),
//					pulumi.String("my_other_hostname"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Maintenance windows can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import wavefront:index/maintenanceWindow:MaintenanceWindow basic 1600383357095
// ```
type MaintenanceWindow struct {
	pulumi.CustomResourceState

	// end time in seconds after 1 Jan 1970 GMT.
	EndTimeInSeconds pulumi.IntOutput `pulumi:"endTimeInSeconds"`
	// If `true`, a source/host must be in `relevantHostNames`
	// and have tags matching the specification formed by `relevantHostTags` and `relevantHostTagsAnded` in
	// order for this maintenance window to apply. If `false`, a source/host must either be in `relevantHostNames`
	// or match `relevantHostTags` and `relevantHostTagsAnded`. Default: `false`.
	HostTagGroupHostNamesGroupAnded pulumi.BoolPtrOutput `pulumi:"hostTagGroupHostNamesGroupAnded"`
	// The reason for the maintenance window.
	Reason pulumi.StringOutput `pulumi:"reason"`
	// List of alert tags whose matching alerts will be put into maintenance because
	// of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantCustomerTags pulumi.StringArrayOutput `pulumi:"relevantCustomerTags"`
	// List of source/host names that will be put into maintenance because of this
	// maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantHostNames pulumi.StringArrayOutput `pulumi:"relevantHostNames"`
	// List of source/host tags whose matching sources/hosts will be put into maintenance
	// because of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or
	// `relevantHostNames` is required.
	RelevantHostTags pulumi.StringArrayOutput `pulumi:"relevantHostTags"`
	// Whether to AND source/host tags listed in `relevantHostTags`.
	// If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
	// the tags are OR'ed, and a source/host must contain one of the tags. Default: `false`.
	RelevantHostTagsAnded pulumi.BoolPtrOutput `pulumi:"relevantHostTagsAnded"`
	// start time in seconds after 1 Jan 1970 GMT.
	StartTimeInSeconds pulumi.IntOutput `pulumi:"startTimeInSeconds"`
	// The title of the maintenance window.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewMaintenanceWindow registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindow(ctx *pulumi.Context,
	name string, args *MaintenanceWindowArgs, opts ...pulumi.ResourceOption) (*MaintenanceWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndTimeInSeconds == nil {
		return nil, errors.New("invalid value for required argument 'EndTimeInSeconds'")
	}
	if args.Reason == nil {
		return nil, errors.New("invalid value for required argument 'Reason'")
	}
	if args.StartTimeInSeconds == nil {
		return nil, errors.New("invalid value for required argument 'StartTimeInSeconds'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MaintenanceWindow
	err := ctx.RegisterResource("wavefront:index/maintenanceWindow:MaintenanceWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenanceWindow gets an existing MaintenanceWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceWindowState, opts ...pulumi.ResourceOption) (*MaintenanceWindow, error) {
	var resource MaintenanceWindow
	err := ctx.ReadResource("wavefront:index/maintenanceWindow:MaintenanceWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaintenanceWindow resources.
type maintenanceWindowState struct {
	// end time in seconds after 1 Jan 1970 GMT.
	EndTimeInSeconds *int `pulumi:"endTimeInSeconds"`
	// If `true`, a source/host must be in `relevantHostNames`
	// and have tags matching the specification formed by `relevantHostTags` and `relevantHostTagsAnded` in
	// order for this maintenance window to apply. If `false`, a source/host must either be in `relevantHostNames`
	// or match `relevantHostTags` and `relevantHostTagsAnded`. Default: `false`.
	HostTagGroupHostNamesGroupAnded *bool `pulumi:"hostTagGroupHostNamesGroupAnded"`
	// The reason for the maintenance window.
	Reason *string `pulumi:"reason"`
	// List of alert tags whose matching alerts will be put into maintenance because
	// of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantCustomerTags []string `pulumi:"relevantCustomerTags"`
	// List of source/host names that will be put into maintenance because of this
	// maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantHostNames []string `pulumi:"relevantHostNames"`
	// List of source/host tags whose matching sources/hosts will be put into maintenance
	// because of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or
	// `relevantHostNames` is required.
	RelevantHostTags []string `pulumi:"relevantHostTags"`
	// Whether to AND source/host tags listed in `relevantHostTags`.
	// If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
	// the tags are OR'ed, and a source/host must contain one of the tags. Default: `false`.
	RelevantHostTagsAnded *bool `pulumi:"relevantHostTagsAnded"`
	// start time in seconds after 1 Jan 1970 GMT.
	StartTimeInSeconds *int `pulumi:"startTimeInSeconds"`
	// The title of the maintenance window.
	Title *string `pulumi:"title"`
}

type MaintenanceWindowState struct {
	// end time in seconds after 1 Jan 1970 GMT.
	EndTimeInSeconds pulumi.IntPtrInput
	// If `true`, a source/host must be in `relevantHostNames`
	// and have tags matching the specification formed by `relevantHostTags` and `relevantHostTagsAnded` in
	// order for this maintenance window to apply. If `false`, a source/host must either be in `relevantHostNames`
	// or match `relevantHostTags` and `relevantHostTagsAnded`. Default: `false`.
	HostTagGroupHostNamesGroupAnded pulumi.BoolPtrInput
	// The reason for the maintenance window.
	Reason pulumi.StringPtrInput
	// List of alert tags whose matching alerts will be put into maintenance because
	// of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantCustomerTags pulumi.StringArrayInput
	// List of source/host names that will be put into maintenance because of this
	// maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantHostNames pulumi.StringArrayInput
	// List of source/host tags whose matching sources/hosts will be put into maintenance
	// because of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or
	// `relevantHostNames` is required.
	RelevantHostTags pulumi.StringArrayInput
	// Whether to AND source/host tags listed in `relevantHostTags`.
	// If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
	// the tags are OR'ed, and a source/host must contain one of the tags. Default: `false`.
	RelevantHostTagsAnded pulumi.BoolPtrInput
	// start time in seconds after 1 Jan 1970 GMT.
	StartTimeInSeconds pulumi.IntPtrInput
	// The title of the maintenance window.
	Title pulumi.StringPtrInput
}

func (MaintenanceWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowState)(nil)).Elem()
}

type maintenanceWindowArgs struct {
	// end time in seconds after 1 Jan 1970 GMT.
	EndTimeInSeconds int `pulumi:"endTimeInSeconds"`
	// If `true`, a source/host must be in `relevantHostNames`
	// and have tags matching the specification formed by `relevantHostTags` and `relevantHostTagsAnded` in
	// order for this maintenance window to apply. If `false`, a source/host must either be in `relevantHostNames`
	// or match `relevantHostTags` and `relevantHostTagsAnded`. Default: `false`.
	HostTagGroupHostNamesGroupAnded *bool `pulumi:"hostTagGroupHostNamesGroupAnded"`
	// The reason for the maintenance window.
	Reason string `pulumi:"reason"`
	// List of alert tags whose matching alerts will be put into maintenance because
	// of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantCustomerTags []string `pulumi:"relevantCustomerTags"`
	// List of source/host names that will be put into maintenance because of this
	// maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantHostNames []string `pulumi:"relevantHostNames"`
	// List of source/host tags whose matching sources/hosts will be put into maintenance
	// because of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or
	// `relevantHostNames` is required.
	RelevantHostTags []string `pulumi:"relevantHostTags"`
	// Whether to AND source/host tags listed in `relevantHostTags`.
	// If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
	// the tags are OR'ed, and a source/host must contain one of the tags. Default: `false`.
	RelevantHostTagsAnded *bool `pulumi:"relevantHostTagsAnded"`
	// start time in seconds after 1 Jan 1970 GMT.
	StartTimeInSeconds int `pulumi:"startTimeInSeconds"`
	// The title of the maintenance window.
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a MaintenanceWindow resource.
type MaintenanceWindowArgs struct {
	// end time in seconds after 1 Jan 1970 GMT.
	EndTimeInSeconds pulumi.IntInput
	// If `true`, a source/host must be in `relevantHostNames`
	// and have tags matching the specification formed by `relevantHostTags` and `relevantHostTagsAnded` in
	// order for this maintenance window to apply. If `false`, a source/host must either be in `relevantHostNames`
	// or match `relevantHostTags` and `relevantHostTagsAnded`. Default: `false`.
	HostTagGroupHostNamesGroupAnded pulumi.BoolPtrInput
	// The reason for the maintenance window.
	Reason pulumi.StringInput
	// List of alert tags whose matching alerts will be put into maintenance because
	// of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantCustomerTags pulumi.StringArrayInput
	// List of source/host names that will be put into maintenance because of this
	// maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
	// is required.
	RelevantHostNames pulumi.StringArrayInput
	// List of source/host tags whose matching sources/hosts will be put into maintenance
	// because of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or
	// `relevantHostNames` is required.
	RelevantHostTags pulumi.StringArrayInput
	// Whether to AND source/host tags listed in `relevantHostTags`.
	// If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
	// the tags are OR'ed, and a source/host must contain one of the tags. Default: `false`.
	RelevantHostTagsAnded pulumi.BoolPtrInput
	// start time in seconds after 1 Jan 1970 GMT.
	StartTimeInSeconds pulumi.IntInput
	// The title of the maintenance window.
	Title pulumi.StringInput
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowArgs)(nil)).Elem()
}

type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput
}

func (*MaintenanceWindow) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *MaintenanceWindow) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i *MaintenanceWindow) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

// MaintenanceWindowArrayInput is an input type that accepts MaintenanceWindowArray and MaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `MaintenanceWindowArrayInput` via:
//
//	MaintenanceWindowArray{ MaintenanceWindowArgs{...} }
type MaintenanceWindowArrayInput interface {
	pulumi.Input

	ToMaintenanceWindowArrayOutput() MaintenanceWindowArrayOutput
	ToMaintenanceWindowArrayOutputWithContext(context.Context) MaintenanceWindowArrayOutput
}

type MaintenanceWindowArray []MaintenanceWindowInput

func (MaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArray) ToMaintenanceWindowArrayOutput() MaintenanceWindowArrayOutput {
	return i.ToMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i MaintenanceWindowArray) ToMaintenanceWindowArrayOutputWithContext(ctx context.Context) MaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowArrayOutput)
}

// MaintenanceWindowMapInput is an input type that accepts MaintenanceWindowMap and MaintenanceWindowMapOutput values.
// You can construct a concrete instance of `MaintenanceWindowMapInput` via:
//
//	MaintenanceWindowMap{ "key": MaintenanceWindowArgs{...} }
type MaintenanceWindowMapInput interface {
	pulumi.Input

	ToMaintenanceWindowMapOutput() MaintenanceWindowMapOutput
	ToMaintenanceWindowMapOutputWithContext(context.Context) MaintenanceWindowMapOutput
}

type MaintenanceWindowMap map[string]MaintenanceWindowInput

func (MaintenanceWindowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowMap) ToMaintenanceWindowMapOutput() MaintenanceWindowMapOutput {
	return i.ToMaintenanceWindowMapOutputWithContext(context.Background())
}

func (i MaintenanceWindowMap) ToMaintenanceWindowMapOutputWithContext(ctx context.Context) MaintenanceWindowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowMapOutput)
}

type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

// end time in seconds after 1 Jan 1970 GMT.
func (o MaintenanceWindowOutput) EndTimeInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.IntOutput { return v.EndTimeInSeconds }).(pulumi.IntOutput)
}

// If `true`, a source/host must be in `relevantHostNames`
// and have tags matching the specification formed by `relevantHostTags` and `relevantHostTagsAnded` in
// order for this maintenance window to apply. If `false`, a source/host must either be in `relevantHostNames`
// or match `relevantHostTags` and `relevantHostTagsAnded`. Default: `false`.
func (o MaintenanceWindowOutput) HostTagGroupHostNamesGroupAnded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.BoolPtrOutput { return v.HostTagGroupHostNamesGroupAnded }).(pulumi.BoolPtrOutput)
}

// The reason for the maintenance window.
func (o MaintenanceWindowOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringOutput { return v.Reason }).(pulumi.StringOutput)
}

// List of alert tags whose matching alerts will be put into maintenance because
// of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
// is required.
func (o MaintenanceWindowOutput) RelevantCustomerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringArrayOutput { return v.RelevantCustomerTags }).(pulumi.StringArrayOutput)
}

// List of source/host names that will be put into maintenance because of this
// maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or `relevantHostNames`
// is required.
func (o MaintenanceWindowOutput) RelevantHostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringArrayOutput { return v.RelevantHostNames }).(pulumi.StringArrayOutput)
}

// List of source/host tags whose matching sources/hosts will be put into maintenance
// because of this maintenance window. At least one of `relevantCustomerTags`, `relevantHostTags`, or
// `relevantHostNames` is required.
func (o MaintenanceWindowOutput) RelevantHostTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringArrayOutput { return v.RelevantHostTags }).(pulumi.StringArrayOutput)
}

// Whether to AND source/host tags listed in `relevantHostTags`.
// If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
// the tags are OR'ed, and a source/host must contain one of the tags. Default: `false`.
func (o MaintenanceWindowOutput) RelevantHostTagsAnded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.BoolPtrOutput { return v.RelevantHostTagsAnded }).(pulumi.BoolPtrOutput)
}

// start time in seconds after 1 Jan 1970 GMT.
func (o MaintenanceWindowOutput) StartTimeInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.IntOutput { return v.StartTimeInSeconds }).(pulumi.IntOutput)
}

// The title of the maintenance window.
func (o MaintenanceWindowOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type MaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowArrayOutput) ToMaintenanceWindowArrayOutput() MaintenanceWindowArrayOutput {
	return o
}

func (o MaintenanceWindowArrayOutput) ToMaintenanceWindowArrayOutputWithContext(ctx context.Context) MaintenanceWindowArrayOutput {
	return o
}

func (o MaintenanceWindowArrayOutput) Index(i pulumi.IntInput) MaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaintenanceWindow {
		return vs[0].([]*MaintenanceWindow)[vs[1].(int)]
	}).(MaintenanceWindowOutput)
}

type MaintenanceWindowMapOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowMapOutput) ToMaintenanceWindowMapOutput() MaintenanceWindowMapOutput {
	return o
}

func (o MaintenanceWindowMapOutput) ToMaintenanceWindowMapOutputWithContext(ctx context.Context) MaintenanceWindowMapOutput {
	return o
}

func (o MaintenanceWindowMapOutput) MapIndex(k pulumi.StringInput) MaintenanceWindowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaintenanceWindow {
		return vs[0].(map[string]*MaintenanceWindow)[vs[1].(string)]
	}).(MaintenanceWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowInput)(nil)).Elem(), &MaintenanceWindow{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowArrayInput)(nil)).Elem(), MaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowMapInput)(nil)).Elem(), MaintenanceWindowMap{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowMapOutput{})
}
