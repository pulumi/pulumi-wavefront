// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AlertTarget struct {
	pulumi.CustomResourceState

	ContentType   pulumi.StringPtrOutput      `pulumi:"contentType"`
	CustomHeaders pulumi.StringMapOutput      `pulumi:"customHeaders"`
	Description   pulumi.StringOutput         `pulumi:"description"`
	EmailSubject  pulumi.StringPtrOutput      `pulumi:"emailSubject"`
	IsHtmlContent pulumi.BoolPtrOutput        `pulumi:"isHtmlContent"`
	Method        pulumi.StringPtrOutput      `pulumi:"method"`
	Name          pulumi.StringOutput         `pulumi:"name"`
	Recipient     pulumi.StringOutput         `pulumi:"recipient"`
	Routes        AlertTargetRouteArrayOutput `pulumi:"routes"`
	TargetId      pulumi.StringOutput         `pulumi:"targetId"`
	Template      pulumi.StringOutput         `pulumi:"template"`
	Triggers      pulumi.StringArrayOutput    `pulumi:"triggers"`
}

// NewAlertTarget registers a new resource with the given unique name, arguments, and options.
func NewAlertTarget(ctx *pulumi.Context,
	name string, args *AlertTargetArgs, opts ...pulumi.ResourceOption) (*AlertTarget, error) {
	if args == nil || args.Description == nil {
		return nil, errors.New("missing required argument 'Description'")
	}
	if args == nil || args.Recipient == nil {
		return nil, errors.New("missing required argument 'Recipient'")
	}
	if args == nil || args.Template == nil {
		return nil, errors.New("missing required argument 'Template'")
	}
	if args == nil || args.Triggers == nil {
		return nil, errors.New("missing required argument 'Triggers'")
	}
	if args == nil {
		args = &AlertTargetArgs{}
	}
	var resource AlertTarget
	err := ctx.RegisterResource("wavefront:index/alertTarget:AlertTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertTarget gets an existing AlertTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertTargetState, opts ...pulumi.ResourceOption) (*AlertTarget, error) {
	var resource AlertTarget
	err := ctx.ReadResource("wavefront:index/alertTarget:AlertTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertTarget resources.
type alertTargetState struct {
	ContentType   *string            `pulumi:"contentType"`
	CustomHeaders map[string]string  `pulumi:"customHeaders"`
	Description   *string            `pulumi:"description"`
	EmailSubject  *string            `pulumi:"emailSubject"`
	IsHtmlContent *bool              `pulumi:"isHtmlContent"`
	Method        *string            `pulumi:"method"`
	Name          *string            `pulumi:"name"`
	Recipient     *string            `pulumi:"recipient"`
	Routes        []AlertTargetRoute `pulumi:"routes"`
	TargetId      *string            `pulumi:"targetId"`
	Template      *string            `pulumi:"template"`
	Triggers      []string           `pulumi:"triggers"`
}

type AlertTargetState struct {
	ContentType   pulumi.StringPtrInput
	CustomHeaders pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	EmailSubject  pulumi.StringPtrInput
	IsHtmlContent pulumi.BoolPtrInput
	Method        pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Recipient     pulumi.StringPtrInput
	Routes        AlertTargetRouteArrayInput
	TargetId      pulumi.StringPtrInput
	Template      pulumi.StringPtrInput
	Triggers      pulumi.StringArrayInput
}

func (AlertTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertTargetState)(nil)).Elem()
}

type alertTargetArgs struct {
	ContentType   *string            `pulumi:"contentType"`
	CustomHeaders map[string]string  `pulumi:"customHeaders"`
	Description   string             `pulumi:"description"`
	EmailSubject  *string            `pulumi:"emailSubject"`
	IsHtmlContent *bool              `pulumi:"isHtmlContent"`
	Method        *string            `pulumi:"method"`
	Name          *string            `pulumi:"name"`
	Recipient     string             `pulumi:"recipient"`
	Routes        []AlertTargetRoute `pulumi:"routes"`
	Template      string             `pulumi:"template"`
	Triggers      []string           `pulumi:"triggers"`
}

// The set of arguments for constructing a AlertTarget resource.
type AlertTargetArgs struct {
	ContentType   pulumi.StringPtrInput
	CustomHeaders pulumi.StringMapInput
	Description   pulumi.StringInput
	EmailSubject  pulumi.StringPtrInput
	IsHtmlContent pulumi.BoolPtrInput
	Method        pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Recipient     pulumi.StringInput
	Routes        AlertTargetRouteArrayInput
	Template      pulumi.StringInput
	Triggers      pulumi.StringArrayInput
}

func (AlertTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertTargetArgs)(nil)).Elem()
}
