// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wavefront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a wavefront Alert Target resource. This allows alert targets to created, updated, and deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewAlertTarget(ctx, "testTarget", &wavefront.AlertTargetArgs{
// 			ContentType: pulumi.String("application/json"),
// 			CustomHeaders: pulumi.StringMap{
// 				"Testing": pulumi.String("true"),
// 			},
// 			Description: pulumi.String("Test target"),
// 			Method:      pulumi.String("WEBHOOK"),
// 			Recipient:   pulumi.String("https://hooks.slack.com/services/test/me"),
// 			Template:    pulumi.String("{}"),
// 			Triggers: pulumi.StringArray{
// 				pulumi.String("ALERT_OPENED"),
// 				pulumi.String("ALERT_RESOLVED"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attributes Reference
//
// * `targetId` - The target ID prefixed with `target:` for interpolating into a Wavefront Alert.
//
// ### Route
//
// The `route` mapping supports the following:
//
// * `method` - (Required)  The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
// * `target` - (Required) The endpoint for the alert route. `EMAIL`: email address. `PAGERDUTY`: PagerDuty routing
//   key. `WEBHOOK`: URL endpoint.
// * `filter` - (Required) String that filters the route. Space delimited.  Currently only allows a single key value pair.
//   (e.g. `env prod`)
//
// ### Example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := wavefront.NewAlertTarget(ctx, "testTarget", &wavefront.AlertTargetArgs{
// 			ContentType: pulumi.String("application/json"),
// 			CustomHeaders: pulumi.StringMap{
// 				"Testing": pulumi.String("true"),
// 			},
// 			Description: pulumi.String("Test target"),
// 			Method:      pulumi.String("WEBHOOK"),
// 			Recipient:   pulumi.String("https://hooks.slack.com/services/test/me"),
// 			Routes: AlertTargetRouteArray{
// 				&AlertTargetRouteArgs{
// 					Filter: pulumi.StringMap{
// 						"key":   pulumi.String("env"),
// 						"value": pulumi.String("prod"),
// 					},
// 					Method: pulumi.String("WEBHOOK"),
// 					Target: pulumi.String("https://hooks.slack.com/services/test/me/prod"),
// 				},
// 				&AlertTargetRouteArgs{
// 					Filter: pulumi.StringMap{
// 						"key":   pulumi.String("env"),
// 						"value": pulumi.String("dev"),
// 					},
// 					Method: pulumi.String("WEBHOOK"),
// 					Target: pulumi.String("https://hooks.slack.com/services/test/me/dev"),
// 				},
// 			},
// 			Template: pulumi.String("{}"),
// 			Triggers: pulumi.StringArray{
// 				pulumi.String("ALERT_OPENED"),
// 				pulumi.String("ALERT_RESOLVED"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Alert Targets can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import wavefront:index/alertTarget:AlertTarget alert_target abcdEFGhijKLMNO
// ```
type AlertTarget struct {
	pulumi.CustomResourceState

	// The value of the `Content-Type` header of the webhook.
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	// A `string->string` map specifying the custom HTTP header key/value pairs that will be
	// sent in the requests with a method of `WEBHOOK`.
	CustomHeaders pulumi.StringMapOutput `pulumi:"customHeaders"`
	// Description describing this alert target.
	Description pulumi.StringOutput `pulumi:"description"`
	// The subject title of an email notification target.
	EmailSubject pulumi.StringPtrOutput `pulumi:"emailSubject"`
	// Determine whether the email alert content is sent as HTML or text.
	IsHtmlContent pulumi.BoolPtrOutput `pulumi:"isHtmlContent"`
	// The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
	Method pulumi.StringPtrOutput `pulumi:"method"`
	// The name of the alert target as it is displayed in Wavefront.
	Name pulumi.StringOutput `pulumi:"name"`
	// The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
	// routing key. `WEBHOOK`: URL endpoint.
	Recipient pulumi.StringOutput `pulumi:"recipient"`
	// List of routing targets that this alert target will notify. See Route
	Routes   AlertTargetRouteArrayOutput `pulumi:"routes"`
	TargetId pulumi.StringOutput         `pulumi:"targetId"`
	// A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
	Template pulumi.StringOutput `pulumi:"template"`
	// A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
	// `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
	Triggers pulumi.StringArrayOutput `pulumi:"triggers"`
}

// NewAlertTarget registers a new resource with the given unique name, arguments, and options.
func NewAlertTarget(ctx *pulumi.Context,
	name string, args *AlertTargetArgs, opts ...pulumi.ResourceOption) (*AlertTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Recipient == nil {
		return nil, errors.New("invalid value for required argument 'Recipient'")
	}
	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	if args.Triggers == nil {
		return nil, errors.New("invalid value for required argument 'Triggers'")
	}
	var resource AlertTarget
	err := ctx.RegisterResource("wavefront:index/alertTarget:AlertTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertTarget gets an existing AlertTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertTargetState, opts ...pulumi.ResourceOption) (*AlertTarget, error) {
	var resource AlertTarget
	err := ctx.ReadResource("wavefront:index/alertTarget:AlertTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertTarget resources.
type alertTargetState struct {
	// The value of the `Content-Type` header of the webhook.
	ContentType *string `pulumi:"contentType"`
	// A `string->string` map specifying the custom HTTP header key/value pairs that will be
	// sent in the requests with a method of `WEBHOOK`.
	CustomHeaders map[string]string `pulumi:"customHeaders"`
	// Description describing this alert target.
	Description *string `pulumi:"description"`
	// The subject title of an email notification target.
	EmailSubject *string `pulumi:"emailSubject"`
	// Determine whether the email alert content is sent as HTML or text.
	IsHtmlContent *bool `pulumi:"isHtmlContent"`
	// The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
	Method *string `pulumi:"method"`
	// The name of the alert target as it is displayed in Wavefront.
	Name *string `pulumi:"name"`
	// The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
	// routing key. `WEBHOOK`: URL endpoint.
	Recipient *string `pulumi:"recipient"`
	// List of routing targets that this alert target will notify. See Route
	Routes   []AlertTargetRoute `pulumi:"routes"`
	TargetId *string            `pulumi:"targetId"`
	// A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
	Template *string `pulumi:"template"`
	// A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
	// `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
	Triggers []string `pulumi:"triggers"`
}

type AlertTargetState struct {
	// The value of the `Content-Type` header of the webhook.
	ContentType pulumi.StringPtrInput
	// A `string->string` map specifying the custom HTTP header key/value pairs that will be
	// sent in the requests with a method of `WEBHOOK`.
	CustomHeaders pulumi.StringMapInput
	// Description describing this alert target.
	Description pulumi.StringPtrInput
	// The subject title of an email notification target.
	EmailSubject pulumi.StringPtrInput
	// Determine whether the email alert content is sent as HTML or text.
	IsHtmlContent pulumi.BoolPtrInput
	// The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
	Method pulumi.StringPtrInput
	// The name of the alert target as it is displayed in Wavefront.
	Name pulumi.StringPtrInput
	// The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
	// routing key. `WEBHOOK`: URL endpoint.
	Recipient pulumi.StringPtrInput
	// List of routing targets that this alert target will notify. See Route
	Routes   AlertTargetRouteArrayInput
	TargetId pulumi.StringPtrInput
	// A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
	Template pulumi.StringPtrInput
	// A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
	// `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
	Triggers pulumi.StringArrayInput
}

func (AlertTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertTargetState)(nil)).Elem()
}

type alertTargetArgs struct {
	// The value of the `Content-Type` header of the webhook.
	ContentType *string `pulumi:"contentType"`
	// A `string->string` map specifying the custom HTTP header key/value pairs that will be
	// sent in the requests with a method of `WEBHOOK`.
	CustomHeaders map[string]string `pulumi:"customHeaders"`
	// Description describing this alert target.
	Description string `pulumi:"description"`
	// The subject title of an email notification target.
	EmailSubject *string `pulumi:"emailSubject"`
	// Determine whether the email alert content is sent as HTML or text.
	IsHtmlContent *bool `pulumi:"isHtmlContent"`
	// The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
	Method *string `pulumi:"method"`
	// The name of the alert target as it is displayed in Wavefront.
	Name *string `pulumi:"name"`
	// The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
	// routing key. `WEBHOOK`: URL endpoint.
	Recipient string `pulumi:"recipient"`
	// List of routing targets that this alert target will notify. See Route
	Routes []AlertTargetRoute `pulumi:"routes"`
	// A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
	Template string `pulumi:"template"`
	// A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
	// `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
	Triggers []string `pulumi:"triggers"`
}

// The set of arguments for constructing a AlertTarget resource.
type AlertTargetArgs struct {
	// The value of the `Content-Type` header of the webhook.
	ContentType pulumi.StringPtrInput
	// A `string->string` map specifying the custom HTTP header key/value pairs that will be
	// sent in the requests with a method of `WEBHOOK`.
	CustomHeaders pulumi.StringMapInput
	// Description describing this alert target.
	Description pulumi.StringInput
	// The subject title of an email notification target.
	EmailSubject pulumi.StringPtrInput
	// Determine whether the email alert content is sent as HTML or text.
	IsHtmlContent pulumi.BoolPtrInput
	// The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
	Method pulumi.StringPtrInput
	// The name of the alert target as it is displayed in Wavefront.
	Name pulumi.StringPtrInput
	// The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
	// routing key. `WEBHOOK`: URL endpoint.
	Recipient pulumi.StringInput
	// List of routing targets that this alert target will notify. See Route
	Routes AlertTargetRouteArrayInput
	// A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
	Template pulumi.StringInput
	// A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
	// `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
	Triggers pulumi.StringArrayInput
}

func (AlertTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertTargetArgs)(nil)).Elem()
}

type AlertTargetInput interface {
	pulumi.Input

	ToAlertTargetOutput() AlertTargetOutput
	ToAlertTargetOutputWithContext(ctx context.Context) AlertTargetOutput
}

func (*AlertTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertTarget)(nil)).Elem()
}

func (i *AlertTarget) ToAlertTargetOutput() AlertTargetOutput {
	return i.ToAlertTargetOutputWithContext(context.Background())
}

func (i *AlertTarget) ToAlertTargetOutputWithContext(ctx context.Context) AlertTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertTargetOutput)
}

// AlertTargetArrayInput is an input type that accepts AlertTargetArray and AlertTargetArrayOutput values.
// You can construct a concrete instance of `AlertTargetArrayInput` via:
//
//          AlertTargetArray{ AlertTargetArgs{...} }
type AlertTargetArrayInput interface {
	pulumi.Input

	ToAlertTargetArrayOutput() AlertTargetArrayOutput
	ToAlertTargetArrayOutputWithContext(context.Context) AlertTargetArrayOutput
}

type AlertTargetArray []AlertTargetInput

func (AlertTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertTarget)(nil)).Elem()
}

func (i AlertTargetArray) ToAlertTargetArrayOutput() AlertTargetArrayOutput {
	return i.ToAlertTargetArrayOutputWithContext(context.Background())
}

func (i AlertTargetArray) ToAlertTargetArrayOutputWithContext(ctx context.Context) AlertTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertTargetArrayOutput)
}

// AlertTargetMapInput is an input type that accepts AlertTargetMap and AlertTargetMapOutput values.
// You can construct a concrete instance of `AlertTargetMapInput` via:
//
//          AlertTargetMap{ "key": AlertTargetArgs{...} }
type AlertTargetMapInput interface {
	pulumi.Input

	ToAlertTargetMapOutput() AlertTargetMapOutput
	ToAlertTargetMapOutputWithContext(context.Context) AlertTargetMapOutput
}

type AlertTargetMap map[string]AlertTargetInput

func (AlertTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertTarget)(nil)).Elem()
}

func (i AlertTargetMap) ToAlertTargetMapOutput() AlertTargetMapOutput {
	return i.ToAlertTargetMapOutputWithContext(context.Background())
}

func (i AlertTargetMap) ToAlertTargetMapOutputWithContext(ctx context.Context) AlertTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertTargetMapOutput)
}

type AlertTargetOutput struct{ *pulumi.OutputState }

func (AlertTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertTarget)(nil)).Elem()
}

func (o AlertTargetOutput) ToAlertTargetOutput() AlertTargetOutput {
	return o
}

func (o AlertTargetOutput) ToAlertTargetOutputWithContext(ctx context.Context) AlertTargetOutput {
	return o
}

type AlertTargetArrayOutput struct{ *pulumi.OutputState }

func (AlertTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertTarget)(nil)).Elem()
}

func (o AlertTargetArrayOutput) ToAlertTargetArrayOutput() AlertTargetArrayOutput {
	return o
}

func (o AlertTargetArrayOutput) ToAlertTargetArrayOutputWithContext(ctx context.Context) AlertTargetArrayOutput {
	return o
}

func (o AlertTargetArrayOutput) Index(i pulumi.IntInput) AlertTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertTarget {
		return vs[0].([]*AlertTarget)[vs[1].(int)]
	}).(AlertTargetOutput)
}

type AlertTargetMapOutput struct{ *pulumi.OutputState }

func (AlertTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertTarget)(nil)).Elem()
}

func (o AlertTargetMapOutput) ToAlertTargetMapOutput() AlertTargetMapOutput {
	return o
}

func (o AlertTargetMapOutput) ToAlertTargetMapOutputWithContext(ctx context.Context) AlertTargetMapOutput {
	return o
}

func (o AlertTargetMapOutput) MapIndex(k pulumi.StringInput) AlertTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertTarget {
		return vs[0].(map[string]*AlertTarget)[vs[1].(string)]
	}).(AlertTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertTargetInput)(nil)).Elem(), &AlertTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertTargetArrayInput)(nil)).Elem(), AlertTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertTargetMapInput)(nil)).Elem(), AlertTargetMap{})
	pulumi.RegisterOutputType(AlertTargetOutput{})
	pulumi.RegisterOutputType(AlertTargetArrayOutput{})
	pulumi.RegisterOutputType(AlertTargetMapOutput{})
}
