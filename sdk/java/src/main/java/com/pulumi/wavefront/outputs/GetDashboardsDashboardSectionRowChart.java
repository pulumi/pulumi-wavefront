// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.wavefront.outputs.GetDashboardsDashboardSectionRowChartChartSetting;
import com.pulumi.wavefront.outputs.GetDashboardsDashboardSectionRowChartSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDashboardsDashboardSectionRowChart {
    /**
     * @return The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.
     * 
     */
    private Integer base;
    private String chartAttributes;
    private List<GetDashboardsDashboardSectionRowChartChartSetting> chartSettings;
    /**
     * @return Description of the chart.
     * 
     */
    private String description;
    private Boolean includeObsoleteMetrics;
    private Boolean interpolatePointsKey;
    /**
     * @return The name of the parameters.
     * 
     */
    private String name;
    private Boolean noDefaultEvents;
    private List<GetDashboardsDashboardSectionRowChartSource> sources;
    /**
     * @return Summarization strategy for the chart. MEAN is default.
     * 
     */
    private String summarization;
    /**
     * @return String to label the units of the chart on the Y-Axis.
     * 
     */
    private String units;

    private GetDashboardsDashboardSectionRowChart() {}
    /**
     * @return The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.
     * 
     */
    public Integer base() {
        return this.base;
    }
    public String chartAttributes() {
        return this.chartAttributes;
    }
    public List<GetDashboardsDashboardSectionRowChartChartSetting> chartSettings() {
        return this.chartSettings;
    }
    /**
     * @return Description of the chart.
     * 
     */
    public String description() {
        return this.description;
    }
    public Boolean includeObsoleteMetrics() {
        return this.includeObsoleteMetrics;
    }
    public Boolean interpolatePointsKey() {
        return this.interpolatePointsKey;
    }
    /**
     * @return The name of the parameters.
     * 
     */
    public String name() {
        return this.name;
    }
    public Boolean noDefaultEvents() {
        return this.noDefaultEvents;
    }
    public List<GetDashboardsDashboardSectionRowChartSource> sources() {
        return this.sources;
    }
    /**
     * @return Summarization strategy for the chart. MEAN is default.
     * 
     */
    public String summarization() {
        return this.summarization;
    }
    /**
     * @return String to label the units of the chart on the Y-Axis.
     * 
     */
    public String units() {
        return this.units;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDashboardsDashboardSectionRowChart defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer base;
        private String chartAttributes;
        private List<GetDashboardsDashboardSectionRowChartChartSetting> chartSettings;
        private String description;
        private Boolean includeObsoleteMetrics;
        private Boolean interpolatePointsKey;
        private String name;
        private Boolean noDefaultEvents;
        private List<GetDashboardsDashboardSectionRowChartSource> sources;
        private String summarization;
        private String units;
        public Builder() {}
        public Builder(GetDashboardsDashboardSectionRowChart defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.base = defaults.base;
    	      this.chartAttributes = defaults.chartAttributes;
    	      this.chartSettings = defaults.chartSettings;
    	      this.description = defaults.description;
    	      this.includeObsoleteMetrics = defaults.includeObsoleteMetrics;
    	      this.interpolatePointsKey = defaults.interpolatePointsKey;
    	      this.name = defaults.name;
    	      this.noDefaultEvents = defaults.noDefaultEvents;
    	      this.sources = defaults.sources;
    	      this.summarization = defaults.summarization;
    	      this.units = defaults.units;
        }

        @CustomType.Setter
        public Builder base(Integer base) {
            this.base = Objects.requireNonNull(base);
            return this;
        }
        @CustomType.Setter
        public Builder chartAttributes(String chartAttributes) {
            this.chartAttributes = Objects.requireNonNull(chartAttributes);
            return this;
        }
        @CustomType.Setter
        public Builder chartSettings(List<GetDashboardsDashboardSectionRowChartChartSetting> chartSettings) {
            this.chartSettings = Objects.requireNonNull(chartSettings);
            return this;
        }
        public Builder chartSettings(GetDashboardsDashboardSectionRowChartChartSetting... chartSettings) {
            return chartSettings(List.of(chartSettings));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder includeObsoleteMetrics(Boolean includeObsoleteMetrics) {
            this.includeObsoleteMetrics = Objects.requireNonNull(includeObsoleteMetrics);
            return this;
        }
        @CustomType.Setter
        public Builder interpolatePointsKey(Boolean interpolatePointsKey) {
            this.interpolatePointsKey = Objects.requireNonNull(interpolatePointsKey);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder noDefaultEvents(Boolean noDefaultEvents) {
            this.noDefaultEvents = Objects.requireNonNull(noDefaultEvents);
            return this;
        }
        @CustomType.Setter
        public Builder sources(List<GetDashboardsDashboardSectionRowChartSource> sources) {
            this.sources = Objects.requireNonNull(sources);
            return this;
        }
        public Builder sources(GetDashboardsDashboardSectionRowChartSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder summarization(String summarization) {
            this.summarization = Objects.requireNonNull(summarization);
            return this;
        }
        @CustomType.Setter
        public Builder units(String units) {
            this.units = Objects.requireNonNull(units);
            return this;
        }
        public GetDashboardsDashboardSectionRowChart build() {
            final var o = new GetDashboardsDashboardSectionRowChart();
            o.base = base;
            o.chartAttributes = chartAttributes;
            o.chartSettings = chartSettings;
            o.description = description;
            o.includeObsoleteMetrics = includeObsoleteMetrics;
            o.interpolatePointsKey = interpolatePointsKey;
            o.name = name;
            o.noDefaultEvents = noDefaultEvents;
            o.sources = sources;
            o.summarization = summarization;
            o.units = units;
            return o;
        }
    }
}
