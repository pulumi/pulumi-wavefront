// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertState extends com.pulumi.resources.ResourceArgs {

    public static final AlertState Empty = new AlertState();

    /**
     * User-supplied additional explanatory information for this alert.
     * Useful for linking runbooks, migrations, etc.
     * 
     */
    @Import(name="additionalInformation")
    private @Nullable Output<String> additionalInformation;

    /**
     * @return User-supplied additional explanatory information for this alert.
     * Useful for linking runbooks, migrations, etc.
     * 
     */
    public Optional<Output<String>> additionalInformation() {
        return Optional.ofNullable(this.additionalInformation);
    }

    /**
     * The type of alert in Wavefront.  Either `CLASSIC` (default)
     * or `THRESHOLD`.
     * 
     */
    @Import(name="alertType")
    private @Nullable Output<String> alertType;

    /**
     * @return The type of alert in Wavefront.  Either `CLASSIC` (default)
     * or `THRESHOLD`.
     * 
     */
    public Optional<Output<String>> alertType() {
        return Optional.ofNullable(this.alertType);
    }

    /**
     * A list of valid users or groups that can modify this resource on a tenant.
     * 
     */
    @Import(name="canModifies")
    private @Nullable Output<List<String>> canModifies;

    /**
     * @return A list of valid users or groups that can modify this resource on a tenant.
     * 
     */
    public Optional<Output<List<String>>> canModifies() {
        return Optional.ofNullable(this.canModifies);
    }

    /**
     * A list of valid users or groups that can view this resource on a tenant. Default is Empty list.
     * 
     */
    @Import(name="canViews")
    private @Nullable Output<List<String>> canViews;

    /**
     * @return A list of valid users or groups that can view this resource on a tenant. Default is Empty list.
     * 
     */
    public Optional<Output<List<String>>> canViews() {
        return Optional.ofNullable(this.canViews);
    }

    /**
     * A Wavefront query that is evaluated at regular intervals (default is 1 minute).
     * The alert fires and notifications are triggered when a data series matching this query evaluates
     * to a non-zero value for a set number of consecutive minutes.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return A Wavefront query that is evaluated at regular intervals (default is 1 minute).
     * The alert fires and notifications are triggered when a data series matching this query evaluates
     * to a non-zero value for a set number of consecutive minutes.
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * a string-&gt;string map of `severity` to `condition`
     * for which this alert will trigger.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<Map<String,String>> conditions;

    /**
     * @return a string-&gt;string map of `severity` to `condition`
     * for which this alert will trigger.
     * 
     */
    public Optional<Output<Map<String,String>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * A second query whose results are displayed in the alert user
     * interface instead of the condition query.  This field is often used to display a version
     * of the condition query with Boolean operators removed so that numerical values are plotted.
     * 
     */
    @Import(name="displayExpression")
    private @Nullable Output<String> displayExpression;

    /**
     * @return A second query whose results are displayed in the alert user
     * interface instead of the condition query.  This field is often used to display a version
     * of the condition query with Boolean operators removed so that numerical values are plotted.
     * 
     */
    public Optional<Output<String>> displayExpression() {
        return Optional.ofNullable(this.displayExpression);
    }

    /**
     * The number of consecutive minutes that a series matching the condition query must
     * evaluate to &#34;true&#34; (non-zero value) before the alert fires.
     * 
     */
    @Import(name="minutes")
    private @Nullable Output<Integer> minutes;

    /**
     * @return The number of consecutive minutes that a series matching the condition query must
     * evaluate to &#34;true&#34; (non-zero value) before the alert fires.
     * 
     */
    public Optional<Output<Integer>> minutes() {
        return Optional.ofNullable(this.minutes);
    }

    /**
     * The name of the alert as it is displayed in Wavefront.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the alert as it is displayed in Wavefront.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * How often to re-trigger a continually failing alert.
     * If absent or &lt;= 0, no re-triggering occurs.
     * 
     */
    @Import(name="notificationResendFrequencyMinutes")
    private @Nullable Output<Integer> notificationResendFrequencyMinutes;

    /**
     * @return How often to re-trigger a continually failing alert.
     * If absent or &lt;= 0, no re-triggering occurs.
     * 
     */
    public Optional<Output<Integer>> notificationResendFrequencyMinutes() {
        return Optional.ofNullable(this.notificationResendFrequencyMinutes);
    }

    /**
     * The specified query is executed every `process_rate_minutes` minutes. Default value is 5 minutes.
     * 
     */
    @Import(name="processRateMinutes")
    private @Nullable Output<Integer> processRateMinutes;

    /**
     * @return The specified query is executed every `process_rate_minutes` minutes. Default value is 5 minutes.
     * 
     */
    public Optional<Output<Integer>> processRateMinutes() {
        return Optional.ofNullable(this.processRateMinutes);
    }

    /**
     * The number of consecutive minutes that a firing series matching the condition
     * query must evaluate to &#34;false&#34; (zero value) before the alert resolves.  When unset, this defaults to
     * the same value as `minutes`.
     * 
     */
    @Import(name="resolveAfterMinutes")
    private @Nullable Output<Integer> resolveAfterMinutes;

    /**
     * @return The number of consecutive minutes that a firing series matching the condition
     * query must evaluate to &#34;false&#34; (zero value) before the alert resolves.  When unset, this defaults to
     * the same value as `minutes`.
     * 
     */
    public Optional<Output<Integer>> resolveAfterMinutes() {
        return Optional.ofNullable(this.resolveAfterMinutes);
    }

    /**
     * Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * A set of tags to assign to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A set of tags to assign to this resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A comma-separated list of the email address or integration endpoint
     * (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
     * Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return A comma-separated list of the email address or integration endpoint
     * (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
     * Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * A string to string map of Targets for severity.
     * 
     */
    @Import(name="thresholdTargets")
    private @Nullable Output<Map<String,String>> thresholdTargets;

    /**
     * @return A string to string map of Targets for severity.
     * 
     */
    public Optional<Output<Map<String,String>>> thresholdTargets() {
        return Optional.ofNullable(this.thresholdTargets);
    }

    private AlertState() {}

    private AlertState(AlertState $) {
        this.additionalInformation = $.additionalInformation;
        this.alertType = $.alertType;
        this.canModifies = $.canModifies;
        this.canViews = $.canViews;
        this.condition = $.condition;
        this.conditions = $.conditions;
        this.displayExpression = $.displayExpression;
        this.minutes = $.minutes;
        this.name = $.name;
        this.notificationResendFrequencyMinutes = $.notificationResendFrequencyMinutes;
        this.processRateMinutes = $.processRateMinutes;
        this.resolveAfterMinutes = $.resolveAfterMinutes;
        this.severity = $.severity;
        this.tags = $.tags;
        this.target = $.target;
        this.thresholdTargets = $.thresholdTargets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertState $;

        public Builder() {
            $ = new AlertState();
        }

        public Builder(AlertState defaults) {
            $ = new AlertState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalInformation User-supplied additional explanatory information for this alert.
         * Useful for linking runbooks, migrations, etc.
         * 
         * @return builder
         * 
         */
        public Builder additionalInformation(@Nullable Output<String> additionalInformation) {
            $.additionalInformation = additionalInformation;
            return this;
        }

        /**
         * @param additionalInformation User-supplied additional explanatory information for this alert.
         * Useful for linking runbooks, migrations, etc.
         * 
         * @return builder
         * 
         */
        public Builder additionalInformation(String additionalInformation) {
            return additionalInformation(Output.of(additionalInformation));
        }

        /**
         * @param alertType The type of alert in Wavefront.  Either `CLASSIC` (default)
         * or `THRESHOLD`.
         * 
         * @return builder
         * 
         */
        public Builder alertType(@Nullable Output<String> alertType) {
            $.alertType = alertType;
            return this;
        }

        /**
         * @param alertType The type of alert in Wavefront.  Either `CLASSIC` (default)
         * or `THRESHOLD`.
         * 
         * @return builder
         * 
         */
        public Builder alertType(String alertType) {
            return alertType(Output.of(alertType));
        }

        /**
         * @param canModifies A list of valid users or groups that can modify this resource on a tenant.
         * 
         * @return builder
         * 
         */
        public Builder canModifies(@Nullable Output<List<String>> canModifies) {
            $.canModifies = canModifies;
            return this;
        }

        /**
         * @param canModifies A list of valid users or groups that can modify this resource on a tenant.
         * 
         * @return builder
         * 
         */
        public Builder canModifies(List<String> canModifies) {
            return canModifies(Output.of(canModifies));
        }

        /**
         * @param canModifies A list of valid users or groups that can modify this resource on a tenant.
         * 
         * @return builder
         * 
         */
        public Builder canModifies(String... canModifies) {
            return canModifies(List.of(canModifies));
        }

        /**
         * @param canViews A list of valid users or groups that can view this resource on a tenant. Default is Empty list.
         * 
         * @return builder
         * 
         */
        public Builder canViews(@Nullable Output<List<String>> canViews) {
            $.canViews = canViews;
            return this;
        }

        /**
         * @param canViews A list of valid users or groups that can view this resource on a tenant. Default is Empty list.
         * 
         * @return builder
         * 
         */
        public Builder canViews(List<String> canViews) {
            return canViews(Output.of(canViews));
        }

        /**
         * @param canViews A list of valid users or groups that can view this resource on a tenant. Default is Empty list.
         * 
         * @return builder
         * 
         */
        public Builder canViews(String... canViews) {
            return canViews(List.of(canViews));
        }

        /**
         * @param condition A Wavefront query that is evaluated at regular intervals (default is 1 minute).
         * The alert fires and notifications are triggered when a data series matching this query evaluates
         * to a non-zero value for a set number of consecutive minutes.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition A Wavefront query that is evaluated at regular intervals (default is 1 minute).
         * The alert fires and notifications are triggered when a data series matching this query evaluates
         * to a non-zero value for a set number of consecutive minutes.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param conditions a string-&gt;string map of `severity` to `condition`
         * for which this alert will trigger.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<Map<String,String>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions a string-&gt;string map of `severity` to `condition`
         * for which this alert will trigger.
         * 
         * @return builder
         * 
         */
        public Builder conditions(Map<String,String> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param displayExpression A second query whose results are displayed in the alert user
         * interface instead of the condition query.  This field is often used to display a version
         * of the condition query with Boolean operators removed so that numerical values are plotted.
         * 
         * @return builder
         * 
         */
        public Builder displayExpression(@Nullable Output<String> displayExpression) {
            $.displayExpression = displayExpression;
            return this;
        }

        /**
         * @param displayExpression A second query whose results are displayed in the alert user
         * interface instead of the condition query.  This field is often used to display a version
         * of the condition query with Boolean operators removed so that numerical values are plotted.
         * 
         * @return builder
         * 
         */
        public Builder displayExpression(String displayExpression) {
            return displayExpression(Output.of(displayExpression));
        }

        /**
         * @param minutes The number of consecutive minutes that a series matching the condition query must
         * evaluate to &#34;true&#34; (non-zero value) before the alert fires.
         * 
         * @return builder
         * 
         */
        public Builder minutes(@Nullable Output<Integer> minutes) {
            $.minutes = minutes;
            return this;
        }

        /**
         * @param minutes The number of consecutive minutes that a series matching the condition query must
         * evaluate to &#34;true&#34; (non-zero value) before the alert fires.
         * 
         * @return builder
         * 
         */
        public Builder minutes(Integer minutes) {
            return minutes(Output.of(minutes));
        }

        /**
         * @param name The name of the alert as it is displayed in Wavefront.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the alert as it is displayed in Wavefront.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationResendFrequencyMinutes How often to re-trigger a continually failing alert.
         * If absent or &lt;= 0, no re-triggering occurs.
         * 
         * @return builder
         * 
         */
        public Builder notificationResendFrequencyMinutes(@Nullable Output<Integer> notificationResendFrequencyMinutes) {
            $.notificationResendFrequencyMinutes = notificationResendFrequencyMinutes;
            return this;
        }

        /**
         * @param notificationResendFrequencyMinutes How often to re-trigger a continually failing alert.
         * If absent or &lt;= 0, no re-triggering occurs.
         * 
         * @return builder
         * 
         */
        public Builder notificationResendFrequencyMinutes(Integer notificationResendFrequencyMinutes) {
            return notificationResendFrequencyMinutes(Output.of(notificationResendFrequencyMinutes));
        }

        /**
         * @param processRateMinutes The specified query is executed every `process_rate_minutes` minutes. Default value is 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder processRateMinutes(@Nullable Output<Integer> processRateMinutes) {
            $.processRateMinutes = processRateMinutes;
            return this;
        }

        /**
         * @param processRateMinutes The specified query is executed every `process_rate_minutes` minutes. Default value is 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder processRateMinutes(Integer processRateMinutes) {
            return processRateMinutes(Output.of(processRateMinutes));
        }

        /**
         * @param resolveAfterMinutes The number of consecutive minutes that a firing series matching the condition
         * query must evaluate to &#34;false&#34; (zero value) before the alert resolves.  When unset, this defaults to
         * the same value as `minutes`.
         * 
         * @return builder
         * 
         */
        public Builder resolveAfterMinutes(@Nullable Output<Integer> resolveAfterMinutes) {
            $.resolveAfterMinutes = resolveAfterMinutes;
            return this;
        }

        /**
         * @param resolveAfterMinutes The number of consecutive minutes that a firing series matching the condition
         * query must evaluate to &#34;false&#34; (zero value) before the alert resolves.  When unset, this defaults to
         * the same value as `minutes`.
         * 
         * @return builder
         * 
         */
        public Builder resolveAfterMinutes(Integer resolveAfterMinutes) {
            return resolveAfterMinutes(Output.of(resolveAfterMinutes));
        }

        /**
         * @param severity Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param tags A set of tags to assign to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A set of tags to assign to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A set of tags to assign to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param target A comma-separated list of the email address or integration endpoint
         * (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
         * Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target A comma-separated list of the email address or integration endpoint
         * (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
         * Alert target format: ({email}|pd:{pd_key}|target:{alert-target-id}).
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param thresholdTargets A string to string map of Targets for severity.
         * 
         * @return builder
         * 
         */
        public Builder thresholdTargets(@Nullable Output<Map<String,String>> thresholdTargets) {
            $.thresholdTargets = thresholdTargets;
            return this;
        }

        /**
         * @param thresholdTargets A string to string map of Targets for severity.
         * 
         * @return builder
         * 
         */
        public Builder thresholdTargets(Map<String,String> thresholdTargets) {
            return thresholdTargets(Output.of(thresholdTargets));
        }

        public AlertState build() {
            return $;
        }
    }

}
