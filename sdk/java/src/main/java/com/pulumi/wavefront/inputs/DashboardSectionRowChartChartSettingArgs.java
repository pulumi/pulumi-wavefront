// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardSectionRowChartChartSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardSectionRowChartChartSettingArgs Empty = new DashboardSectionRowChartChartSettingArgs();

    /**
     * This setting is deprecated.
     * 
     */
    @Import(name="autoColumnTags")
    private @Nullable Output<Boolean> autoColumnTags;

    /**
     * @return This setting is deprecated.
     * 
     */
    public Optional<Output<Boolean>> autoColumnTags() {
        return Optional.ofNullable(this.autoColumnTags);
    }

    /**
     * This setting is deprecated.
     * 
     */
    @Import(name="columnTags")
    private @Nullable Output<String> columnTags;

    /**
     * @return This setting is deprecated.
     * 
     */
    public Optional<Output<String>> columnTags() {
        return Optional.ofNullable(this.columnTags);
    }

    /**
     * For the tabular view, a list of point tags to display when using the `custom` tag display mode.
     * 
     */
    @Import(name="customTags")
    private @Nullable Output<List<String>> customTags;

    /**
     * @return For the tabular view, a list of point tags to display when using the `custom` tag display mode.
     * 
     */
    public Optional<Output<List<String>>> customTags() {
        return Optional.ofNullable(this.customTags);
    }

    /**
     * Threshold (in seconds) for time delta between consecutive points in a series
     * above which a dotted line will replace a solid in in line plots. Default is 60.
     * 
     */
    @Import(name="expectedDataSpacing")
    private @Nullable Output<Integer> expectedDataSpacing;

    /**
     * @return Threshold (in seconds) for time delta between consecutive points in a series
     * above which a dotted line will replace a solid in in line plots. Default is 60.
     * 
     */
    public Optional<Output<Integer>> expectedDataSpacing() {
        return Optional.ofNullable(this.expectedDataSpacing);
    }

    /**
     * For a chart with a fixed legend, a list of statistics to display in the legend.
     * 
     */
    @Import(name="fixedLegendDisplayStats")
    private @Nullable Output<List<String>> fixedLegendDisplayStats;

    /**
     * @return For a chart with a fixed legend, a list of statistics to display in the legend.
     * 
     */
    public Optional<Output<List<String>>> fixedLegendDisplayStats() {
        return Optional.ofNullable(this.fixedLegendDisplayStats);
    }

    /**
     * Whether to enable a fixed tabular legend adjacent to the chart.
     * 
     */
    @Import(name="fixedLegendEnabled")
    private @Nullable Output<Boolean> fixedLegendEnabled;

    /**
     * @return Whether to enable a fixed tabular legend adjacent to the chart.
     * 
     */
    public Optional<Output<Boolean>> fixedLegendEnabled() {
        return Optional.ofNullable(this.fixedLegendEnabled);
    }

    /**
     * Statistic to use for determining whether a series is displayed on the fixed legend.
     * Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
     * 
     */
    @Import(name="fixedLegendFilterField")
    private @Nullable Output<String> fixedLegendFilterField;

    /**
     * @return Statistic to use for determining whether a series is displayed on the fixed legend.
     * Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
     * 
     */
    public Optional<Output<String>> fixedLegendFilterField() {
        return Optional.ofNullable(this.fixedLegendFilterField);
    }

    /**
     * Number of series to include in the fixed legend.
     * 
     */
    @Import(name="fixedLegendFilterLimit")
    private @Nullable Output<Integer> fixedLegendFilterLimit;

    /**
     * @return Number of series to include in the fixed legend.
     * 
     */
    public Optional<Output<Integer>> fixedLegendFilterLimit() {
        return Optional.ofNullable(this.fixedLegendFilterLimit);
    }

    /**
     * Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
     * are `TOP`, and `BOTTOM`.
     * 
     */
    @Import(name="fixedLegendFilterSort")
    private @Nullable Output<String> fixedLegendFilterSort;

    /**
     * @return Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
     * are `TOP`, and `BOTTOM`.
     * 
     */
    public Optional<Output<String>> fixedLegendFilterSort() {
        return Optional.ofNullable(this.fixedLegendFilterSort);
    }

    /**
     * This setting is deprecated.
     * 
     */
    @Import(name="fixedLegendHideLabel")
    private @Nullable Output<Boolean> fixedLegendHideLabel;

    /**
     * @return This setting is deprecated.
     * 
     */
    public Optional<Output<Boolean>> fixedLegendHideLabel() {
        return Optional.ofNullable(this.fixedLegendHideLabel);
    }

    /**
     * Where the fixed legend should be displayed with respect to the chart.
     * Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
     * 
     */
    @Import(name="fixedLegendPosition")
    private @Nullable Output<String> fixedLegendPosition;

    /**
     * @return Where the fixed legend should be displayed with respect to the chart.
     * Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
     * 
     */
    public Optional<Output<String>> fixedLegendPosition() {
        return Optional.ofNullable(this.fixedLegendPosition);
    }

    /**
     * If `true`, the legend uses non-summarized stats instead of summarized.
     * 
     */
    @Import(name="fixedLegendUseRawStats")
    private @Nullable Output<Boolean> fixedLegendUseRawStats;

    /**
     * @return If `true`, the legend uses non-summarized stats instead of summarized.
     * 
     */
    public Optional<Output<Boolean>> fixedLegendUseRawStats() {
        return Optional.ofNullable(this.fixedLegendUseRawStats);
    }

    /**
     * For the tabular view, whether to group multi metrics into a single row by a common source.
     * If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host are displayed as different
     * columns in the same row.
     * 
     */
    @Import(name="groupBySource")
    private @Nullable Output<Boolean> groupBySource;

    /**
     * @return For the tabular view, whether to group multi metrics into a single row by a common source.
     * If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host are displayed as different
     * columns in the same row.
     * 
     */
    public Optional<Output<Boolean>> groupBySource() {
        return Optional.ofNullable(this.groupBySource);
    }

    /**
     * Whether to disable the display of the floating legend (but
     * reenable it when the ctrl-key is pressed).
     * 
     */
    @Import(name="invertDynamicLegendHoverControl")
    private @Nullable Output<Boolean> invertDynamicLegendHoverControl;

    /**
     * @return Whether to disable the display of the floating legend (but
     * reenable it when the ctrl-key is pressed).
     * 
     */
    public Optional<Output<Boolean>> invertDynamicLegendHoverControl() {
        return Optional.ofNullable(this.invertDynamicLegendHoverControl);
    }

    /**
     * Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`,
     * `step-after`, `basis`, `cardinal`, and `monotone`.
     * 
     */
    @Import(name="lineType")
    private @Nullable Output<String> lineType;

    /**
     * @return Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`,
     * `step-after`, `basis`, `cardinal`, and `monotone`.
     * 
     */
    public Optional<Output<String>> lineType() {
        return Optional.ofNullable(this.lineType);
    }

    /**
     * Max value of the Y-axis. Set to null or leave blank for auto.
     * 
     */
    @Import(name="max")
    private @Nullable Output<Double> max;

    /**
     * @return Max value of the Y-axis. Set to null or leave blank for auto.
     * 
     */
    public Optional<Output<Double>> max() {
        return Optional.ofNullable(this.max);
    }

    /**
     * Min value of the Y-axis. Set to null or leave blank for auto.
     * 
     */
    @Import(name="min")
    private @Nullable Output<Double> min;

    /**
     * @return Min value of the Y-axis. Set to null or leave blank for auto.
     * 
     */
    public Optional<Output<Double>> min() {
        return Optional.ofNullable(this.min);
    }

    /**
     * For the tabular view defines how many point tags to display.
     * 
     */
    @Import(name="numTags")
    private @Nullable Output<Integer> numTags;

    /**
     * @return For the tabular view defines how many point tags to display.
     * 
     */
    public Optional<Output<Integer>> numTags() {
        return Optional.ofNullable(this.numTags);
    }

    /**
     * The markdown content for a Markdown display, in plain text.
     * 
     */
    @Import(name="plainMarkdownContent")
    private @Nullable Output<String> plainMarkdownContent;

    /**
     * @return The markdown content for a Markdown display, in plain text.
     * 
     */
    public Optional<Output<String>> plainMarkdownContent() {
        return Optional.ofNullable(this.plainMarkdownContent);
    }

    /**
     * For the tabular view, whether to display sources. Default is `true`.
     * 
     */
    @Import(name="showHosts")
    private @Nullable Output<Boolean> showHosts;

    /**
     * @return For the tabular view, whether to display sources. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> showHosts() {
        return Optional.ofNullable(this.showHosts);
    }

    /**
     * For the tabular view, whether to display labels. Default is `true`.
     * 
     */
    @Import(name="showLabels")
    private @Nullable Output<Boolean> showLabels;

    /**
     * @return For the tabular view, whether to display labels. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> showLabels() {
        return Optional.ofNullable(this.showLabels);
    }

    /**
     * For the tabular view, whether to display raw values. Default is `false`.
     * 
     */
    @Import(name="showRawValues")
    private @Nullable Output<Boolean> showRawValues;

    /**
     * @return For the tabular view, whether to display raw values. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> showRawValues() {
        return Optional.ofNullable(this.showRawValues);
    }

    /**
     * For the tabular view, whether to display values in descending order. Default is `false`.
     * 
     */
    @Import(name="sortValuesDescending")
    private @Nullable Output<Boolean> sortValuesDescending;

    /**
     * @return For the tabular view, whether to display values in descending order. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> sortValuesDescending() {
        return Optional.ofNullable(this.sortValuesDescending);
    }

    /**
     * For the single stat view, the decimal precision of the displayed number.
     * 
     */
    @Import(name="sparklineDecimalPrecision")
    private @Nullable Output<Integer> sparklineDecimalPrecision;

    /**
     * @return For the single stat view, the decimal precision of the displayed number.
     * 
     */
    public Optional<Output<Integer>> sparklineDecimalPrecision() {
        return Optional.ofNullable(this.sparklineDecimalPrecision);
    }

    /**
     * For the single stat view, the color of the displayed text (when not dynamically determined).
     * Values should be in `rgba(,,,,)` format.
     * 
     */
    @Import(name="sparklineDisplayColor")
    private @Nullable Output<String> sparklineDisplayColor;

    /**
     * @return For the single stat view, the color of the displayed text (when not dynamically determined).
     * Values should be in `rgba(,,,,)` format.
     * 
     */
    public Optional<Output<String>> sparklineDisplayColor() {
        return Optional.ofNullable(this.sparklineDisplayColor);
    }

    /**
     * For the single stat view, the font size of the displayed text, in percent.
     * 
     */
    @Import(name="sparklineDisplayFontSize")
    private @Nullable Output<String> sparklineDisplayFontSize;

    /**
     * @return For the single stat view, the font size of the displayed text, in percent.
     * 
     */
    public Optional<Output<String>> sparklineDisplayFontSize() {
        return Optional.ofNullable(this.sparklineDisplayFontSize);
    }

    /**
     * For the single stat view, the horizontal position of the displayed text.
     * Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
     * 
     */
    @Import(name="sparklineDisplayHorizontalPosition")
    private @Nullable Output<String> sparklineDisplayHorizontalPosition;

    /**
     * @return For the single stat view, the horizontal position of the displayed text.
     * Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
     * 
     */
    public Optional<Output<String>> sparklineDisplayHorizontalPosition() {
        return Optional.ofNullable(this.sparklineDisplayHorizontalPosition);
    }

    /**
     * For the single stat view, a string to append to the displayed text.
     * 
     */
    @Import(name="sparklineDisplayPostfix")
    private @Nullable Output<String> sparklineDisplayPostfix;

    /**
     * @return For the single stat view, a string to append to the displayed text.
     * 
     */
    public Optional<Output<String>> sparklineDisplayPostfix() {
        return Optional.ofNullable(this.sparklineDisplayPostfix);
    }

    /**
     * For the single stat view, a string to add before the displayed text.
     * 
     */
    @Import(name="sparklineDisplayPrefix")
    private @Nullable Output<String> sparklineDisplayPrefix;

    /**
     * @return For the single stat view, a string to add before the displayed text.
     * 
     */
    public Optional<Output<String>> sparklineDisplayPrefix() {
        return Optional.ofNullable(this.sparklineDisplayPrefix);
    }

    /**
     * For the single stat view, where to display the name of the query or the value of the query.
     * Valid options are `VALUE` or `LABEL`.
     * 
     */
    @Import(name="sparklineDisplayValueType")
    private @Nullable Output<String> sparklineDisplayValueType;

    /**
     * @return For the single stat view, where to display the name of the query or the value of the query.
     * Valid options are `VALUE` or `LABEL`.
     * 
     */
    public Optional<Output<String>> sparklineDisplayValueType() {
        return Optional.ofNullable(this.sparklineDisplayValueType);
    }

    /**
     * This setting is deprecated.
     * 
     */
    @Import(name="sparklineDisplayVerticalPosition")
    private @Nullable Output<String> sparklineDisplayVerticalPosition;

    /**
     * @return This setting is deprecated.
     * 
     */
    public Optional<Output<String>> sparklineDisplayVerticalPosition() {
        return Optional.ofNullable(this.sparklineDisplayVerticalPosition);
    }

    /**
     * For the single stat view, the color of the background fill.  Values should be
     * in `rgba(,,,,)`.
     * 
     */
    @Import(name="sparklineFillColor")
    private @Nullable Output<String> sparklineFillColor;

    /**
     * @return For the single stat view, the color of the background fill.  Values should be
     * in `rgba(,,,,)`.
     * 
     */
    public Optional<Output<String>> sparklineFillColor() {
        return Optional.ofNullable(this.sparklineFillColor);
    }

    /**
     * For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format.
     * 
     */
    @Import(name="sparklineLineColor")
    private @Nullable Output<String> sparklineLineColor;

    /**
     * @return For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format.
     * 
     */
    public Optional<Output<String>> sparklineLineColor() {
        return Optional.ofNullable(this.sparklineLineColor);
    }

    /**
     * For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart.
     * Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
     * 
     */
    @Import(name="sparklineSize")
    private @Nullable Output<String> sparklineSize;

    /**
     * @return For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart.
     * Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
     * 
     */
    public Optional<Output<String>> sparklineSize() {
        return Optional.ofNullable(this.sparklineSize);
    }

    /**
     * For the single stat view, whether to apply dynamic color settings to
     * the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
     * 
     */
    @Import(name="sparklineValueColorMapApplyTo")
    private @Nullable Output<String> sparklineValueColorMapApplyTo;

    /**
     * @return For the single stat view, whether to apply dynamic color settings to
     * the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
     * 
     */
    public Optional<Output<String>> sparklineValueColorMapApplyTo() {
        return Optional.ofNullable(this.sparklineValueColorMapApplyTo);
    }

    /**
     * For the single stat view, A list of colors that differing query values map to.
     * Must contain one more element than `sparkline_value_color_map_values_v2`. Values should be in `rgba(,,,,)`.
     * 
     */
    @Import(name="sparklineValueColorMapColors")
    private @Nullable Output<List<String>> sparklineValueColorMapColors;

    /**
     * @return For the single stat view, A list of colors that differing query values map to.
     * Must contain one more element than `sparkline_value_color_map_values_v2`. Values should be in `rgba(,,,,)`.
     * 
     */
    public Optional<Output<List<String>>> sparklineValueColorMapColors() {
        return Optional.ofNullable(this.sparklineValueColorMapColors);
    }

    /**
     * This setting is deprecated.
     * 
     */
    @Import(name="sparklineValueColorMapValues")
    private @Nullable Output<List<Integer>> sparklineValueColorMapValues;

    /**
     * @return This setting is deprecated.
     * 
     */
    public Optional<Output<List<Integer>>> sparklineValueColorMapValues() {
        return Optional.ofNullable(this.sparklineValueColorMapValues);
    }

    /**
     * For the single stat view, a list of boundaries for mapping different
     * query values to colors.  Must contain one element less than `sparkline_value_color_map_colors`.
     * 
     */
    @Import(name="sparklineValueColorMapValuesV2s")
    private @Nullable Output<List<Double>> sparklineValueColorMapValuesV2s;

    /**
     * @return For the single stat view, a list of boundaries for mapping different
     * query values to colors.  Must contain one element less than `sparkline_value_color_map_colors`.
     * 
     */
    public Optional<Output<List<Double>>> sparklineValueColorMapValuesV2s() {
        return Optional.ofNullable(this.sparklineValueColorMapValuesV2s);
    }

    /**
     * For the single stat view, a list of display text values that different query
     * values map to.  Must contain one more element than `sparkline_value_text_map_thresholds`.
     * 
     */
    @Import(name="sparklineValueTextMapTexts")
    private @Nullable Output<List<String>> sparklineValueTextMapTexts;

    /**
     * @return For the single stat view, a list of display text values that different query
     * values map to.  Must contain one more element than `sparkline_value_text_map_thresholds`.
     * 
     */
    public Optional<Output<List<String>>> sparklineValueTextMapTexts() {
        return Optional.ofNullable(this.sparklineValueTextMapTexts);
    }

    /**
     * For the single stat view, a list of threshold boundaries for
     * mapping different query values to display text.  Must contain one element less than `sparkline_value_text_map_text`.
     * 
     */
    @Import(name="sparklineValueTextMapThresholds")
    private @Nullable Output<List<Double>> sparklineValueTextMapThresholds;

    /**
     * @return For the single stat view, a list of threshold boundaries for
     * mapping different query values to display text.  Must contain one element less than `sparkline_value_text_map_text`.
     * 
     */
    public Optional<Output<List<Double>>> sparklineValueTextMapThresholds() {
        return Optional.ofNullable(this.sparklineValueTextMapThresholds);
    }

    /**
     * Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
     * stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
     * center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
     * 
     */
    @Import(name="stackType")
    private @Nullable Output<String> stackType;

    /**
     * @return Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
     * stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
     * center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
     * 
     */
    public Optional<Output<String>> stackType() {
        return Optional.ofNullable(this.stackType);
    }

    /**
     * For the tabular view, which mode to use to determine which point tags to display.
     * Valid options are `all`, `top`, or `custom`.
     * 
     */
    @Import(name="tagMode")
    private @Nullable Output<String> tagMode;

    /**
     * @return For the tabular view, which mode to use to determine which point tags to display.
     * Valid options are `all`, `top`, or `custom`.
     * 
     */
    public Optional<Output<String>> tagMode() {
        return Optional.ofNullable(this.tagMode);
    }

    /**
     * For x-y scatterplots, whether to color more recent points as darker than older points.
     * 
     */
    @Import(name="timeBasedColoring")
    private @Nullable Output<Boolean> timeBasedColoring;

    /**
     * @return For x-y scatterplots, whether to color more recent points as darker than older points.
     * 
     */
    public Optional<Output<Boolean>> timeBasedColoring() {
        return Optional.ofNullable(this.timeBasedColoring);
    }

    /**
     * Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to
     * the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the
     * Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
     * `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
     * `top-k`, `status-list`, and `histogram`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to
     * the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the
     * Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
     * `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
     * `top-k`, `status-list`, and `histogram`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Width, in minutes, of the time window to use for `last` windowing.
     * 
     */
    @Import(name="windowSize")
    private @Nullable Output<Integer> windowSize;

    /**
     * @return Width, in minutes, of the time window to use for `last` windowing.
     * 
     */
    public Optional<Output<Integer>> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }

    /**
     * For the tabular view, whether to use the full time window for the query or the last X minutes.
     * Valid options are `full` or `last`.
     * 
     */
    @Import(name="windowing")
    private @Nullable Output<String> windowing;

    /**
     * @return For the tabular view, whether to use the full time window for the query or the last X minutes.
     * Valid options are `full` or `last`.
     * 
     */
    public Optional<Output<String>> windowing() {
        return Optional.ofNullable(this.windowing);
    }

    /**
     * For x-y scatterplots, max value for the X-axis. Set to null for auto.
     * 
     */
    @Import(name="xmax")
    private @Nullable Output<Double> xmax;

    /**
     * @return For x-y scatterplots, max value for the X-axis. Set to null for auto.
     * 
     */
    public Optional<Output<Double>> xmax() {
        return Optional.ofNullable(this.xmax);
    }

    /**
     * For x-y scatterplots, min value for the X-axis. Set to null for auto.
     * 
     */
    @Import(name="xmin")
    private @Nullable Output<Double> xmin;

    /**
     * @return For x-y scatterplots, min value for the X-axis. Set to null for auto.
     * 
     */
    public Optional<Output<Double>> xmin() {
        return Optional.ofNullable(this.xmin);
    }

    /**
     * Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     * 
     */
    @Import(name="y0ScaleSiBy1024")
    private @Nullable Output<Boolean> y0ScaleSiBy1024;

    /**
     * @return Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     * 
     */
    public Optional<Output<Boolean>> y0ScaleSiBy1024() {
        return Optional.ofNullable(this.y0ScaleSiBy1024);
    }

    /**
     * Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
     * 
     */
    @Import(name="y0UnitAutoscaling")
    private @Nullable Output<Boolean> y0UnitAutoscaling;

    /**
     * @return Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
     * 
     */
    public Optional<Output<Boolean>> y0UnitAutoscaling() {
        return Optional.ofNullable(this.y0UnitAutoscaling);
    }

    /**
     * Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     * 
     */
    @Import(name="y1ScaleSiBy1024")
    private @Nullable Output<Boolean> y1ScaleSiBy1024;

    /**
     * @return Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     * 
     */
    public Optional<Output<Boolean>> y1ScaleSiBy1024() {
        return Optional.ofNullable(this.y1ScaleSiBy1024);
    }

    /**
     * Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
     * 
     */
    @Import(name="y1UnitAutoscaling")
    private @Nullable Output<Boolean> y1UnitAutoscaling;

    /**
     * @return Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
     * 
     */
    public Optional<Output<Boolean>> y1UnitAutoscaling() {
        return Optional.ofNullable(this.y1UnitAutoscaling);
    }

    /**
     * For plots with multiple Y-axes, units for right side Y-axis.
     * 
     */
    @Import(name="y1Units")
    private @Nullable Output<String> y1Units;

    /**
     * @return For plots with multiple Y-axes, units for right side Y-axis.
     * 
     */
    public Optional<Output<String>> y1Units() {
        return Optional.ofNullable(this.y1Units);
    }

    /**
     * For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto.
     * 
     */
    @Import(name="y1max")
    private @Nullable Output<Double> y1max;

    /**
     * @return For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto.
     * 
     */
    public Optional<Output<Double>> y1max() {
        return Optional.ofNullable(this.y1max);
    }

    /**
     * For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto.
     * 
     */
    @Import(name="y1min")
    private @Nullable Output<Double> y1min;

    /**
     * @return For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto.
     * 
     */
    public Optional<Output<Double>> y1min() {
        return Optional.ofNullable(this.y1min);
    }

    /**
     * For x-y scatterplots, max value for the Y-axis. Set to null for auto.
     * 
     */
    @Import(name="ymax")
    private @Nullable Output<Double> ymax;

    /**
     * @return For x-y scatterplots, max value for the Y-axis. Set to null for auto.
     * 
     */
    public Optional<Output<Double>> ymax() {
        return Optional.ofNullable(this.ymax);
    }

    /**
     * For x-y scatterplots, min value for the Y-axis. Set to null for auto.
     * 
     */
    @Import(name="ymin")
    private @Nullable Output<Double> ymin;

    /**
     * @return For x-y scatterplots, min value for the Y-axis. Set to null for auto.
     * 
     */
    public Optional<Output<Double>> ymin() {
        return Optional.ofNullable(this.ymin);
    }

    private DashboardSectionRowChartChartSettingArgs() {}

    private DashboardSectionRowChartChartSettingArgs(DashboardSectionRowChartChartSettingArgs $) {
        this.autoColumnTags = $.autoColumnTags;
        this.columnTags = $.columnTags;
        this.customTags = $.customTags;
        this.expectedDataSpacing = $.expectedDataSpacing;
        this.fixedLegendDisplayStats = $.fixedLegendDisplayStats;
        this.fixedLegendEnabled = $.fixedLegendEnabled;
        this.fixedLegendFilterField = $.fixedLegendFilterField;
        this.fixedLegendFilterLimit = $.fixedLegendFilterLimit;
        this.fixedLegendFilterSort = $.fixedLegendFilterSort;
        this.fixedLegendHideLabel = $.fixedLegendHideLabel;
        this.fixedLegendPosition = $.fixedLegendPosition;
        this.fixedLegendUseRawStats = $.fixedLegendUseRawStats;
        this.groupBySource = $.groupBySource;
        this.invertDynamicLegendHoverControl = $.invertDynamicLegendHoverControl;
        this.lineType = $.lineType;
        this.max = $.max;
        this.min = $.min;
        this.numTags = $.numTags;
        this.plainMarkdownContent = $.plainMarkdownContent;
        this.showHosts = $.showHosts;
        this.showLabels = $.showLabels;
        this.showRawValues = $.showRawValues;
        this.sortValuesDescending = $.sortValuesDescending;
        this.sparklineDecimalPrecision = $.sparklineDecimalPrecision;
        this.sparklineDisplayColor = $.sparklineDisplayColor;
        this.sparklineDisplayFontSize = $.sparklineDisplayFontSize;
        this.sparklineDisplayHorizontalPosition = $.sparklineDisplayHorizontalPosition;
        this.sparklineDisplayPostfix = $.sparklineDisplayPostfix;
        this.sparklineDisplayPrefix = $.sparklineDisplayPrefix;
        this.sparklineDisplayValueType = $.sparklineDisplayValueType;
        this.sparklineDisplayVerticalPosition = $.sparklineDisplayVerticalPosition;
        this.sparklineFillColor = $.sparklineFillColor;
        this.sparklineLineColor = $.sparklineLineColor;
        this.sparklineSize = $.sparklineSize;
        this.sparklineValueColorMapApplyTo = $.sparklineValueColorMapApplyTo;
        this.sparklineValueColorMapColors = $.sparklineValueColorMapColors;
        this.sparklineValueColorMapValues = $.sparklineValueColorMapValues;
        this.sparklineValueColorMapValuesV2s = $.sparklineValueColorMapValuesV2s;
        this.sparklineValueTextMapTexts = $.sparklineValueTextMapTexts;
        this.sparklineValueTextMapThresholds = $.sparklineValueTextMapThresholds;
        this.stackType = $.stackType;
        this.tagMode = $.tagMode;
        this.timeBasedColoring = $.timeBasedColoring;
        this.type = $.type;
        this.windowSize = $.windowSize;
        this.windowing = $.windowing;
        this.xmax = $.xmax;
        this.xmin = $.xmin;
        this.y0ScaleSiBy1024 = $.y0ScaleSiBy1024;
        this.y0UnitAutoscaling = $.y0UnitAutoscaling;
        this.y1ScaleSiBy1024 = $.y1ScaleSiBy1024;
        this.y1UnitAutoscaling = $.y1UnitAutoscaling;
        this.y1Units = $.y1Units;
        this.y1max = $.y1max;
        this.y1min = $.y1min;
        this.ymax = $.ymax;
        this.ymin = $.ymin;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardSectionRowChartChartSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardSectionRowChartChartSettingArgs $;

        public Builder() {
            $ = new DashboardSectionRowChartChartSettingArgs();
        }

        public Builder(DashboardSectionRowChartChartSettingArgs defaults) {
            $ = new DashboardSectionRowChartChartSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoColumnTags This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder autoColumnTags(@Nullable Output<Boolean> autoColumnTags) {
            $.autoColumnTags = autoColumnTags;
            return this;
        }

        /**
         * @param autoColumnTags This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder autoColumnTags(Boolean autoColumnTags) {
            return autoColumnTags(Output.of(autoColumnTags));
        }

        /**
         * @param columnTags This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder columnTags(@Nullable Output<String> columnTags) {
            $.columnTags = columnTags;
            return this;
        }

        /**
         * @param columnTags This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder columnTags(String columnTags) {
            return columnTags(Output.of(columnTags));
        }

        /**
         * @param customTags For the tabular view, a list of point tags to display when using the `custom` tag display mode.
         * 
         * @return builder
         * 
         */
        public Builder customTags(@Nullable Output<List<String>> customTags) {
            $.customTags = customTags;
            return this;
        }

        /**
         * @param customTags For the tabular view, a list of point tags to display when using the `custom` tag display mode.
         * 
         * @return builder
         * 
         */
        public Builder customTags(List<String> customTags) {
            return customTags(Output.of(customTags));
        }

        /**
         * @param customTags For the tabular view, a list of point tags to display when using the `custom` tag display mode.
         * 
         * @return builder
         * 
         */
        public Builder customTags(String... customTags) {
            return customTags(List.of(customTags));
        }

        /**
         * @param expectedDataSpacing Threshold (in seconds) for time delta between consecutive points in a series
         * above which a dotted line will replace a solid in in line plots. Default is 60.
         * 
         * @return builder
         * 
         */
        public Builder expectedDataSpacing(@Nullable Output<Integer> expectedDataSpacing) {
            $.expectedDataSpacing = expectedDataSpacing;
            return this;
        }

        /**
         * @param expectedDataSpacing Threshold (in seconds) for time delta between consecutive points in a series
         * above which a dotted line will replace a solid in in line plots. Default is 60.
         * 
         * @return builder
         * 
         */
        public Builder expectedDataSpacing(Integer expectedDataSpacing) {
            return expectedDataSpacing(Output.of(expectedDataSpacing));
        }

        /**
         * @param fixedLegendDisplayStats For a chart with a fixed legend, a list of statistics to display in the legend.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendDisplayStats(@Nullable Output<List<String>> fixedLegendDisplayStats) {
            $.fixedLegendDisplayStats = fixedLegendDisplayStats;
            return this;
        }

        /**
         * @param fixedLegendDisplayStats For a chart with a fixed legend, a list of statistics to display in the legend.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendDisplayStats(List<String> fixedLegendDisplayStats) {
            return fixedLegendDisplayStats(Output.of(fixedLegendDisplayStats));
        }

        /**
         * @param fixedLegendDisplayStats For a chart with a fixed legend, a list of statistics to display in the legend.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendDisplayStats(String... fixedLegendDisplayStats) {
            return fixedLegendDisplayStats(List.of(fixedLegendDisplayStats));
        }

        /**
         * @param fixedLegendEnabled Whether to enable a fixed tabular legend adjacent to the chart.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendEnabled(@Nullable Output<Boolean> fixedLegendEnabled) {
            $.fixedLegendEnabled = fixedLegendEnabled;
            return this;
        }

        /**
         * @param fixedLegendEnabled Whether to enable a fixed tabular legend adjacent to the chart.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendEnabled(Boolean fixedLegendEnabled) {
            return fixedLegendEnabled(Output.of(fixedLegendEnabled));
        }

        /**
         * @param fixedLegendFilterField Statistic to use for determining whether a series is displayed on the fixed legend.
         * Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendFilterField(@Nullable Output<String> fixedLegendFilterField) {
            $.fixedLegendFilterField = fixedLegendFilterField;
            return this;
        }

        /**
         * @param fixedLegendFilterField Statistic to use for determining whether a series is displayed on the fixed legend.
         * Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendFilterField(String fixedLegendFilterField) {
            return fixedLegendFilterField(Output.of(fixedLegendFilterField));
        }

        /**
         * @param fixedLegendFilterLimit Number of series to include in the fixed legend.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendFilterLimit(@Nullable Output<Integer> fixedLegendFilterLimit) {
            $.fixedLegendFilterLimit = fixedLegendFilterLimit;
            return this;
        }

        /**
         * @param fixedLegendFilterLimit Number of series to include in the fixed legend.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendFilterLimit(Integer fixedLegendFilterLimit) {
            return fixedLegendFilterLimit(Output.of(fixedLegendFilterLimit));
        }

        /**
         * @param fixedLegendFilterSort Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
         * are `TOP`, and `BOTTOM`.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendFilterSort(@Nullable Output<String> fixedLegendFilterSort) {
            $.fixedLegendFilterSort = fixedLegendFilterSort;
            return this;
        }

        /**
         * @param fixedLegendFilterSort Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
         * are `TOP`, and `BOTTOM`.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendFilterSort(String fixedLegendFilterSort) {
            return fixedLegendFilterSort(Output.of(fixedLegendFilterSort));
        }

        /**
         * @param fixedLegendHideLabel This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendHideLabel(@Nullable Output<Boolean> fixedLegendHideLabel) {
            $.fixedLegendHideLabel = fixedLegendHideLabel;
            return this;
        }

        /**
         * @param fixedLegendHideLabel This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendHideLabel(Boolean fixedLegendHideLabel) {
            return fixedLegendHideLabel(Output.of(fixedLegendHideLabel));
        }

        /**
         * @param fixedLegendPosition Where the fixed legend should be displayed with respect to the chart.
         * Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendPosition(@Nullable Output<String> fixedLegendPosition) {
            $.fixedLegendPosition = fixedLegendPosition;
            return this;
        }

        /**
         * @param fixedLegendPosition Where the fixed legend should be displayed with respect to the chart.
         * Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendPosition(String fixedLegendPosition) {
            return fixedLegendPosition(Output.of(fixedLegendPosition));
        }

        /**
         * @param fixedLegendUseRawStats If `true`, the legend uses non-summarized stats instead of summarized.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendUseRawStats(@Nullable Output<Boolean> fixedLegendUseRawStats) {
            $.fixedLegendUseRawStats = fixedLegendUseRawStats;
            return this;
        }

        /**
         * @param fixedLegendUseRawStats If `true`, the legend uses non-summarized stats instead of summarized.
         * 
         * @return builder
         * 
         */
        public Builder fixedLegendUseRawStats(Boolean fixedLegendUseRawStats) {
            return fixedLegendUseRawStats(Output.of(fixedLegendUseRawStats));
        }

        /**
         * @param groupBySource For the tabular view, whether to group multi metrics into a single row by a common source.
         * If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host are displayed as different
         * columns in the same row.
         * 
         * @return builder
         * 
         */
        public Builder groupBySource(@Nullable Output<Boolean> groupBySource) {
            $.groupBySource = groupBySource;
            return this;
        }

        /**
         * @param groupBySource For the tabular view, whether to group multi metrics into a single row by a common source.
         * If `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host are displayed as different
         * columns in the same row.
         * 
         * @return builder
         * 
         */
        public Builder groupBySource(Boolean groupBySource) {
            return groupBySource(Output.of(groupBySource));
        }

        /**
         * @param invertDynamicLegendHoverControl Whether to disable the display of the floating legend (but
         * reenable it when the ctrl-key is pressed).
         * 
         * @return builder
         * 
         */
        public Builder invertDynamicLegendHoverControl(@Nullable Output<Boolean> invertDynamicLegendHoverControl) {
            $.invertDynamicLegendHoverControl = invertDynamicLegendHoverControl;
            return this;
        }

        /**
         * @param invertDynamicLegendHoverControl Whether to disable the display of the floating legend (but
         * reenable it when the ctrl-key is pressed).
         * 
         * @return builder
         * 
         */
        public Builder invertDynamicLegendHoverControl(Boolean invertDynamicLegendHoverControl) {
            return invertDynamicLegendHoverControl(Output.of(invertDynamicLegendHoverControl));
        }

        /**
         * @param lineType Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`,
         * `step-after`, `basis`, `cardinal`, and `monotone`.
         * 
         * @return builder
         * 
         */
        public Builder lineType(@Nullable Output<String> lineType) {
            $.lineType = lineType;
            return this;
        }

        /**
         * @param lineType Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`,
         * `step-after`, `basis`, `cardinal`, and `monotone`.
         * 
         * @return builder
         * 
         */
        public Builder lineType(String lineType) {
            return lineType(Output.of(lineType));
        }

        /**
         * @param max Max value of the Y-axis. Set to null or leave blank for auto.
         * 
         * @return builder
         * 
         */
        public Builder max(@Nullable Output<Double> max) {
            $.max = max;
            return this;
        }

        /**
         * @param max Max value of the Y-axis. Set to null or leave blank for auto.
         * 
         * @return builder
         * 
         */
        public Builder max(Double max) {
            return max(Output.of(max));
        }

        /**
         * @param min Min value of the Y-axis. Set to null or leave blank for auto.
         * 
         * @return builder
         * 
         */
        public Builder min(@Nullable Output<Double> min) {
            $.min = min;
            return this;
        }

        /**
         * @param min Min value of the Y-axis. Set to null or leave blank for auto.
         * 
         * @return builder
         * 
         */
        public Builder min(Double min) {
            return min(Output.of(min));
        }

        /**
         * @param numTags For the tabular view defines how many point tags to display.
         * 
         * @return builder
         * 
         */
        public Builder numTags(@Nullable Output<Integer> numTags) {
            $.numTags = numTags;
            return this;
        }

        /**
         * @param numTags For the tabular view defines how many point tags to display.
         * 
         * @return builder
         * 
         */
        public Builder numTags(Integer numTags) {
            return numTags(Output.of(numTags));
        }

        /**
         * @param plainMarkdownContent The markdown content for a Markdown display, in plain text.
         * 
         * @return builder
         * 
         */
        public Builder plainMarkdownContent(@Nullable Output<String> plainMarkdownContent) {
            $.plainMarkdownContent = plainMarkdownContent;
            return this;
        }

        /**
         * @param plainMarkdownContent The markdown content for a Markdown display, in plain text.
         * 
         * @return builder
         * 
         */
        public Builder plainMarkdownContent(String plainMarkdownContent) {
            return plainMarkdownContent(Output.of(plainMarkdownContent));
        }

        /**
         * @param showHosts For the tabular view, whether to display sources. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder showHosts(@Nullable Output<Boolean> showHosts) {
            $.showHosts = showHosts;
            return this;
        }

        /**
         * @param showHosts For the tabular view, whether to display sources. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder showHosts(Boolean showHosts) {
            return showHosts(Output.of(showHosts));
        }

        /**
         * @param showLabels For the tabular view, whether to display labels. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder showLabels(@Nullable Output<Boolean> showLabels) {
            $.showLabels = showLabels;
            return this;
        }

        /**
         * @param showLabels For the tabular view, whether to display labels. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder showLabels(Boolean showLabels) {
            return showLabels(Output.of(showLabels));
        }

        /**
         * @param showRawValues For the tabular view, whether to display raw values. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder showRawValues(@Nullable Output<Boolean> showRawValues) {
            $.showRawValues = showRawValues;
            return this;
        }

        /**
         * @param showRawValues For the tabular view, whether to display raw values. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder showRawValues(Boolean showRawValues) {
            return showRawValues(Output.of(showRawValues));
        }

        /**
         * @param sortValuesDescending For the tabular view, whether to display values in descending order. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder sortValuesDescending(@Nullable Output<Boolean> sortValuesDescending) {
            $.sortValuesDescending = sortValuesDescending;
            return this;
        }

        /**
         * @param sortValuesDescending For the tabular view, whether to display values in descending order. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder sortValuesDescending(Boolean sortValuesDescending) {
            return sortValuesDescending(Output.of(sortValuesDescending));
        }

        /**
         * @param sparklineDecimalPrecision For the single stat view, the decimal precision of the displayed number.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDecimalPrecision(@Nullable Output<Integer> sparklineDecimalPrecision) {
            $.sparklineDecimalPrecision = sparklineDecimalPrecision;
            return this;
        }

        /**
         * @param sparklineDecimalPrecision For the single stat view, the decimal precision of the displayed number.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDecimalPrecision(Integer sparklineDecimalPrecision) {
            return sparklineDecimalPrecision(Output.of(sparklineDecimalPrecision));
        }

        /**
         * @param sparklineDisplayColor For the single stat view, the color of the displayed text (when not dynamically determined).
         * Values should be in `rgba(,,,,)` format.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayColor(@Nullable Output<String> sparklineDisplayColor) {
            $.sparklineDisplayColor = sparklineDisplayColor;
            return this;
        }

        /**
         * @param sparklineDisplayColor For the single stat view, the color of the displayed text (when not dynamically determined).
         * Values should be in `rgba(,,,,)` format.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayColor(String sparklineDisplayColor) {
            return sparklineDisplayColor(Output.of(sparklineDisplayColor));
        }

        /**
         * @param sparklineDisplayFontSize For the single stat view, the font size of the displayed text, in percent.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayFontSize(@Nullable Output<String> sparklineDisplayFontSize) {
            $.sparklineDisplayFontSize = sparklineDisplayFontSize;
            return this;
        }

        /**
         * @param sparklineDisplayFontSize For the single stat view, the font size of the displayed text, in percent.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayFontSize(String sparklineDisplayFontSize) {
            return sparklineDisplayFontSize(Output.of(sparklineDisplayFontSize));
        }

        /**
         * @param sparklineDisplayHorizontalPosition For the single stat view, the horizontal position of the displayed text.
         * Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayHorizontalPosition(@Nullable Output<String> sparklineDisplayHorizontalPosition) {
            $.sparklineDisplayHorizontalPosition = sparklineDisplayHorizontalPosition;
            return this;
        }

        /**
         * @param sparklineDisplayHorizontalPosition For the single stat view, the horizontal position of the displayed text.
         * Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayHorizontalPosition(String sparklineDisplayHorizontalPosition) {
            return sparklineDisplayHorizontalPosition(Output.of(sparklineDisplayHorizontalPosition));
        }

        /**
         * @param sparklineDisplayPostfix For the single stat view, a string to append to the displayed text.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayPostfix(@Nullable Output<String> sparklineDisplayPostfix) {
            $.sparklineDisplayPostfix = sparklineDisplayPostfix;
            return this;
        }

        /**
         * @param sparklineDisplayPostfix For the single stat view, a string to append to the displayed text.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayPostfix(String sparklineDisplayPostfix) {
            return sparklineDisplayPostfix(Output.of(sparklineDisplayPostfix));
        }

        /**
         * @param sparklineDisplayPrefix For the single stat view, a string to add before the displayed text.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayPrefix(@Nullable Output<String> sparklineDisplayPrefix) {
            $.sparklineDisplayPrefix = sparklineDisplayPrefix;
            return this;
        }

        /**
         * @param sparklineDisplayPrefix For the single stat view, a string to add before the displayed text.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayPrefix(String sparklineDisplayPrefix) {
            return sparklineDisplayPrefix(Output.of(sparklineDisplayPrefix));
        }

        /**
         * @param sparklineDisplayValueType For the single stat view, where to display the name of the query or the value of the query.
         * Valid options are `VALUE` or `LABEL`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayValueType(@Nullable Output<String> sparklineDisplayValueType) {
            $.sparklineDisplayValueType = sparklineDisplayValueType;
            return this;
        }

        /**
         * @param sparklineDisplayValueType For the single stat view, where to display the name of the query or the value of the query.
         * Valid options are `VALUE` or `LABEL`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayValueType(String sparklineDisplayValueType) {
            return sparklineDisplayValueType(Output.of(sparklineDisplayValueType));
        }

        /**
         * @param sparklineDisplayVerticalPosition This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayVerticalPosition(@Nullable Output<String> sparklineDisplayVerticalPosition) {
            $.sparklineDisplayVerticalPosition = sparklineDisplayVerticalPosition;
            return this;
        }

        /**
         * @param sparklineDisplayVerticalPosition This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder sparklineDisplayVerticalPosition(String sparklineDisplayVerticalPosition) {
            return sparklineDisplayVerticalPosition(Output.of(sparklineDisplayVerticalPosition));
        }

        /**
         * @param sparklineFillColor For the single stat view, the color of the background fill.  Values should be
         * in `rgba(,,,,)`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineFillColor(@Nullable Output<String> sparklineFillColor) {
            $.sparklineFillColor = sparklineFillColor;
            return this;
        }

        /**
         * @param sparklineFillColor For the single stat view, the color of the background fill.  Values should be
         * in `rgba(,,,,)`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineFillColor(String sparklineFillColor) {
            return sparklineFillColor(Output.of(sparklineFillColor));
        }

        /**
         * @param sparklineLineColor For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format.
         * 
         * @return builder
         * 
         */
        public Builder sparklineLineColor(@Nullable Output<String> sparklineLineColor) {
            $.sparklineLineColor = sparklineLineColor;
            return this;
        }

        /**
         * @param sparklineLineColor For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format.
         * 
         * @return builder
         * 
         */
        public Builder sparklineLineColor(String sparklineLineColor) {
            return sparklineLineColor(Output.of(sparklineLineColor));
        }

        /**
         * @param sparklineSize For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart.
         * Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineSize(@Nullable Output<String> sparklineSize) {
            $.sparklineSize = sparklineSize;
            return this;
        }

        /**
         * @param sparklineSize For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart.
         * Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineSize(String sparklineSize) {
            return sparklineSize(Output.of(sparklineSize));
        }

        /**
         * @param sparklineValueColorMapApplyTo For the single stat view, whether to apply dynamic color settings to
         * the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapApplyTo(@Nullable Output<String> sparklineValueColorMapApplyTo) {
            $.sparklineValueColorMapApplyTo = sparklineValueColorMapApplyTo;
            return this;
        }

        /**
         * @param sparklineValueColorMapApplyTo For the single stat view, whether to apply dynamic color settings to
         * the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapApplyTo(String sparklineValueColorMapApplyTo) {
            return sparklineValueColorMapApplyTo(Output.of(sparklineValueColorMapApplyTo));
        }

        /**
         * @param sparklineValueColorMapColors For the single stat view, A list of colors that differing query values map to.
         * Must contain one more element than `sparkline_value_color_map_values_v2`. Values should be in `rgba(,,,,)`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapColors(@Nullable Output<List<String>> sparklineValueColorMapColors) {
            $.sparklineValueColorMapColors = sparklineValueColorMapColors;
            return this;
        }

        /**
         * @param sparklineValueColorMapColors For the single stat view, A list of colors that differing query values map to.
         * Must contain one more element than `sparkline_value_color_map_values_v2`. Values should be in `rgba(,,,,)`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapColors(List<String> sparklineValueColorMapColors) {
            return sparklineValueColorMapColors(Output.of(sparklineValueColorMapColors));
        }

        /**
         * @param sparklineValueColorMapColors For the single stat view, A list of colors that differing query values map to.
         * Must contain one more element than `sparkline_value_color_map_values_v2`. Values should be in `rgba(,,,,)`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapColors(String... sparklineValueColorMapColors) {
            return sparklineValueColorMapColors(List.of(sparklineValueColorMapColors));
        }

        /**
         * @param sparklineValueColorMapValues This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapValues(@Nullable Output<List<Integer>> sparklineValueColorMapValues) {
            $.sparklineValueColorMapValues = sparklineValueColorMapValues;
            return this;
        }

        /**
         * @param sparklineValueColorMapValues This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapValues(List<Integer> sparklineValueColorMapValues) {
            return sparklineValueColorMapValues(Output.of(sparklineValueColorMapValues));
        }

        /**
         * @param sparklineValueColorMapValues This setting is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapValues(Integer... sparklineValueColorMapValues) {
            return sparklineValueColorMapValues(List.of(sparklineValueColorMapValues));
        }

        /**
         * @param sparklineValueColorMapValuesV2s For the single stat view, a list of boundaries for mapping different
         * query values to colors.  Must contain one element less than `sparkline_value_color_map_colors`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapValuesV2s(@Nullable Output<List<Double>> sparklineValueColorMapValuesV2s) {
            $.sparklineValueColorMapValuesV2s = sparklineValueColorMapValuesV2s;
            return this;
        }

        /**
         * @param sparklineValueColorMapValuesV2s For the single stat view, a list of boundaries for mapping different
         * query values to colors.  Must contain one element less than `sparkline_value_color_map_colors`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapValuesV2s(List<Double> sparklineValueColorMapValuesV2s) {
            return sparklineValueColorMapValuesV2s(Output.of(sparklineValueColorMapValuesV2s));
        }

        /**
         * @param sparklineValueColorMapValuesV2s For the single stat view, a list of boundaries for mapping different
         * query values to colors.  Must contain one element less than `sparkline_value_color_map_colors`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueColorMapValuesV2s(Double... sparklineValueColorMapValuesV2s) {
            return sparklineValueColorMapValuesV2s(List.of(sparklineValueColorMapValuesV2s));
        }

        /**
         * @param sparklineValueTextMapTexts For the single stat view, a list of display text values that different query
         * values map to.  Must contain one more element than `sparkline_value_text_map_thresholds`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueTextMapTexts(@Nullable Output<List<String>> sparklineValueTextMapTexts) {
            $.sparklineValueTextMapTexts = sparklineValueTextMapTexts;
            return this;
        }

        /**
         * @param sparklineValueTextMapTexts For the single stat view, a list of display text values that different query
         * values map to.  Must contain one more element than `sparkline_value_text_map_thresholds`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueTextMapTexts(List<String> sparklineValueTextMapTexts) {
            return sparklineValueTextMapTexts(Output.of(sparklineValueTextMapTexts));
        }

        /**
         * @param sparklineValueTextMapTexts For the single stat view, a list of display text values that different query
         * values map to.  Must contain one more element than `sparkline_value_text_map_thresholds`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueTextMapTexts(String... sparklineValueTextMapTexts) {
            return sparklineValueTextMapTexts(List.of(sparklineValueTextMapTexts));
        }

        /**
         * @param sparklineValueTextMapThresholds For the single stat view, a list of threshold boundaries for
         * mapping different query values to display text.  Must contain one element less than `sparkline_value_text_map_text`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueTextMapThresholds(@Nullable Output<List<Double>> sparklineValueTextMapThresholds) {
            $.sparklineValueTextMapThresholds = sparklineValueTextMapThresholds;
            return this;
        }

        /**
         * @param sparklineValueTextMapThresholds For the single stat view, a list of threshold boundaries for
         * mapping different query values to display text.  Must contain one element less than `sparkline_value_text_map_text`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueTextMapThresholds(List<Double> sparklineValueTextMapThresholds) {
            return sparklineValueTextMapThresholds(Output.of(sparklineValueTextMapThresholds));
        }

        /**
         * @param sparklineValueTextMapThresholds For the single stat view, a list of threshold boundaries for
         * mapping different query values to display text.  Must contain one element less than `sparkline_value_text_map_text`.
         * 
         * @return builder
         * 
         */
        public Builder sparklineValueTextMapThresholds(Double... sparklineValueTextMapThresholds) {
            return sparklineValueTextMapThresholds(List.of(sparklineValueTextMapThresholds));
        }

        /**
         * @param stackType Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
         * stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
         * center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
         * 
         * @return builder
         * 
         */
        public Builder stackType(@Nullable Output<String> stackType) {
            $.stackType = stackType;
            return this;
        }

        /**
         * @param stackType Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
         * stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
         * center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
         * 
         * @return builder
         * 
         */
        public Builder stackType(String stackType) {
            return stackType(Output.of(stackType));
        }

        /**
         * @param tagMode For the tabular view, which mode to use to determine which point tags to display.
         * Valid options are `all`, `top`, or `custom`.
         * 
         * @return builder
         * 
         */
        public Builder tagMode(@Nullable Output<String> tagMode) {
            $.tagMode = tagMode;
            return this;
        }

        /**
         * @param tagMode For the tabular view, which mode to use to determine which point tags to display.
         * Valid options are `all`, `top`, or `custom`.
         * 
         * @return builder
         * 
         */
        public Builder tagMode(String tagMode) {
            return tagMode(Output.of(tagMode));
        }

        /**
         * @param timeBasedColoring For x-y scatterplots, whether to color more recent points as darker than older points.
         * 
         * @return builder
         * 
         */
        public Builder timeBasedColoring(@Nullable Output<Boolean> timeBasedColoring) {
            $.timeBasedColoring = timeBasedColoring;
            return this;
        }

        /**
         * @param timeBasedColoring For x-y scatterplots, whether to color more recent points as darker than older points.
         * 
         * @return builder
         * 
         */
        public Builder timeBasedColoring(Boolean timeBasedColoring) {
            return timeBasedColoring(Output.of(timeBasedColoring));
        }

        /**
         * @param type Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to
         * the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the
         * Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
         * `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
         * `top-k`, `status-list`, and `histogram`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to
         * the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the
         * Markdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,
         * `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
         * `top-k`, `status-list`, and `histogram`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param windowSize Width, in minutes, of the time window to use for `last` windowing.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(@Nullable Output<Integer> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        /**
         * @param windowSize Width, in minutes, of the time window to use for `last` windowing.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(Integer windowSize) {
            return windowSize(Output.of(windowSize));
        }

        /**
         * @param windowing For the tabular view, whether to use the full time window for the query or the last X minutes.
         * Valid options are `full` or `last`.
         * 
         * @return builder
         * 
         */
        public Builder windowing(@Nullable Output<String> windowing) {
            $.windowing = windowing;
            return this;
        }

        /**
         * @param windowing For the tabular view, whether to use the full time window for the query or the last X minutes.
         * Valid options are `full` or `last`.
         * 
         * @return builder
         * 
         */
        public Builder windowing(String windowing) {
            return windowing(Output.of(windowing));
        }

        /**
         * @param xmax For x-y scatterplots, max value for the X-axis. Set to null for auto.
         * 
         * @return builder
         * 
         */
        public Builder xmax(@Nullable Output<Double> xmax) {
            $.xmax = xmax;
            return this;
        }

        /**
         * @param xmax For x-y scatterplots, max value for the X-axis. Set to null for auto.
         * 
         * @return builder
         * 
         */
        public Builder xmax(Double xmax) {
            return xmax(Output.of(xmax));
        }

        /**
         * @param xmin For x-y scatterplots, min value for the X-axis. Set to null for auto.
         * 
         * @return builder
         * 
         */
        public Builder xmin(@Nullable Output<Double> xmin) {
            $.xmin = xmin;
            return this;
        }

        /**
         * @param xmin For x-y scatterplots, min value for the X-axis. Set to null for auto.
         * 
         * @return builder
         * 
         */
        public Builder xmin(Double xmin) {
            return xmin(Output.of(xmin));
        }

        /**
         * @param y0ScaleSiBy1024 Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
         * 
         * @return builder
         * 
         */
        public Builder y0ScaleSiBy1024(@Nullable Output<Boolean> y0ScaleSiBy1024) {
            $.y0ScaleSiBy1024 = y0ScaleSiBy1024;
            return this;
        }

        /**
         * @param y0ScaleSiBy1024 Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
         * 
         * @return builder
         * 
         */
        public Builder y0ScaleSiBy1024(Boolean y0ScaleSiBy1024) {
            return y0ScaleSiBy1024(Output.of(y0ScaleSiBy1024));
        }

        /**
         * @param y0UnitAutoscaling Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
         * 
         * @return builder
         * 
         */
        public Builder y0UnitAutoscaling(@Nullable Output<Boolean> y0UnitAutoscaling) {
            $.y0UnitAutoscaling = y0UnitAutoscaling;
            return this;
        }

        /**
         * @param y0UnitAutoscaling Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
         * 
         * @return builder
         * 
         */
        public Builder y0UnitAutoscaling(Boolean y0UnitAutoscaling) {
            return y0UnitAutoscaling(Output.of(y0UnitAutoscaling));
        }

        /**
         * @param y1ScaleSiBy1024 Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
         * 
         * @return builder
         * 
         */
        public Builder y1ScaleSiBy1024(@Nullable Output<Boolean> y1ScaleSiBy1024) {
            $.y1ScaleSiBy1024 = y1ScaleSiBy1024;
            return this;
        }

        /**
         * @param y1ScaleSiBy1024 Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
         * 
         * @return builder
         * 
         */
        public Builder y1ScaleSiBy1024(Boolean y1ScaleSiBy1024) {
            return y1ScaleSiBy1024(Output.of(y1ScaleSiBy1024));
        }

        /**
         * @param y1UnitAutoscaling Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
         * 
         * @return builder
         * 
         */
        public Builder y1UnitAutoscaling(@Nullable Output<Boolean> y1UnitAutoscaling) {
            $.y1UnitAutoscaling = y1UnitAutoscaling;
            return this;
        }

        /**
         * @param y1UnitAutoscaling Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
         * 
         * @return builder
         * 
         */
        public Builder y1UnitAutoscaling(Boolean y1UnitAutoscaling) {
            return y1UnitAutoscaling(Output.of(y1UnitAutoscaling));
        }

        /**
         * @param y1Units For plots with multiple Y-axes, units for right side Y-axis.
         * 
         * @return builder
         * 
         */
        public Builder y1Units(@Nullable Output<String> y1Units) {
            $.y1Units = y1Units;
            return this;
        }

        /**
         * @param y1Units For plots with multiple Y-axes, units for right side Y-axis.
         * 
         * @return builder
         * 
         */
        public Builder y1Units(String y1Units) {
            return y1Units(Output.of(y1Units));
        }

        /**
         * @param y1max For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto.
         * 
         * @return builder
         * 
         */
        public Builder y1max(@Nullable Output<Double> y1max) {
            $.y1max = y1max;
            return this;
        }

        /**
         * @param y1max For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto.
         * 
         * @return builder
         * 
         */
        public Builder y1max(Double y1max) {
            return y1max(Output.of(y1max));
        }

        /**
         * @param y1min For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto.
         * 
         * @return builder
         * 
         */
        public Builder y1min(@Nullable Output<Double> y1min) {
            $.y1min = y1min;
            return this;
        }

        /**
         * @param y1min For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto.
         * 
         * @return builder
         * 
         */
        public Builder y1min(Double y1min) {
            return y1min(Output.of(y1min));
        }

        /**
         * @param ymax For x-y scatterplots, max value for the Y-axis. Set to null for auto.
         * 
         * @return builder
         * 
         */
        public Builder ymax(@Nullable Output<Double> ymax) {
            $.ymax = ymax;
            return this;
        }

        /**
         * @param ymax For x-y scatterplots, max value for the Y-axis. Set to null for auto.
         * 
         * @return builder
         * 
         */
        public Builder ymax(Double ymax) {
            return ymax(Output.of(ymax));
        }

        /**
         * @param ymin For x-y scatterplots, min value for the Y-axis. Set to null for auto.
         * 
         * @return builder
         * 
         */
        public Builder ymin(@Nullable Output<Double> ymin) {
            $.ymin = ymin;
            return this;
        }

        /**
         * @param ymin For x-y scatterplots, min value for the Y-axis. Set to null for auto.
         * 
         * @return builder
         * 
         */
        public Builder ymin(Double ymin) {
            return ymin(Output.of(ymin));
        }

        public DashboardSectionRowChartChartSettingArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
