// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.wavefront.UserArgs;
import com.pulumi.wavefront.Utilities;
import com.pulumi.wavefront.inputs.UserState;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides a Wavefront User Resource. This allows user accounts to be created, updated, and deleted.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.wavefront.User;
 * import com.pulumi.wavefront.UserArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var basic = new User("basic", UserArgs.builder()
 *             .email("test+tftesting}{@literal @}{@code example.com")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Users can be imported by using the `id`, e.g.:
 * 
 * ```sh
 * $ pulumi import wavefront:index/user:User some_user test{@literal @}example.com
 * ```
 * 
 */
@ResourceType(type="wavefront:index/user:User")
public class User extends com.pulumi.resources.CustomResource {
    /**
     * The customer the user is associated with.
     * 
     */
    @Export(name="customer", refs={String.class}, tree="[0]")
    private Output<String> customer;

    /**
     * @return The customer the user is associated with.
     * 
     */
    public Output<String> customer() {
        return this.customer;
    }
    /**
     * The unique identifier of the user account to create. Must be a valid email address.
     * 
     */
    @Export(name="email", refs={String.class}, tree="[0]")
    private Output<String> email;

    /**
     * @return The unique identifier of the user account to create. Must be a valid email address.
     * 
     */
    public Output<String> email() {
        return this.email;
    }
    /**
     * List of permission to grant to this user. Valid options are
     * `agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,
     * `host_tag_management`, `metrics_management`, and `user_management`.
     * 
     */
    @Export(name="permissions", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> permissions;

    /**
     * @return List of permission to grant to this user. Valid options are
     * `agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,
     * `host_tag_management`, `metrics_management`, and `user_management`.
     * 
     */
    public Output<List<String>> permissions() {
        return this.permissions;
    }
    /**
     * List of user groups to this user.
     * 
     */
    @Export(name="userGroups", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> userGroups;

    /**
     * @return List of user groups to this user.
     * 
     */
    public Output<List<String>> userGroups() {
        return this.userGroups;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public User(java.lang.String name) {
        this(name, UserArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public User(java.lang.String name, UserArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public User(java.lang.String name, UserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("wavefront:index/user:User", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private User(java.lang.String name, Output<java.lang.String> id, @Nullable UserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("wavefront:index/user:User", name, state, makeResourceOptions(options, id), false);
    }

    private static UserArgs makeArgs(UserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? UserArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static User get(java.lang.String name, Output<java.lang.String> id, @Nullable UserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new User(name, id, state, options);
    }
}
