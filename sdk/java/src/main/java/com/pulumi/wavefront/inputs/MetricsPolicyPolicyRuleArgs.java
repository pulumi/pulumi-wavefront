// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.wavefront.inputs.MetricsPolicyPolicyRuleTagArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricsPolicyPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricsPolicyPolicyRuleArgs Empty = new MetricsPolicyPolicyRuleArgs();

    /**
     * Valid options are `ALLOW` and `BLOCK`.
     * 
     */
    @Import(name="accessType", required=true)
    private Output<String> accessType;

    /**
     * @return Valid options are `ALLOW` and `BLOCK`.
     * 
     */
    public Output<String> accessType() {
        return this.accessType;
    }

    /**
     * List of account ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
     * 
     */
    @Import(name="accountIds")
    private @Nullable Output<List<String>> accountIds;

    /**
     * @return List of account ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
     * 
     */
    public Optional<Output<List<String>>> accountIds() {
        return Optional.ofNullable(this.accountIds);
    }

    /**
     * A detailed description of the Metrics Policy. The description is visible only when you edit the rule.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A detailed description of the Metrics Policy. The description is visible only when you edit the rule.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The unique name identifier for a Metrics Policy. The name is visible on the Metrics Security Policy page.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The unique name identifier for a Metrics Policy. The name is visible on the Metrics Security Policy page.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * List of prefixes to match metrics on. You can specify the full metric name or use a wildcard character in metric names, sources, or point tags. The wildcard character alone (*) means all metrics.
     * 
     */
    @Import(name="prefixes", required=true)
    private Output<List<String>> prefixes;

    /**
     * @return List of prefixes to match metrics on. You can specify the full metric name or use a wildcard character in metric names, sources, or point tags. The wildcard character alone (*) means all metrics.
     * 
     */
    public Output<List<String>> prefixes() {
        return this.prefixes;
    }

    /**
     * -(Optional) List of role ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
     * 
     */
    @Import(name="roleIds")
    private @Nullable Output<List<String>> roleIds;

    /**
     * @return -(Optional) List of role ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
     * 
     */
    public Optional<Output<List<String>>> roleIds() {
        return Optional.ofNullable(this.roleIds);
    }

    /**
     * List of Key/Value tags to select target metrics for policy.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<MetricsPolicyPolicyRuleTagArgs>> tags;

    /**
     * @return List of Key/Value tags to select target metrics for policy.
     * 
     */
    public Optional<Output<List<MetricsPolicyPolicyRuleTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Bool where `true` require all tags are met by selected metrics, else `false` select metrics that match any give tag.
     * 
     */
    @Import(name="tagsAnded", required=true)
    private Output<Boolean> tagsAnded;

    /**
     * @return Bool where `true` require all tags are met by selected metrics, else `false` select metrics that match any give tag.
     * 
     */
    public Output<Boolean> tagsAnded() {
        return this.tagsAnded;
    }

    /**
     * List of user group ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
     * 
     */
    @Import(name="userGroupIds")
    private @Nullable Output<List<String>> userGroupIds;

    /**
     * @return List of user group ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
     * 
     */
    public Optional<Output<List<String>>> userGroupIds() {
        return Optional.ofNullable(this.userGroupIds);
    }

    private MetricsPolicyPolicyRuleArgs() {}

    private MetricsPolicyPolicyRuleArgs(MetricsPolicyPolicyRuleArgs $) {
        this.accessType = $.accessType;
        this.accountIds = $.accountIds;
        this.description = $.description;
        this.name = $.name;
        this.prefixes = $.prefixes;
        this.roleIds = $.roleIds;
        this.tags = $.tags;
        this.tagsAnded = $.tagsAnded;
        this.userGroupIds = $.userGroupIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricsPolicyPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricsPolicyPolicyRuleArgs $;

        public Builder() {
            $ = new MetricsPolicyPolicyRuleArgs();
        }

        public Builder(MetricsPolicyPolicyRuleArgs defaults) {
            $ = new MetricsPolicyPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessType Valid options are `ALLOW` and `BLOCK`.
         * 
         * @return builder
         * 
         */
        public Builder accessType(Output<String> accessType) {
            $.accessType = accessType;
            return this;
        }

        /**
         * @param accessType Valid options are `ALLOW` and `BLOCK`.
         * 
         * @return builder
         * 
         */
        public Builder accessType(String accessType) {
            return accessType(Output.of(accessType));
        }

        /**
         * @param accountIds List of account ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(@Nullable Output<List<String>> accountIds) {
            $.accountIds = accountIds;
            return this;
        }

        /**
         * @param accountIds List of account ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(List<String> accountIds) {
            return accountIds(Output.of(accountIds));
        }

        /**
         * @param accountIds List of account ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(String... accountIds) {
            return accountIds(List.of(accountIds));
        }

        /**
         * @param description A detailed description of the Metrics Policy. The description is visible only when you edit the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A detailed description of the Metrics Policy. The description is visible only when you edit the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The unique name identifier for a Metrics Policy. The name is visible on the Metrics Security Policy page.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name identifier for a Metrics Policy. The name is visible on the Metrics Security Policy page.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param prefixes List of prefixes to match metrics on. You can specify the full metric name or use a wildcard character in metric names, sources, or point tags. The wildcard character alone (*) means all metrics.
         * 
         * @return builder
         * 
         */
        public Builder prefixes(Output<List<String>> prefixes) {
            $.prefixes = prefixes;
            return this;
        }

        /**
         * @param prefixes List of prefixes to match metrics on. You can specify the full metric name or use a wildcard character in metric names, sources, or point tags. The wildcard character alone (*) means all metrics.
         * 
         * @return builder
         * 
         */
        public Builder prefixes(List<String> prefixes) {
            return prefixes(Output.of(prefixes));
        }

        /**
         * @param prefixes List of prefixes to match metrics on. You can specify the full metric name or use a wildcard character in metric names, sources, or point tags. The wildcard character alone (*) means all metrics.
         * 
         * @return builder
         * 
         */
        public Builder prefixes(String... prefixes) {
            return prefixes(List.of(prefixes));
        }

        /**
         * @param roleIds -(Optional) List of role ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
         * 
         * @return builder
         * 
         */
        public Builder roleIds(@Nullable Output<List<String>> roleIds) {
            $.roleIds = roleIds;
            return this;
        }

        /**
         * @param roleIds -(Optional) List of role ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
         * 
         * @return builder
         * 
         */
        public Builder roleIds(List<String> roleIds) {
            return roleIds(Output.of(roleIds));
        }

        /**
         * @param roleIds -(Optional) List of role ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
         * 
         * @return builder
         * 
         */
        public Builder roleIds(String... roleIds) {
            return roleIds(List.of(roleIds));
        }

        /**
         * @param tags List of Key/Value tags to select target metrics for policy.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<MetricsPolicyPolicyRuleTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags List of Key/Value tags to select target metrics for policy.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<MetricsPolicyPolicyRuleTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags List of Key/Value tags to select target metrics for policy.
         * 
         * @return builder
         * 
         */
        public Builder tags(MetricsPolicyPolicyRuleTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tagsAnded Bool where `true` require all tags are met by selected metrics, else `false` select metrics that match any give tag.
         * 
         * @return builder
         * 
         */
        public Builder tagsAnded(Output<Boolean> tagsAnded) {
            $.tagsAnded = tagsAnded;
            return this;
        }

        /**
         * @param tagsAnded Bool where `true` require all tags are met by selected metrics, else `false` select metrics that match any give tag.
         * 
         * @return builder
         * 
         */
        public Builder tagsAnded(Boolean tagsAnded) {
            return tagsAnded(Output.of(tagsAnded));
        }

        /**
         * @param userGroupIds List of user group ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
         * 
         * @return builder
         * 
         */
        public Builder userGroupIds(@Nullable Output<List<String>> userGroupIds) {
            $.userGroupIds = userGroupIds;
            return this;
        }

        /**
         * @param userGroupIds List of user group ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
         * 
         * @return builder
         * 
         */
        public Builder userGroupIds(List<String> userGroupIds) {
            return userGroupIds(Output.of(userGroupIds));
        }

        /**
         * @param userGroupIds List of user group ids to apply Metrics Policy to. Must have at least one associated account_id, user_group_id, or role_id.
         * 
         * @return builder
         * 
         */
        public Builder userGroupIds(String... userGroupIds) {
            return userGroupIds(List.of(userGroupIds));
        }

        public MetricsPolicyPolicyRuleArgs build() {
            $.accessType = Objects.requireNonNull($.accessType, "expected parameter 'accessType' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.prefixes = Objects.requireNonNull($.prefixes, "expected parameter 'prefixes' to be non-null");
            $.tagsAnded = Objects.requireNonNull($.tagsAnded, "expected parameter 'tagsAnded' to be non-null");
            return $;
        }
    }

}
