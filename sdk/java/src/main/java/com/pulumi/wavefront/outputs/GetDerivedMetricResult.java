// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDerivedMetricResult {
    /**
     * @return User-supplied additional explanatory information about the derived metric.
     * 
     */
    private String additionalInformation;
    /**
     * @return The ID of the user who created the derived metric.
     * 
     */
    private String createUserId;
    /**
     * @return The timestamp in epoch milliseconds indicating when the derived metric is created.
     * 
     */
    private Integer createdEpochMillis;
    /**
     * @return A Boolean flag indicating whether the derived metric is deleted or not.
     * 
     */
    private Boolean deleted;
    /**
     * @return A list of hosts used in the derived metric.
     * 
     */
    private List<String> hostsUseds;
    /**
     * @return The ID of the derived metric in Wavefront.
     * 
     */
    private String id;
    /**
     * @return A Boolean variable indicating trash status.
     * 
     */
    private Boolean inTrash;
    /**
     * @return A Boolean flag indicating whether to include obsolete metrics or not.
     * 
     */
    private Boolean includeObsoleteMetrics;
    /**
     * @return Last error message occurred.
     * 
     */
    private String lastErrorMessage;
    /**
     * @return Timestamp of the last failed derived metric.
     * 
     */
    private Integer lastFailedTime;
    /**
     * @return The last processed timestamp.
     * 
     */
    private Integer lastProcessedMillis;
    /**
     * @return The timestamp indicating the last time the query was executed.
     * 
     */
    private Integer lastQueryTime;
    /**
     * @return A list of metrics used in the derived metric.
     * 
     */
    private List<String> metricsUseds;
    /**
     * @return How frequently the query generating the derived metric is run.
     * 
     */
    private Integer minutes;
    /**
     * @return The name of the derived metric in Wavefront.
     * 
     */
    private String name;
    /**
     * @return The number of points scanned when last query was executed.
     * 
     */
    private Integer pointsScannedAtLastQuery;
    /**
     * @return The specified query is executed every `process_rate_minutes` minutes.
     * 
     */
    private Integer processRateMinutes;
    /**
     * @return A Wavefront query that is evaluated at regular intervals (default is 1 minute).
     * 
     */
    private String query;
    /**
     * @return A Boolean variable indicating whether query is failing for the derived metric.
     * 
     */
    private Boolean queryFailing;
    /**
     * @return A Boolean flag for enabling `query_qb`
     * 
     */
    private Boolean queryQbEnabled;
    /**
     * @return The status of the derived metric.
     * 
     */
    private List<String> statuses;
    /**
     * @return A set of tags assigned to the derived metric.
     * 
     */
    private List<String> tags;
    /**
     * @return The ID of the user who updated the derived metric.
     * 
     */
    private String updateUserId;
    /**
     * @return The timestamp in epoch milliseconds indicating when the derived metric is updated.
     * 
     */
    private Integer updatedEpochMillis;

    private GetDerivedMetricResult() {}
    /**
     * @return User-supplied additional explanatory information about the derived metric.
     * 
     */
    public String additionalInformation() {
        return this.additionalInformation;
    }
    /**
     * @return The ID of the user who created the derived metric.
     * 
     */
    public String createUserId() {
        return this.createUserId;
    }
    /**
     * @return The timestamp in epoch milliseconds indicating when the derived metric is created.
     * 
     */
    public Integer createdEpochMillis() {
        return this.createdEpochMillis;
    }
    /**
     * @return A Boolean flag indicating whether the derived metric is deleted or not.
     * 
     */
    public Boolean deleted() {
        return this.deleted;
    }
    /**
     * @return A list of hosts used in the derived metric.
     * 
     */
    public List<String> hostsUseds() {
        return this.hostsUseds;
    }
    /**
     * @return The ID of the derived metric in Wavefront.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A Boolean variable indicating trash status.
     * 
     */
    public Boolean inTrash() {
        return this.inTrash;
    }
    /**
     * @return A Boolean flag indicating whether to include obsolete metrics or not.
     * 
     */
    public Boolean includeObsoleteMetrics() {
        return this.includeObsoleteMetrics;
    }
    /**
     * @return Last error message occurred.
     * 
     */
    public String lastErrorMessage() {
        return this.lastErrorMessage;
    }
    /**
     * @return Timestamp of the last failed derived metric.
     * 
     */
    public Integer lastFailedTime() {
        return this.lastFailedTime;
    }
    /**
     * @return The last processed timestamp.
     * 
     */
    public Integer lastProcessedMillis() {
        return this.lastProcessedMillis;
    }
    /**
     * @return The timestamp indicating the last time the query was executed.
     * 
     */
    public Integer lastQueryTime() {
        return this.lastQueryTime;
    }
    /**
     * @return A list of metrics used in the derived metric.
     * 
     */
    public List<String> metricsUseds() {
        return this.metricsUseds;
    }
    /**
     * @return How frequently the query generating the derived metric is run.
     * 
     */
    public Integer minutes() {
        return this.minutes;
    }
    /**
     * @return The name of the derived metric in Wavefront.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of points scanned when last query was executed.
     * 
     */
    public Integer pointsScannedAtLastQuery() {
        return this.pointsScannedAtLastQuery;
    }
    /**
     * @return The specified query is executed every `process_rate_minutes` minutes.
     * 
     */
    public Integer processRateMinutes() {
        return this.processRateMinutes;
    }
    /**
     * @return A Wavefront query that is evaluated at regular intervals (default is 1 minute).
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return A Boolean variable indicating whether query is failing for the derived metric.
     * 
     */
    public Boolean queryFailing() {
        return this.queryFailing;
    }
    /**
     * @return A Boolean flag for enabling `query_qb`
     * 
     */
    public Boolean queryQbEnabled() {
        return this.queryQbEnabled;
    }
    /**
     * @return The status of the derived metric.
     * 
     */
    public List<String> statuses() {
        return this.statuses;
    }
    /**
     * @return A set of tags assigned to the derived metric.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the user who updated the derived metric.
     * 
     */
    public String updateUserId() {
        return this.updateUserId;
    }
    /**
     * @return The timestamp in epoch milliseconds indicating when the derived metric is updated.
     * 
     */
    public Integer updatedEpochMillis() {
        return this.updatedEpochMillis;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDerivedMetricResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String additionalInformation;
        private String createUserId;
        private Integer createdEpochMillis;
        private Boolean deleted;
        private List<String> hostsUseds;
        private String id;
        private Boolean inTrash;
        private Boolean includeObsoleteMetrics;
        private String lastErrorMessage;
        private Integer lastFailedTime;
        private Integer lastProcessedMillis;
        private Integer lastQueryTime;
        private List<String> metricsUseds;
        private Integer minutes;
        private String name;
        private Integer pointsScannedAtLastQuery;
        private Integer processRateMinutes;
        private String query;
        private Boolean queryFailing;
        private Boolean queryQbEnabled;
        private List<String> statuses;
        private List<String> tags;
        private String updateUserId;
        private Integer updatedEpochMillis;
        public Builder() {}
        public Builder(GetDerivedMetricResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalInformation = defaults.additionalInformation;
    	      this.createUserId = defaults.createUserId;
    	      this.createdEpochMillis = defaults.createdEpochMillis;
    	      this.deleted = defaults.deleted;
    	      this.hostsUseds = defaults.hostsUseds;
    	      this.id = defaults.id;
    	      this.inTrash = defaults.inTrash;
    	      this.includeObsoleteMetrics = defaults.includeObsoleteMetrics;
    	      this.lastErrorMessage = defaults.lastErrorMessage;
    	      this.lastFailedTime = defaults.lastFailedTime;
    	      this.lastProcessedMillis = defaults.lastProcessedMillis;
    	      this.lastQueryTime = defaults.lastQueryTime;
    	      this.metricsUseds = defaults.metricsUseds;
    	      this.minutes = defaults.minutes;
    	      this.name = defaults.name;
    	      this.pointsScannedAtLastQuery = defaults.pointsScannedAtLastQuery;
    	      this.processRateMinutes = defaults.processRateMinutes;
    	      this.query = defaults.query;
    	      this.queryFailing = defaults.queryFailing;
    	      this.queryQbEnabled = defaults.queryQbEnabled;
    	      this.statuses = defaults.statuses;
    	      this.tags = defaults.tags;
    	      this.updateUserId = defaults.updateUserId;
    	      this.updatedEpochMillis = defaults.updatedEpochMillis;
        }

        @CustomType.Setter
        public Builder additionalInformation(String additionalInformation) {
            if (additionalInformation == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "additionalInformation");
            }
            this.additionalInformation = additionalInformation;
            return this;
        }
        @CustomType.Setter
        public Builder createUserId(String createUserId) {
            if (createUserId == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "createUserId");
            }
            this.createUserId = createUserId;
            return this;
        }
        @CustomType.Setter
        public Builder createdEpochMillis(Integer createdEpochMillis) {
            if (createdEpochMillis == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "createdEpochMillis");
            }
            this.createdEpochMillis = createdEpochMillis;
            return this;
        }
        @CustomType.Setter
        public Builder deleted(Boolean deleted) {
            if (deleted == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "deleted");
            }
            this.deleted = deleted;
            return this;
        }
        @CustomType.Setter
        public Builder hostsUseds(List<String> hostsUseds) {
            if (hostsUseds == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "hostsUseds");
            }
            this.hostsUseds = hostsUseds;
            return this;
        }
        public Builder hostsUseds(String... hostsUseds) {
            return hostsUseds(List.of(hostsUseds));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inTrash(Boolean inTrash) {
            if (inTrash == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "inTrash");
            }
            this.inTrash = inTrash;
            return this;
        }
        @CustomType.Setter
        public Builder includeObsoleteMetrics(Boolean includeObsoleteMetrics) {
            if (includeObsoleteMetrics == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "includeObsoleteMetrics");
            }
            this.includeObsoleteMetrics = includeObsoleteMetrics;
            return this;
        }
        @CustomType.Setter
        public Builder lastErrorMessage(String lastErrorMessage) {
            if (lastErrorMessage == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "lastErrorMessage");
            }
            this.lastErrorMessage = lastErrorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder lastFailedTime(Integer lastFailedTime) {
            if (lastFailedTime == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "lastFailedTime");
            }
            this.lastFailedTime = lastFailedTime;
            return this;
        }
        @CustomType.Setter
        public Builder lastProcessedMillis(Integer lastProcessedMillis) {
            if (lastProcessedMillis == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "lastProcessedMillis");
            }
            this.lastProcessedMillis = lastProcessedMillis;
            return this;
        }
        @CustomType.Setter
        public Builder lastQueryTime(Integer lastQueryTime) {
            if (lastQueryTime == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "lastQueryTime");
            }
            this.lastQueryTime = lastQueryTime;
            return this;
        }
        @CustomType.Setter
        public Builder metricsUseds(List<String> metricsUseds) {
            if (metricsUseds == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "metricsUseds");
            }
            this.metricsUseds = metricsUseds;
            return this;
        }
        public Builder metricsUseds(String... metricsUseds) {
            return metricsUseds(List.of(metricsUseds));
        }
        @CustomType.Setter
        public Builder minutes(Integer minutes) {
            if (minutes == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "minutes");
            }
            this.minutes = minutes;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pointsScannedAtLastQuery(Integer pointsScannedAtLastQuery) {
            if (pointsScannedAtLastQuery == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "pointsScannedAtLastQuery");
            }
            this.pointsScannedAtLastQuery = pointsScannedAtLastQuery;
            return this;
        }
        @CustomType.Setter
        public Builder processRateMinutes(Integer processRateMinutes) {
            if (processRateMinutes == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "processRateMinutes");
            }
            this.processRateMinutes = processRateMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder queryFailing(Boolean queryFailing) {
            if (queryFailing == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "queryFailing");
            }
            this.queryFailing = queryFailing;
            return this;
        }
        @CustomType.Setter
        public Builder queryQbEnabled(Boolean queryQbEnabled) {
            if (queryQbEnabled == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "queryQbEnabled");
            }
            this.queryQbEnabled = queryQbEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder statuses(List<String> statuses) {
            if (statuses == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "statuses");
            }
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updateUserId(String updateUserId) {
            if (updateUserId == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "updateUserId");
            }
            this.updateUserId = updateUserId;
            return this;
        }
        @CustomType.Setter
        public Builder updatedEpochMillis(Integer updatedEpochMillis) {
            if (updatedEpochMillis == null) {
              throw new MissingRequiredPropertyException("GetDerivedMetricResult", "updatedEpochMillis");
            }
            this.updatedEpochMillis = updatedEpochMillis;
            return this;
        }
        public GetDerivedMetricResult build() {
            final var _resultValue = new GetDerivedMetricResult();
            _resultValue.additionalInformation = additionalInformation;
            _resultValue.createUserId = createUserId;
            _resultValue.createdEpochMillis = createdEpochMillis;
            _resultValue.deleted = deleted;
            _resultValue.hostsUseds = hostsUseds;
            _resultValue.id = id;
            _resultValue.inTrash = inTrash;
            _resultValue.includeObsoleteMetrics = includeObsoleteMetrics;
            _resultValue.lastErrorMessage = lastErrorMessage;
            _resultValue.lastFailedTime = lastFailedTime;
            _resultValue.lastProcessedMillis = lastProcessedMillis;
            _resultValue.lastQueryTime = lastQueryTime;
            _resultValue.metricsUseds = metricsUseds;
            _resultValue.minutes = minutes;
            _resultValue.name = name;
            _resultValue.pointsScannedAtLastQuery = pointsScannedAtLastQuery;
            _resultValue.processRateMinutes = processRateMinutes;
            _resultValue.query = query;
            _resultValue.queryFailing = queryFailing;
            _resultValue.queryQbEnabled = queryQbEnabled;
            _resultValue.statuses = statuses;
            _resultValue.tags = tags;
            _resultValue.updateUserId = updateUserId;
            _resultValue.updatedEpochMillis = updatedEpochMillis;
            return _resultValue;
        }
    }
}
