// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * The customer the user is associated with.
     * 
     */
    @Import(name="customer")
    private @Nullable Output<String> customer;

    /**
     * @return The customer the user is associated with.
     * 
     */
    public Optional<Output<String>> customer() {
        return Optional.ofNullable(this.customer);
    }

    /**
     * The unique identifier of the user account to create. Must be a valid email address.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return The unique identifier of the user account to create. Must be a valid email address.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * List of permission to grant to this user. Valid options are
     * `agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,
     * `host_tag_management`, `metrics_management`, and `user_management`.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<String>> permissions;

    /**
     * @return List of permission to grant to this user. Valid options are
     * `agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,
     * `host_tag_management`, `metrics_management`, and `user_management`.
     * 
     */
    public Optional<Output<List<String>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * List of user groups to this user.
     * 
     */
    @Import(name="userGroups")
    private @Nullable Output<List<String>> userGroups;

    /**
     * @return List of user groups to this user.
     * 
     */
    public Optional<Output<List<String>>> userGroups() {
        return Optional.ofNullable(this.userGroups);
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.customer = $.customer;
        this.email = $.email;
        this.permissions = $.permissions;
        this.userGroups = $.userGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customer The customer the user is associated with.
         * 
         * @return builder
         * 
         */
        public Builder customer(@Nullable Output<String> customer) {
            $.customer = customer;
            return this;
        }

        /**
         * @param customer The customer the user is associated with.
         * 
         * @return builder
         * 
         */
        public Builder customer(String customer) {
            return customer(Output.of(customer));
        }

        /**
         * @param email The unique identifier of the user account to create. Must be a valid email address.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The unique identifier of the user account to create. Must be a valid email address.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param permissions List of permission to grant to this user. Valid options are
         * `agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,
         * `host_tag_management`, `metrics_management`, and `user_management`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions List of permission to grant to this user. Valid options are
         * `agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,
         * `host_tag_management`, `metrics_management`, and `user_management`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions List of permission to grant to this user. Valid options are
         * `agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,
         * `host_tag_management`, `metrics_management`, and `user_management`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param userGroups List of user groups to this user.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(@Nullable Output<List<String>> userGroups) {
            $.userGroups = userGroups;
            return this;
        }

        /**
         * @param userGroups List of user groups to this user.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(List<String> userGroups) {
            return userGroups(Output.of(userGroups));
        }

        /**
         * @param userGroups List of user groups to this user.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(String... userGroups) {
            return userGroups(List.of(userGroups));
        }

        public UserArgs build() {
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            return $;
        }
    }

}
