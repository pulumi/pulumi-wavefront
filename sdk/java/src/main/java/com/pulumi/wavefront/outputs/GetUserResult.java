// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    private String customer;
    private String email;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return When the user last logged in to Wavefront.
     * 
     */
    private Integer lastSuccessfulLogin;
    /**
     * @return List of permissions granted to a user.
     * 
     */
    private List<String> permissions;
    /**
     * @return List of User Group Ids the user is a member of.
     * * `customer`- The customer the user is associated with.
     * 
     */
    private List<String> userGroupIds;

    private GetUserResult() {}
    public String customer() {
        return this.customer;
    }
    public String email() {
        return this.email;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return When the user last logged in to Wavefront.
     * 
     */
    public Integer lastSuccessfulLogin() {
        return this.lastSuccessfulLogin;
    }
    /**
     * @return List of permissions granted to a user.
     * 
     */
    public List<String> permissions() {
        return this.permissions;
    }
    /**
     * @return List of User Group Ids the user is a member of.
     * * `customer`- The customer the user is associated with.
     * 
     */
    public List<String> userGroupIds() {
        return this.userGroupIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String customer;
        private String email;
        private String id;
        private Integer lastSuccessfulLogin;
        private List<String> permissions;
        private List<String> userGroupIds;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customer = defaults.customer;
    	      this.email = defaults.email;
    	      this.id = defaults.id;
    	      this.lastSuccessfulLogin = defaults.lastSuccessfulLogin;
    	      this.permissions = defaults.permissions;
    	      this.userGroupIds = defaults.userGroupIds;
        }

        @CustomType.Setter
        public Builder customer(String customer) {
            this.customer = Objects.requireNonNull(customer);
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lastSuccessfulLogin(Integer lastSuccessfulLogin) {
            this.lastSuccessfulLogin = Objects.requireNonNull(lastSuccessfulLogin);
            return this;
        }
        @CustomType.Setter
        public Builder permissions(List<String> permissions) {
            this.permissions = Objects.requireNonNull(permissions);
            return this;
        }
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder userGroupIds(List<String> userGroupIds) {
            this.userGroupIds = Objects.requireNonNull(userGroupIds);
            return this;
        }
        public Builder userGroupIds(String... userGroupIds) {
            return userGroupIds(List.of(userGroupIds));
        }
        public GetUserResult build() {
            final var o = new GetUserResult();
            o.customer = customer;
            o.email = email;
            o.id = id;
            o.lastSuccessfulLogin = lastSuccessfulLogin;
            o.permissions = permissions;
            o.userGroupIds = userGroupIds;
            return o;
        }
    }
}
