// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.wavefront.DashboardJsonArgs;
import com.pulumi.wavefront.Utilities;
import com.pulumi.wavefront.inputs.DashboardJsonState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a Wavefront Dashboard JSON resource. This allows dashboards to be created, updated, and deleted.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.wavefront.DashboardJson;
 * import com.pulumi.wavefront.DashboardJsonArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testDashboardJson = new DashboardJson("testDashboardJson", DashboardJsonArgs.builder()
 *             .dashboardJson("""
 * {
 *   "acl": {
 *     "canModify": [
 *       "group-uuid",
 *       "role-uuid"
 *     ],
 *     "canView": [
 *       "group-uuid",
 *       "role-uuid"
 *     ]
 *   },
 *   "name": "Terraform Test Dashboard Json",
 *   "description": "a",
 *   "eventFilterType": "BYCHART",
 *   "eventQuery": "",
 *   "defaultTimeWindow": "",
 *   "url": "tftestimport",
 *   "displayDescription": false,
 *   "displaySectionTableOfContents": true,
 *   "displayQueryParameters": false,
 *   "sections": [
 *     {
 *       "name": "section 1",
 *       "rows": [
 *         {
 *           "charts": [
 *             {
 *               "name": "chart 1",
 *               "sources": [
 *                 {
 *                   "name": "source 1",
 *                   "query": "ts()",
 *                   "scatterPlotSource": "Y",
 *                   "querybuilderEnabled": false,
 *                   "sourceDescription": ""
 *                 }
 *               ],
 *               "units": "someunit",
 *               "base": 0,
 *               "noDefaultEvents": false,
 *               "interpolatePoints": false,
 *               "includeObsoleteMetrics": false,
 *               "description": "This is chart 1, showing something",
 *               "chartSettings": {
 *                 "type": "markdown-widget",
 *                 "max": 100,
 *                 "expectedDataSpacing": 120,
 *                 "windowing": "full",
 *                 "windowSize": 10,
 *                 "autoColumnTags": false,
 *                 "columnTags": "deprecated",
 *                 "tagMode": "all",
 *                 "numTags": 2,
 *                 "customTags": [
 *                   "tag1",
 *                   "tag2"
 *                 ],
 *                 "groupBySource": true,
 *                 "y1Max": 100,
 *                 "y1Units": "units",
 *                 "y0ScaleSIBy1024": true,
 *                 "y1ScaleSIBy1024": true,
 *                 "y0UnitAutoscaling": true,
 *                 "y1UnitAutoscaling": true,
 *                 "fixedLegendEnabled": true,
 *                 "fixedLegendUseRawStats": true,
 *                 "fixedLegendPosition": "RIGHT",
 *                 "fixedLegendDisplayStats": [
 *                   "stat1",
 *                   "stat2"
 *                 ],
 *                 "fixedLegendFilterSort": "TOP",
 *                 "fixedLegendFilterLimit": 1,
 *                 "fixedLegendFilterField": "CURRENT",
 *                 "plainMarkdownContent": "markdown content"
 *               },
 *               "chartAttributes": {
 *                 "dashboardLinks": {
 *                   "*": {
 *                     "variables": {
 *                       "xxx": "xxx"
 *                     },
 *                     "destination": "/dashboards/xxxx"
 *                   }
 *                 }
 *               },
 *               "summarization": "MEAN"
 *             }
 *           ],
 *           "heightFactor": 50
 *         }
 *       ]
 *     }
 *   ],
 *   "parameterDetails": {
 *     "param": {
 *       "hideFromView": false,
 *       "description": null,
 *       "allowAll": null,
 *       "tagKey": null,
 *       "queryValue": null,
 *       "dynamicFieldType": null,
 *       "reverseDynSort": null,
 *       "parameterType": "SIMPLE",
 *       "label": "test",
 *       "defaultValue": "Label",
 *       "valuesToReadableStrings": {
 *         "Label": "test"
 *       },
 *       "selectedLabel": "Label",
 *       "value": "test"
 *     }
 *   },
 *   "tags": {
 *     "customerTags": [
 *       "terraform"
 *     ]
 *   }
 * }
 *             """)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * * 
 * *Note:
 * ** If there are dynamic variables in the Wavefront dashboard json, then these variables must be present in a separate file as mentioned in the section below.
 * 
 * ## Import
 * 
 * Dashboard JSON can be imported by using the `id`, e.g.:
 * 
 * ```sh
 * $ pulumi import wavefront:index/dashboardJson:DashboardJson dashboard_json tftestimport
 * ```
 * 
 */
@ResourceType(type="wavefront:index/dashboardJson:DashboardJson")
public class DashboardJson extends com.pulumi.resources.CustomResource {
    /**
     * See the [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
     * for instructions on how to get to your API documentation for more details.
     * 
     */
    @Export(name="dashboardJson", refs={String.class}, tree="[0]")
    private Output<String> dashboardJson;

    /**
     * @return See the [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance)
     * for instructions on how to get to your API documentation for more details.
     * 
     */
    public Output<String> dashboardJson() {
        return this.dashboardJson;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DashboardJson(java.lang.String name) {
        this(name, DashboardJsonArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DashboardJson(java.lang.String name, DashboardJsonArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DashboardJson(java.lang.String name, DashboardJsonArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("wavefront:index/dashboardJson:DashboardJson", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DashboardJson(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardJsonState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("wavefront:index/dashboardJson:DashboardJson", name, state, makeResourceOptions(options, id), false);
    }

    private static DashboardJsonArgs makeArgs(DashboardJsonArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DashboardJsonArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DashboardJson get(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardJsonState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DashboardJson(name, id, state, options);
    }
}
