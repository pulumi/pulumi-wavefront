// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.wavefront.inputs.MetricsPolicyPolicyRuleArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricsPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final MetricsPolicyState Empty = new MetricsPolicyState();

    /**
     * The customer the user is associated with.
     * 
     */
    @Import(name="customer")
    private @Nullable Output<String> customer;

    /**
     * @return The customer the user is associated with.
     * 
     */
    public Optional<Output<String>> customer() {
        return Optional.ofNullable(this.customer);
    }

    /**
     * List of Metrics Policies, must have at least one entry.
     * 
     */
    @Import(name="policyRules")
    private @Nullable Output<List<MetricsPolicyPolicyRuleArgs>> policyRules;

    /**
     * @return List of Metrics Policies, must have at least one entry.
     * 
     */
    public Optional<Output<List<MetricsPolicyPolicyRuleArgs>>> policyRules() {
        return Optional.ofNullable(this.policyRules);
    }

    /**
     * When the policy was applied in epoch_millis.
     * 
     */
    @Import(name="updatedEpochMillis")
    private @Nullable Output<Integer> updatedEpochMillis;

    /**
     * @return When the policy was applied in epoch_millis.
     * 
     */
    public Optional<Output<Integer>> updatedEpochMillis() {
        return Optional.ofNullable(this.updatedEpochMillis);
    }

    /**
     * The account_id who applied the current policy.
     * 
     */
    @Import(name="updaterId")
    private @Nullable Output<String> updaterId;

    /**
     * @return The account_id who applied the current policy.
     * 
     */
    public Optional<Output<String>> updaterId() {
        return Optional.ofNullable(this.updaterId);
    }

    private MetricsPolicyState() {}

    private MetricsPolicyState(MetricsPolicyState $) {
        this.customer = $.customer;
        this.policyRules = $.policyRules;
        this.updatedEpochMillis = $.updatedEpochMillis;
        this.updaterId = $.updaterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricsPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricsPolicyState $;

        public Builder() {
            $ = new MetricsPolicyState();
        }

        public Builder(MetricsPolicyState defaults) {
            $ = new MetricsPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customer The customer the user is associated with.
         * 
         * @return builder
         * 
         */
        public Builder customer(@Nullable Output<String> customer) {
            $.customer = customer;
            return this;
        }

        /**
         * @param customer The customer the user is associated with.
         * 
         * @return builder
         * 
         */
        public Builder customer(String customer) {
            return customer(Output.of(customer));
        }

        /**
         * @param policyRules List of Metrics Policies, must have at least one entry.
         * 
         * @return builder
         * 
         */
        public Builder policyRules(@Nullable Output<List<MetricsPolicyPolicyRuleArgs>> policyRules) {
            $.policyRules = policyRules;
            return this;
        }

        /**
         * @param policyRules List of Metrics Policies, must have at least one entry.
         * 
         * @return builder
         * 
         */
        public Builder policyRules(List<MetricsPolicyPolicyRuleArgs> policyRules) {
            return policyRules(Output.of(policyRules));
        }

        /**
         * @param policyRules List of Metrics Policies, must have at least one entry.
         * 
         * @return builder
         * 
         */
        public Builder policyRules(MetricsPolicyPolicyRuleArgs... policyRules) {
            return policyRules(List.of(policyRules));
        }

        /**
         * @param updatedEpochMillis When the policy was applied in epoch_millis.
         * 
         * @return builder
         * 
         */
        public Builder updatedEpochMillis(@Nullable Output<Integer> updatedEpochMillis) {
            $.updatedEpochMillis = updatedEpochMillis;
            return this;
        }

        /**
         * @param updatedEpochMillis When the policy was applied in epoch_millis.
         * 
         * @return builder
         * 
         */
        public Builder updatedEpochMillis(Integer updatedEpochMillis) {
            return updatedEpochMillis(Output.of(updatedEpochMillis));
        }

        /**
         * @param updaterId The account_id who applied the current policy.
         * 
         * @return builder
         * 
         */
        public Builder updaterId(@Nullable Output<String> updaterId) {
            $.updaterId = updaterId;
            return this;
        }

        /**
         * @param updaterId The account_id who applied the current policy.
         * 
         * @return builder
         * 
         */
        public Builder updaterId(String updaterId) {
            return updaterId(Output.of(updaterId));
        }

        public MetricsPolicyState build() {
            return $;
        }
    }

}
