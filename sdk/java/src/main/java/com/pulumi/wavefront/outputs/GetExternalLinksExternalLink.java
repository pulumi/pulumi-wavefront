// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExternalLinksExternalLink {
    /**
     * @return The timestamp in epoch milliseconds indicating when the external link is created.
     * 
     */
    private Integer createdEpochMillis;
    /**
     * @return The ID of the user who created the external link.
     * 
     */
    private String creatorId;
    /**
     * @return Human-readable description of the link.
     * 
     */
    private String description;
    /**
     * @return The ID of the external link.
     * 
     */
    private String id;
    /**
     * @return Whether this is a &#34;Log Integration&#34; subType of external link.
     * 
     */
    private Boolean isLogIntegration;
    /**
     * @return Controls whether a link is displayed in the context menu of a highlighted series. If present, the metric name of the highlighted series must match this regular expression in order for the link to be displayed.
     * 
     */
    private String metricFilterRegex;
    /**
     * @return The name of the external link.
     * 
     */
    private String name;
    /**
     * @return (Optional) Controls whether a link is displayed in the context menu of a highlighted
     * series. This is a map from string to regular expression. The highlighted series must contain point tags whose
     * keys are present in the keys of this map and whose values match the regular expressions associated with those
     * keys in order for the link to be displayed.
     * 
     */
    private Map<String,String> pointTagFilterRegexes;
    /**
     * @return Controls whether a link is displayed in the context menu of a highlighted series. If present, the source name of the highlighted series must match this regular expression in order for the link to be displayed.
     * 
     */
    private String sourceFilterRegex;
    /**
     * @return The mustache template for the link. The template must expand to a full URL, including scheme, origin, etc.
     * 
     */
    private String template;
    /**
     * @return The timestamp in epoch milliseconds indicating when the external link is updated.
     * 
     */
    private Integer updatedEpochMillis;
    /**
     * @return The ID of the user who updated the external link.
     * 
     */
    private String updaterId;

    private GetExternalLinksExternalLink() {}
    /**
     * @return The timestamp in epoch milliseconds indicating when the external link is created.
     * 
     */
    public Integer createdEpochMillis() {
        return this.createdEpochMillis;
    }
    /**
     * @return The ID of the user who created the external link.
     * 
     */
    public String creatorId() {
        return this.creatorId;
    }
    /**
     * @return Human-readable description of the link.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the external link.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether this is a &#34;Log Integration&#34; subType of external link.
     * 
     */
    public Boolean isLogIntegration() {
        return this.isLogIntegration;
    }
    /**
     * @return Controls whether a link is displayed in the context menu of a highlighted series. If present, the metric name of the highlighted series must match this regular expression in order for the link to be displayed.
     * 
     */
    public String metricFilterRegex() {
        return this.metricFilterRegex;
    }
    /**
     * @return The name of the external link.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Optional) Controls whether a link is displayed in the context menu of a highlighted
     * series. This is a map from string to regular expression. The highlighted series must contain point tags whose
     * keys are present in the keys of this map and whose values match the regular expressions associated with those
     * keys in order for the link to be displayed.
     * 
     */
    public Map<String,String> pointTagFilterRegexes() {
        return this.pointTagFilterRegexes;
    }
    /**
     * @return Controls whether a link is displayed in the context menu of a highlighted series. If present, the source name of the highlighted series must match this regular expression in order for the link to be displayed.
     * 
     */
    public String sourceFilterRegex() {
        return this.sourceFilterRegex;
    }
    /**
     * @return The mustache template for the link. The template must expand to a full URL, including scheme, origin, etc.
     * 
     */
    public String template() {
        return this.template;
    }
    /**
     * @return The timestamp in epoch milliseconds indicating when the external link is updated.
     * 
     */
    public Integer updatedEpochMillis() {
        return this.updatedEpochMillis;
    }
    /**
     * @return The ID of the user who updated the external link.
     * 
     */
    public String updaterId() {
        return this.updaterId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalLinksExternalLink defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer createdEpochMillis;
        private String creatorId;
        private String description;
        private String id;
        private Boolean isLogIntegration;
        private String metricFilterRegex;
        private String name;
        private Map<String,String> pointTagFilterRegexes;
        private String sourceFilterRegex;
        private String template;
        private Integer updatedEpochMillis;
        private String updaterId;
        public Builder() {}
        public Builder(GetExternalLinksExternalLink defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdEpochMillis = defaults.createdEpochMillis;
    	      this.creatorId = defaults.creatorId;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.isLogIntegration = defaults.isLogIntegration;
    	      this.metricFilterRegex = defaults.metricFilterRegex;
    	      this.name = defaults.name;
    	      this.pointTagFilterRegexes = defaults.pointTagFilterRegexes;
    	      this.sourceFilterRegex = defaults.sourceFilterRegex;
    	      this.template = defaults.template;
    	      this.updatedEpochMillis = defaults.updatedEpochMillis;
    	      this.updaterId = defaults.updaterId;
        }

        @CustomType.Setter
        public Builder createdEpochMillis(Integer createdEpochMillis) {
            this.createdEpochMillis = Objects.requireNonNull(createdEpochMillis);
            return this;
        }
        @CustomType.Setter
        public Builder creatorId(String creatorId) {
            this.creatorId = Objects.requireNonNull(creatorId);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isLogIntegration(Boolean isLogIntegration) {
            this.isLogIntegration = Objects.requireNonNull(isLogIntegration);
            return this;
        }
        @CustomType.Setter
        public Builder metricFilterRegex(String metricFilterRegex) {
            this.metricFilterRegex = Objects.requireNonNull(metricFilterRegex);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder pointTagFilterRegexes(Map<String,String> pointTagFilterRegexes) {
            this.pointTagFilterRegexes = Objects.requireNonNull(pointTagFilterRegexes);
            return this;
        }
        @CustomType.Setter
        public Builder sourceFilterRegex(String sourceFilterRegex) {
            this.sourceFilterRegex = Objects.requireNonNull(sourceFilterRegex);
            return this;
        }
        @CustomType.Setter
        public Builder template(String template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }
        @CustomType.Setter
        public Builder updatedEpochMillis(Integer updatedEpochMillis) {
            this.updatedEpochMillis = Objects.requireNonNull(updatedEpochMillis);
            return this;
        }
        @CustomType.Setter
        public Builder updaterId(String updaterId) {
            this.updaterId = Objects.requireNonNull(updaterId);
            return this;
        }
        public GetExternalLinksExternalLink build() {
            final var o = new GetExternalLinksExternalLink();
            o.createdEpochMillis = createdEpochMillis;
            o.creatorId = creatorId;
            o.description = description;
            o.id = id;
            o.isLogIntegration = isLogIntegration;
            o.metricFilterRegex = metricFilterRegex;
            o.name = name;
            o.pointTagFilterRegexes = pointTagFilterRegexes;
            o.sourceFilterRegex = sourceFilterRegex;
            o.template = template;
            o.updatedEpochMillis = updatedEpochMillis;
            o.updaterId = updaterId;
            return o;
        }
    }
}
