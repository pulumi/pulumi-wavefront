// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardSectionRowChartChartSetting {
    /**
     * @return This setting is deprecated.
     * 
     */
    private @Nullable Boolean autoColumnTags;
    /**
     * @return This setting is deprecated.
     * 
     */
    private @Nullable String columnTags;
    /**
     * @return For the tabular view, a list of point tags to display when using the `custom` tag display mode.
     * 
     */
    private @Nullable List<String> customTags;
    /**
     * @return Threshold (in seconds) for time delta between consecutive points in a series
     * above which a dotted line will replace a solid in in line plots. Default is 60.
     * 
     */
    private @Nullable Integer expectedDataSpacing;
    /**
     * @return For a chart with a fixed legend, a list of statistics to display in the legend.
     * 
     */
    private @Nullable List<String> fixedLegendDisplayStats;
    /**
     * @return Whether to enable a fixed tabular legend adjacent to the chart.
     * 
     */
    private @Nullable Boolean fixedLegendEnabled;
    /**
     * @return Statistic to use for determining whether a series is displayed on the fixed legend.
     * Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
     * 
     */
    private @Nullable String fixedLegendFilterField;
    /**
     * @return Number of series to include in the fixed legend.
     * 
     */
    private @Nullable Integer fixedLegendFilterLimit;
    /**
     * @return Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
     * are `TOP`, and `BOTTOM`.
     * 
     */
    private @Nullable String fixedLegendFilterSort;
    /**
     * @return This setting is deprecated.
     * 
     */
    private @Nullable Boolean fixedLegendHideLabel;
    /**
     * @return Where the fixed legend should be displayed with respect to the chart.
     * Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
     * 
     */
    private @Nullable String fixedLegendPosition;
    /**
     * @return If `true`, the legend uses non-summarized stats instead of summarized.
     * 
     */
    private @Nullable Boolean fixedLegendUseRawStats;
    /**
     * @return For the tabular view, whether to group multi metrics into a single row by a common source.
     * If `false`, each source is displayed in its own row. if `true`, multiple metrics for the same host are displayed as different
     * columns in the same row.
     * 
     */
    private @Nullable Boolean groupBySource;
    /**
     * @return Whether to disable the display of the floating legend (but
     * reenable it when the ctrl-key is pressed).
     * 
     */
    private @Nullable Boolean invertDynamicLegendHoverControl;
    /**
     * @return Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`,
     * `step-after`, `basis`, `cardinal`, and `monotone`.
     * 
     */
    private @Nullable String lineType;
    /**
     * @return Max value of the Y-axis. Set to null or leave blank for auto.
     * 
     */
    private @Nullable Double max;
    /**
     * @return Min value of the Y-axis. Set to null or leave blank for auto.
     * 
     */
    private @Nullable Double min;
    /**
     * @return For the tabular view defines how many point tags to display.
     * 
     */
    private @Nullable Integer numTags;
    /**
     * @return The markdown content for a Markdown display, in plain text.
     * 
     */
    private @Nullable String plainMarkdownContent;
    /**
     * @return For the tabular view, whether to display sources. Default is `true`.
     * 
     */
    private @Nullable Boolean showHosts;
    /**
     * @return For the tabular view, whether to display labels. Default is `true`.
     * 
     */
    private @Nullable Boolean showLabels;
    /**
     * @return For the tabular view, whether to display raw values. Default is `false`.
     * 
     */
    private @Nullable Boolean showRawValues;
    /**
     * @return For the tabular view, whether to display values in descending order. Default is `false`.
     * 
     */
    private @Nullable Boolean sortValuesDescending;
    /**
     * @return For the single stat view, the decimal precision of the displayed number.
     * 
     */
    private @Nullable Integer sparklineDecimalPrecision;
    /**
     * @return For the single stat view, the color of the displayed text (when not dynamically determined).
     * Values should be in `rgba(,,,,)` format.
     * 
     */
    private @Nullable String sparklineDisplayColor;
    /**
     * @return For the single stat view, the font size of the displayed text, in percent.
     * 
     */
    private @Nullable String sparklineDisplayFontSize;
    /**
     * @return For the single stat view, the horizontal position of the displayed text.
     * Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
     * 
     */
    private @Nullable String sparklineDisplayHorizontalPosition;
    /**
     * @return For the single stat view, a string to append to the displayed text.
     * 
     */
    private @Nullable String sparklineDisplayPostfix;
    /**
     * @return For the single stat view, a string to add before the displayed text.
     * 
     */
    private @Nullable String sparklineDisplayPrefix;
    /**
     * @return For the single stat view, where to display the name of the query or the value of the query.
     * Valid options are `VALUE` or `LABEL`.
     * 
     */
    private @Nullable String sparklineDisplayValueType;
    /**
     * @return This setting is deprecated.
     * 
     */
    private @Nullable String sparklineDisplayVerticalPosition;
    /**
     * @return For the single stat view, the color of the background fill. Values should be
     * in `rgba(,,,,)`.
     * 
     */
    private @Nullable String sparklineFillColor;
    /**
     * @return For the single stat view, the color of the line. Values should be in `rgba(,,,,)` format.
     * 
     */
    private @Nullable String sparklineLineColor;
    /**
     * @return For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart.
     * Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
     * 
     */
    private @Nullable String sparklineSize;
    /**
     * @return For the single stat view, whether to apply dynamic color settings to
     * the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
     * 
     */
    private @Nullable String sparklineValueColorMapApplyTo;
    /**
     * @return For the single stat view, A list of colors that differing query values map to.
     * Must contain one more element than `sparkline_value_color_map_values_v2`. Values should be in `rgba(,,,,)`.
     * 
     */
    private @Nullable List<String> sparklineValueColorMapColors;
    /**
     * @return This setting is deprecated.
     * 
     */
    private @Nullable List<Integer> sparklineValueColorMapValues;
    /**
     * @return For the single stat view, a list of boundaries for mapping different
     * query values to colors. Must contain one element less than `sparkline_value_color_map_colors`.
     * 
     */
    private @Nullable List<Double> sparklineValueColorMapValuesV2s;
    /**
     * @return For the single stat view, a list of display text values that different query
     * values map to. Must contain one more element than `sparkline_value_text_map_thresholds`.
     * 
     */
    private @Nullable List<String> sparklineValueTextMapTexts;
    /**
     * @return For the single stat view, a list of threshold boundaries for
     * mapping different query values to display text. Must contain one element less than `sparkline_value_text_map_text`.
     * 
     */
    private @Nullable List<Double> sparklineValueTextMapThresholds;
    /**
     * @return Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
     * stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
     * center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
     * 
     */
    private @Nullable String stackType;
    /**
     * @return For the tabular view, which mode to use to determine which point tags to display.
     * Valid options are `all`, `top`, or `custom`.
     * 
     */
    private @Nullable String tagMode;
    /**
     * @return For x-y scatterplots, whether to color more recent points as darker than older points.
     * 
     */
    private @Nullable Boolean timeBasedColoring;
    /**
     * @return Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to
     * the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the
     * Markdown display, and `sparkline` to the Single Stat view. Valid options are`line`, `scatterplot`,
     * `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
     * `top-k`, `status-list`, and `histogram`.
     * 
     */
    private String type;
    /**
     * @return Width, in minutes, of the time window to use for `last` windowing.
     * 
     */
    private @Nullable Integer windowSize;
    /**
     * @return For the tabular view, whether to use the full time window for the query or the last X minutes.
     * Valid options are `full` or `last`.
     * 
     */
    private @Nullable String windowing;
    /**
     * @return For x-y scatterplots, max value for the X-axis. Set to null for auto.
     * 
     */
    private @Nullable Double xmax;
    /**
     * @return For x-y scatterplots, min value for the X-axis. Set to null for auto.
     * 
     */
    private @Nullable Double xmin;
    /**
     * @return Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     * 
     */
    private @Nullable Boolean y0ScaleSiBy1024;
    /**
     * @return Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
     * 
     */
    private @Nullable Boolean y0UnitAutoscaling;
    /**
     * @return Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     * 
     */
    private @Nullable Boolean y1ScaleSiBy1024;
    /**
     * @return Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
     * 
     */
    private @Nullable Boolean y1UnitAutoscaling;
    /**
     * @return For plots with multiple Y-axes, units for right side Y-axis.
     * 
     */
    private @Nullable String y1Units;
    /**
     * @return For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto.
     * 
     */
    private @Nullable Double y1max;
    /**
     * @return For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto.
     * 
     */
    private @Nullable Double y1min;
    /**
     * @return For x-y scatterplots, max value for the Y-axis. Set to null for auto.
     * 
     */
    private @Nullable Double ymax;
    /**
     * @return For x-y scatterplots, min value for the Y-axis. Set to null for auto.
     * 
     */
    private @Nullable Double ymin;

    private DashboardSectionRowChartChartSetting() {}
    /**
     * @return This setting is deprecated.
     * 
     */
    public Optional<Boolean> autoColumnTags() {
        return Optional.ofNullable(this.autoColumnTags);
    }
    /**
     * @return This setting is deprecated.
     * 
     */
    public Optional<String> columnTags() {
        return Optional.ofNullable(this.columnTags);
    }
    /**
     * @return For the tabular view, a list of point tags to display when using the `custom` tag display mode.
     * 
     */
    public List<String> customTags() {
        return this.customTags == null ? List.of() : this.customTags;
    }
    /**
     * @return Threshold (in seconds) for time delta between consecutive points in a series
     * above which a dotted line will replace a solid in in line plots. Default is 60.
     * 
     */
    public Optional<Integer> expectedDataSpacing() {
        return Optional.ofNullable(this.expectedDataSpacing);
    }
    /**
     * @return For a chart with a fixed legend, a list of statistics to display in the legend.
     * 
     */
    public List<String> fixedLegendDisplayStats() {
        return this.fixedLegendDisplayStats == null ? List.of() : this.fixedLegendDisplayStats;
    }
    /**
     * @return Whether to enable a fixed tabular legend adjacent to the chart.
     * 
     */
    public Optional<Boolean> fixedLegendEnabled() {
        return Optional.ofNullable(this.fixedLegendEnabled);
    }
    /**
     * @return Statistic to use for determining whether a series is displayed on the fixed legend.
     * Valid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, and `COUNT`.
     * 
     */
    public Optional<String> fixedLegendFilterField() {
        return Optional.ofNullable(this.fixedLegendFilterField);
    }
    /**
     * @return Number of series to include in the fixed legend.
     * 
     */
    public Optional<Integer> fixedLegendFilterLimit() {
        return Optional.ofNullable(this.fixedLegendFilterLimit);
    }
    /**
     * @return Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options
     * are `TOP`, and `BOTTOM`.
     * 
     */
    public Optional<String> fixedLegendFilterSort() {
        return Optional.ofNullable(this.fixedLegendFilterSort);
    }
    /**
     * @return This setting is deprecated.
     * 
     */
    public Optional<Boolean> fixedLegendHideLabel() {
        return Optional.ofNullable(this.fixedLegendHideLabel);
    }
    /**
     * @return Where the fixed legend should be displayed with respect to the chart.
     * Valid options are `RIGHT`, `TOP`, `LEFT`, `BOTTOM`.
     * 
     */
    public Optional<String> fixedLegendPosition() {
        return Optional.ofNullable(this.fixedLegendPosition);
    }
    /**
     * @return If `true`, the legend uses non-summarized stats instead of summarized.
     * 
     */
    public Optional<Boolean> fixedLegendUseRawStats() {
        return Optional.ofNullable(this.fixedLegendUseRawStats);
    }
    /**
     * @return For the tabular view, whether to group multi metrics into a single row by a common source.
     * If `false`, each source is displayed in its own row. if `true`, multiple metrics for the same host are displayed as different
     * columns in the same row.
     * 
     */
    public Optional<Boolean> groupBySource() {
        return Optional.ofNullable(this.groupBySource);
    }
    /**
     * @return Whether to disable the display of the floating legend (but
     * reenable it when the ctrl-key is pressed).
     * 
     */
    public Optional<Boolean> invertDynamicLegendHoverControl() {
        return Optional.ofNullable(this.invertDynamicLegendHoverControl);
    }
    /**
     * @return Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`,
     * `step-after`, `basis`, `cardinal`, and `monotone`.
     * 
     */
    public Optional<String> lineType() {
        return Optional.ofNullable(this.lineType);
    }
    /**
     * @return Max value of the Y-axis. Set to null or leave blank for auto.
     * 
     */
    public Optional<Double> max() {
        return Optional.ofNullable(this.max);
    }
    /**
     * @return Min value of the Y-axis. Set to null or leave blank for auto.
     * 
     */
    public Optional<Double> min() {
        return Optional.ofNullable(this.min);
    }
    /**
     * @return For the tabular view defines how many point tags to display.
     * 
     */
    public Optional<Integer> numTags() {
        return Optional.ofNullable(this.numTags);
    }
    /**
     * @return The markdown content for a Markdown display, in plain text.
     * 
     */
    public Optional<String> plainMarkdownContent() {
        return Optional.ofNullable(this.plainMarkdownContent);
    }
    /**
     * @return For the tabular view, whether to display sources. Default is `true`.
     * 
     */
    public Optional<Boolean> showHosts() {
        return Optional.ofNullable(this.showHosts);
    }
    /**
     * @return For the tabular view, whether to display labels. Default is `true`.
     * 
     */
    public Optional<Boolean> showLabels() {
        return Optional.ofNullable(this.showLabels);
    }
    /**
     * @return For the tabular view, whether to display raw values. Default is `false`.
     * 
     */
    public Optional<Boolean> showRawValues() {
        return Optional.ofNullable(this.showRawValues);
    }
    /**
     * @return For the tabular view, whether to display values in descending order. Default is `false`.
     * 
     */
    public Optional<Boolean> sortValuesDescending() {
        return Optional.ofNullable(this.sortValuesDescending);
    }
    /**
     * @return For the single stat view, the decimal precision of the displayed number.
     * 
     */
    public Optional<Integer> sparklineDecimalPrecision() {
        return Optional.ofNullable(this.sparklineDecimalPrecision);
    }
    /**
     * @return For the single stat view, the color of the displayed text (when not dynamically determined).
     * Values should be in `rgba(,,,,)` format.
     * 
     */
    public Optional<String> sparklineDisplayColor() {
        return Optional.ofNullable(this.sparklineDisplayColor);
    }
    /**
     * @return For the single stat view, the font size of the displayed text, in percent.
     * 
     */
    public Optional<String> sparklineDisplayFontSize() {
        return Optional.ofNullable(this.sparklineDisplayFontSize);
    }
    /**
     * @return For the single stat view, the horizontal position of the displayed text.
     * Valid options are `MIDDLE`, `LEFT`, `RIGHT`.
     * 
     */
    public Optional<String> sparklineDisplayHorizontalPosition() {
        return Optional.ofNullable(this.sparklineDisplayHorizontalPosition);
    }
    /**
     * @return For the single stat view, a string to append to the displayed text.
     * 
     */
    public Optional<String> sparklineDisplayPostfix() {
        return Optional.ofNullable(this.sparklineDisplayPostfix);
    }
    /**
     * @return For the single stat view, a string to add before the displayed text.
     * 
     */
    public Optional<String> sparklineDisplayPrefix() {
        return Optional.ofNullable(this.sparklineDisplayPrefix);
    }
    /**
     * @return For the single stat view, where to display the name of the query or the value of the query.
     * Valid options are `VALUE` or `LABEL`.
     * 
     */
    public Optional<String> sparklineDisplayValueType() {
        return Optional.ofNullable(this.sparklineDisplayValueType);
    }
    /**
     * @return This setting is deprecated.
     * 
     */
    public Optional<String> sparklineDisplayVerticalPosition() {
        return Optional.ofNullable(this.sparklineDisplayVerticalPosition);
    }
    /**
     * @return For the single stat view, the color of the background fill. Values should be
     * in `rgba(,,,,)`.
     * 
     */
    public Optional<String> sparklineFillColor() {
        return Optional.ofNullable(this.sparklineFillColor);
    }
    /**
     * @return For the single stat view, the color of the line. Values should be in `rgba(,,,,)` format.
     * 
     */
    public Optional<String> sparklineLineColor() {
        return Optional.ofNullable(this.sparklineLineColor);
    }
    /**
     * @return For the single stat view, this determines whether the sparkline of the statistic is displayed in the chart.
     * Valid options are `BACKGROUND`, `BOTTOM`, `NONE`.
     * 
     */
    public Optional<String> sparklineSize() {
        return Optional.ofNullable(this.sparklineSize);
    }
    /**
     * @return For the single stat view, whether to apply dynamic color settings to
     * the displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`.
     * 
     */
    public Optional<String> sparklineValueColorMapApplyTo() {
        return Optional.ofNullable(this.sparklineValueColorMapApplyTo);
    }
    /**
     * @return For the single stat view, A list of colors that differing query values map to.
     * Must contain one more element than `sparkline_value_color_map_values_v2`. Values should be in `rgba(,,,,)`.
     * 
     */
    public List<String> sparklineValueColorMapColors() {
        return this.sparklineValueColorMapColors == null ? List.of() : this.sparklineValueColorMapColors;
    }
    /**
     * @return This setting is deprecated.
     * 
     */
    public List<Integer> sparklineValueColorMapValues() {
        return this.sparklineValueColorMapValues == null ? List.of() : this.sparklineValueColorMapValues;
    }
    /**
     * @return For the single stat view, a list of boundaries for mapping different
     * query values to colors. Must contain one element less than `sparkline_value_color_map_colors`.
     * 
     */
    public List<Double> sparklineValueColorMapValuesV2s() {
        return this.sparklineValueColorMapValuesV2s == null ? List.of() : this.sparklineValueColorMapValuesV2s;
    }
    /**
     * @return For the single stat view, a list of display text values that different query
     * values map to. Must contain one more element than `sparkline_value_text_map_thresholds`.
     * 
     */
    public List<String> sparklineValueTextMapTexts() {
        return this.sparklineValueTextMapTexts == null ? List.of() : this.sparklineValueTextMapTexts;
    }
    /**
     * @return For the single stat view, a list of threshold boundaries for
     * mapping different query values to display text. Must contain one element less than `sparkline_value_text_map_text`.
     * 
     */
    public List<Double> sparklineValueTextMapThresholds() {
        return this.sparklineValueTextMapThresholds == null ? List.of() : this.sparklineValueTextMapThresholds;
    }
    /**
     * @return Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means
     * stacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to
     * center the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, and `bars`.
     * 
     */
    public Optional<String> stackType() {
        return Optional.ofNullable(this.stackType);
    }
    /**
     * @return For the tabular view, which mode to use to determine which point tags to display.
     * Valid options are `all`, `top`, or `custom`.
     * 
     */
    public Optional<String> tagMode() {
        return Optional.ofNullable(this.tagMode);
    }
    /**
     * @return For x-y scatterplots, whether to color more recent points as darker than older points.
     * 
     */
    public Optional<Boolean> timeBasedColoring() {
        return Optional.ofNullable(this.timeBasedColoring);
    }
    /**
     * @return Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to
     * the Stacked Area plot, `table` to the Tabular View, `scatterplot-xy` to Scatter Plot, `markdown-widget` to the
     * Markdown display, and `sparkline` to the Single Stat view. Valid options are`line`, `scatterplot`,
     * `stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,
     * `top-k`, `status-list`, and `histogram`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Width, in minutes, of the time window to use for `last` windowing.
     * 
     */
    public Optional<Integer> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }
    /**
     * @return For the tabular view, whether to use the full time window for the query or the last X minutes.
     * Valid options are `full` or `last`.
     * 
     */
    public Optional<String> windowing() {
        return Optional.ofNullable(this.windowing);
    }
    /**
     * @return For x-y scatterplots, max value for the X-axis. Set to null for auto.
     * 
     */
    public Optional<Double> xmax() {
        return Optional.ofNullable(this.xmax);
    }
    /**
     * @return For x-y scatterplots, min value for the X-axis. Set to null for auto.
     * 
     */
    public Optional<Double> xmin() {
        return Optional.ofNullable(this.xmin);
    }
    /**
     * @return Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     * 
     */
    public Optional<Boolean> y0ScaleSiBy1024() {
        return Optional.ofNullable(this.y0ScaleSiBy1024);
    }
    /**
     * @return Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units.
     * 
     */
    public Optional<Boolean> y0UnitAutoscaling() {
        return Optional.ofNullable(this.y0UnitAutoscaling);
    }
    /**
     * @return Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI).
     * 
     */
    public Optional<Boolean> y1ScaleSiBy1024() {
        return Optional.ofNullable(this.y1ScaleSiBy1024);
    }
    /**
     * @return Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units.
     * 
     */
    public Optional<Boolean> y1UnitAutoscaling() {
        return Optional.ofNullable(this.y1UnitAutoscaling);
    }
    /**
     * @return For plots with multiple Y-axes, units for right side Y-axis.
     * 
     */
    public Optional<String> y1Units() {
        return Optional.ofNullable(this.y1Units);
    }
    /**
     * @return For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto.
     * 
     */
    public Optional<Double> y1max() {
        return Optional.ofNullable(this.y1max);
    }
    /**
     * @return For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto.
     * 
     */
    public Optional<Double> y1min() {
        return Optional.ofNullable(this.y1min);
    }
    /**
     * @return For x-y scatterplots, max value for the Y-axis. Set to null for auto.
     * 
     */
    public Optional<Double> ymax() {
        return Optional.ofNullable(this.ymax);
    }
    /**
     * @return For x-y scatterplots, min value for the Y-axis. Set to null for auto.
     * 
     */
    public Optional<Double> ymin() {
        return Optional.ofNullable(this.ymin);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardSectionRowChartChartSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoColumnTags;
        private @Nullable String columnTags;
        private @Nullable List<String> customTags;
        private @Nullable Integer expectedDataSpacing;
        private @Nullable List<String> fixedLegendDisplayStats;
        private @Nullable Boolean fixedLegendEnabled;
        private @Nullable String fixedLegendFilterField;
        private @Nullable Integer fixedLegendFilterLimit;
        private @Nullable String fixedLegendFilterSort;
        private @Nullable Boolean fixedLegendHideLabel;
        private @Nullable String fixedLegendPosition;
        private @Nullable Boolean fixedLegendUseRawStats;
        private @Nullable Boolean groupBySource;
        private @Nullable Boolean invertDynamicLegendHoverControl;
        private @Nullable String lineType;
        private @Nullable Double max;
        private @Nullable Double min;
        private @Nullable Integer numTags;
        private @Nullable String plainMarkdownContent;
        private @Nullable Boolean showHosts;
        private @Nullable Boolean showLabels;
        private @Nullable Boolean showRawValues;
        private @Nullable Boolean sortValuesDescending;
        private @Nullable Integer sparklineDecimalPrecision;
        private @Nullable String sparklineDisplayColor;
        private @Nullable String sparklineDisplayFontSize;
        private @Nullable String sparklineDisplayHorizontalPosition;
        private @Nullable String sparklineDisplayPostfix;
        private @Nullable String sparklineDisplayPrefix;
        private @Nullable String sparklineDisplayValueType;
        private @Nullable String sparklineDisplayVerticalPosition;
        private @Nullable String sparklineFillColor;
        private @Nullable String sparklineLineColor;
        private @Nullable String sparklineSize;
        private @Nullable String sparklineValueColorMapApplyTo;
        private @Nullable List<String> sparklineValueColorMapColors;
        private @Nullable List<Integer> sparklineValueColorMapValues;
        private @Nullable List<Double> sparklineValueColorMapValuesV2s;
        private @Nullable List<String> sparklineValueTextMapTexts;
        private @Nullable List<Double> sparklineValueTextMapThresholds;
        private @Nullable String stackType;
        private @Nullable String tagMode;
        private @Nullable Boolean timeBasedColoring;
        private String type;
        private @Nullable Integer windowSize;
        private @Nullable String windowing;
        private @Nullable Double xmax;
        private @Nullable Double xmin;
        private @Nullable Boolean y0ScaleSiBy1024;
        private @Nullable Boolean y0UnitAutoscaling;
        private @Nullable Boolean y1ScaleSiBy1024;
        private @Nullable Boolean y1UnitAutoscaling;
        private @Nullable String y1Units;
        private @Nullable Double y1max;
        private @Nullable Double y1min;
        private @Nullable Double ymax;
        private @Nullable Double ymin;
        public Builder() {}
        public Builder(DashboardSectionRowChartChartSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoColumnTags = defaults.autoColumnTags;
    	      this.columnTags = defaults.columnTags;
    	      this.customTags = defaults.customTags;
    	      this.expectedDataSpacing = defaults.expectedDataSpacing;
    	      this.fixedLegendDisplayStats = defaults.fixedLegendDisplayStats;
    	      this.fixedLegendEnabled = defaults.fixedLegendEnabled;
    	      this.fixedLegendFilterField = defaults.fixedLegendFilterField;
    	      this.fixedLegendFilterLimit = defaults.fixedLegendFilterLimit;
    	      this.fixedLegendFilterSort = defaults.fixedLegendFilterSort;
    	      this.fixedLegendHideLabel = defaults.fixedLegendHideLabel;
    	      this.fixedLegendPosition = defaults.fixedLegendPosition;
    	      this.fixedLegendUseRawStats = defaults.fixedLegendUseRawStats;
    	      this.groupBySource = defaults.groupBySource;
    	      this.invertDynamicLegendHoverControl = defaults.invertDynamicLegendHoverControl;
    	      this.lineType = defaults.lineType;
    	      this.max = defaults.max;
    	      this.min = defaults.min;
    	      this.numTags = defaults.numTags;
    	      this.plainMarkdownContent = defaults.plainMarkdownContent;
    	      this.showHosts = defaults.showHosts;
    	      this.showLabels = defaults.showLabels;
    	      this.showRawValues = defaults.showRawValues;
    	      this.sortValuesDescending = defaults.sortValuesDescending;
    	      this.sparklineDecimalPrecision = defaults.sparklineDecimalPrecision;
    	      this.sparklineDisplayColor = defaults.sparklineDisplayColor;
    	      this.sparklineDisplayFontSize = defaults.sparklineDisplayFontSize;
    	      this.sparklineDisplayHorizontalPosition = defaults.sparklineDisplayHorizontalPosition;
    	      this.sparklineDisplayPostfix = defaults.sparklineDisplayPostfix;
    	      this.sparklineDisplayPrefix = defaults.sparklineDisplayPrefix;
    	      this.sparklineDisplayValueType = defaults.sparklineDisplayValueType;
    	      this.sparklineDisplayVerticalPosition = defaults.sparklineDisplayVerticalPosition;
    	      this.sparklineFillColor = defaults.sparklineFillColor;
    	      this.sparklineLineColor = defaults.sparklineLineColor;
    	      this.sparklineSize = defaults.sparklineSize;
    	      this.sparklineValueColorMapApplyTo = defaults.sparklineValueColorMapApplyTo;
    	      this.sparklineValueColorMapColors = defaults.sparklineValueColorMapColors;
    	      this.sparklineValueColorMapValues = defaults.sparklineValueColorMapValues;
    	      this.sparklineValueColorMapValuesV2s = defaults.sparklineValueColorMapValuesV2s;
    	      this.sparklineValueTextMapTexts = defaults.sparklineValueTextMapTexts;
    	      this.sparklineValueTextMapThresholds = defaults.sparklineValueTextMapThresholds;
    	      this.stackType = defaults.stackType;
    	      this.tagMode = defaults.tagMode;
    	      this.timeBasedColoring = defaults.timeBasedColoring;
    	      this.type = defaults.type;
    	      this.windowSize = defaults.windowSize;
    	      this.windowing = defaults.windowing;
    	      this.xmax = defaults.xmax;
    	      this.xmin = defaults.xmin;
    	      this.y0ScaleSiBy1024 = defaults.y0ScaleSiBy1024;
    	      this.y0UnitAutoscaling = defaults.y0UnitAutoscaling;
    	      this.y1ScaleSiBy1024 = defaults.y1ScaleSiBy1024;
    	      this.y1UnitAutoscaling = defaults.y1UnitAutoscaling;
    	      this.y1Units = defaults.y1Units;
    	      this.y1max = defaults.y1max;
    	      this.y1min = defaults.y1min;
    	      this.ymax = defaults.ymax;
    	      this.ymin = defaults.ymin;
        }

        @CustomType.Setter
        public Builder autoColumnTags(@Nullable Boolean autoColumnTags) {
            this.autoColumnTags = autoColumnTags;
            return this;
        }
        @CustomType.Setter
        public Builder columnTags(@Nullable String columnTags) {
            this.columnTags = columnTags;
            return this;
        }
        @CustomType.Setter
        public Builder customTags(@Nullable List<String> customTags) {
            this.customTags = customTags;
            return this;
        }
        public Builder customTags(String... customTags) {
            return customTags(List.of(customTags));
        }
        @CustomType.Setter
        public Builder expectedDataSpacing(@Nullable Integer expectedDataSpacing) {
            this.expectedDataSpacing = expectedDataSpacing;
            return this;
        }
        @CustomType.Setter
        public Builder fixedLegendDisplayStats(@Nullable List<String> fixedLegendDisplayStats) {
            this.fixedLegendDisplayStats = fixedLegendDisplayStats;
            return this;
        }
        public Builder fixedLegendDisplayStats(String... fixedLegendDisplayStats) {
            return fixedLegendDisplayStats(List.of(fixedLegendDisplayStats));
        }
        @CustomType.Setter
        public Builder fixedLegendEnabled(@Nullable Boolean fixedLegendEnabled) {
            this.fixedLegendEnabled = fixedLegendEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder fixedLegendFilterField(@Nullable String fixedLegendFilterField) {
            this.fixedLegendFilterField = fixedLegendFilterField;
            return this;
        }
        @CustomType.Setter
        public Builder fixedLegendFilterLimit(@Nullable Integer fixedLegendFilterLimit) {
            this.fixedLegendFilterLimit = fixedLegendFilterLimit;
            return this;
        }
        @CustomType.Setter
        public Builder fixedLegendFilterSort(@Nullable String fixedLegendFilterSort) {
            this.fixedLegendFilterSort = fixedLegendFilterSort;
            return this;
        }
        @CustomType.Setter
        public Builder fixedLegendHideLabel(@Nullable Boolean fixedLegendHideLabel) {
            this.fixedLegendHideLabel = fixedLegendHideLabel;
            return this;
        }
        @CustomType.Setter
        public Builder fixedLegendPosition(@Nullable String fixedLegendPosition) {
            this.fixedLegendPosition = fixedLegendPosition;
            return this;
        }
        @CustomType.Setter
        public Builder fixedLegendUseRawStats(@Nullable Boolean fixedLegendUseRawStats) {
            this.fixedLegendUseRawStats = fixedLegendUseRawStats;
            return this;
        }
        @CustomType.Setter
        public Builder groupBySource(@Nullable Boolean groupBySource) {
            this.groupBySource = groupBySource;
            return this;
        }
        @CustomType.Setter
        public Builder invertDynamicLegendHoverControl(@Nullable Boolean invertDynamicLegendHoverControl) {
            this.invertDynamicLegendHoverControl = invertDynamicLegendHoverControl;
            return this;
        }
        @CustomType.Setter
        public Builder lineType(@Nullable String lineType) {
            this.lineType = lineType;
            return this;
        }
        @CustomType.Setter
        public Builder max(@Nullable Double max) {
            this.max = max;
            return this;
        }
        @CustomType.Setter
        public Builder min(@Nullable Double min) {
            this.min = min;
            return this;
        }
        @CustomType.Setter
        public Builder numTags(@Nullable Integer numTags) {
            this.numTags = numTags;
            return this;
        }
        @CustomType.Setter
        public Builder plainMarkdownContent(@Nullable String plainMarkdownContent) {
            this.plainMarkdownContent = plainMarkdownContent;
            return this;
        }
        @CustomType.Setter
        public Builder showHosts(@Nullable Boolean showHosts) {
            this.showHosts = showHosts;
            return this;
        }
        @CustomType.Setter
        public Builder showLabels(@Nullable Boolean showLabels) {
            this.showLabels = showLabels;
            return this;
        }
        @CustomType.Setter
        public Builder showRawValues(@Nullable Boolean showRawValues) {
            this.showRawValues = showRawValues;
            return this;
        }
        @CustomType.Setter
        public Builder sortValuesDescending(@Nullable Boolean sortValuesDescending) {
            this.sortValuesDescending = sortValuesDescending;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineDecimalPrecision(@Nullable Integer sparklineDecimalPrecision) {
            this.sparklineDecimalPrecision = sparklineDecimalPrecision;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineDisplayColor(@Nullable String sparklineDisplayColor) {
            this.sparklineDisplayColor = sparklineDisplayColor;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineDisplayFontSize(@Nullable String sparklineDisplayFontSize) {
            this.sparklineDisplayFontSize = sparklineDisplayFontSize;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineDisplayHorizontalPosition(@Nullable String sparklineDisplayHorizontalPosition) {
            this.sparklineDisplayHorizontalPosition = sparklineDisplayHorizontalPosition;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineDisplayPostfix(@Nullable String sparklineDisplayPostfix) {
            this.sparklineDisplayPostfix = sparklineDisplayPostfix;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineDisplayPrefix(@Nullable String sparklineDisplayPrefix) {
            this.sparklineDisplayPrefix = sparklineDisplayPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineDisplayValueType(@Nullable String sparklineDisplayValueType) {
            this.sparklineDisplayValueType = sparklineDisplayValueType;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineDisplayVerticalPosition(@Nullable String sparklineDisplayVerticalPosition) {
            this.sparklineDisplayVerticalPosition = sparklineDisplayVerticalPosition;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineFillColor(@Nullable String sparklineFillColor) {
            this.sparklineFillColor = sparklineFillColor;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineLineColor(@Nullable String sparklineLineColor) {
            this.sparklineLineColor = sparklineLineColor;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineSize(@Nullable String sparklineSize) {
            this.sparklineSize = sparklineSize;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineValueColorMapApplyTo(@Nullable String sparklineValueColorMapApplyTo) {
            this.sparklineValueColorMapApplyTo = sparklineValueColorMapApplyTo;
            return this;
        }
        @CustomType.Setter
        public Builder sparklineValueColorMapColors(@Nullable List<String> sparklineValueColorMapColors) {
            this.sparklineValueColorMapColors = sparklineValueColorMapColors;
            return this;
        }
        public Builder sparklineValueColorMapColors(String... sparklineValueColorMapColors) {
            return sparklineValueColorMapColors(List.of(sparklineValueColorMapColors));
        }
        @CustomType.Setter
        public Builder sparklineValueColorMapValues(@Nullable List<Integer> sparklineValueColorMapValues) {
            this.sparklineValueColorMapValues = sparklineValueColorMapValues;
            return this;
        }
        public Builder sparklineValueColorMapValues(Integer... sparklineValueColorMapValues) {
            return sparklineValueColorMapValues(List.of(sparklineValueColorMapValues));
        }
        @CustomType.Setter
        public Builder sparklineValueColorMapValuesV2s(@Nullable List<Double> sparklineValueColorMapValuesV2s) {
            this.sparklineValueColorMapValuesV2s = sparklineValueColorMapValuesV2s;
            return this;
        }
        public Builder sparklineValueColorMapValuesV2s(Double... sparklineValueColorMapValuesV2s) {
            return sparklineValueColorMapValuesV2s(List.of(sparklineValueColorMapValuesV2s));
        }
        @CustomType.Setter
        public Builder sparklineValueTextMapTexts(@Nullable List<String> sparklineValueTextMapTexts) {
            this.sparklineValueTextMapTexts = sparklineValueTextMapTexts;
            return this;
        }
        public Builder sparklineValueTextMapTexts(String... sparklineValueTextMapTexts) {
            return sparklineValueTextMapTexts(List.of(sparklineValueTextMapTexts));
        }
        @CustomType.Setter
        public Builder sparklineValueTextMapThresholds(@Nullable List<Double> sparklineValueTextMapThresholds) {
            this.sparklineValueTextMapThresholds = sparklineValueTextMapThresholds;
            return this;
        }
        public Builder sparklineValueTextMapThresholds(Double... sparklineValueTextMapThresholds) {
            return sparklineValueTextMapThresholds(List.of(sparklineValueTextMapThresholds));
        }
        @CustomType.Setter
        public Builder stackType(@Nullable String stackType) {
            this.stackType = stackType;
            return this;
        }
        @CustomType.Setter
        public Builder tagMode(@Nullable String tagMode) {
            this.tagMode = tagMode;
            return this;
        }
        @CustomType.Setter
        public Builder timeBasedColoring(@Nullable Boolean timeBasedColoring) {
            this.timeBasedColoring = timeBasedColoring;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder windowSize(@Nullable Integer windowSize) {
            this.windowSize = windowSize;
            return this;
        }
        @CustomType.Setter
        public Builder windowing(@Nullable String windowing) {
            this.windowing = windowing;
            return this;
        }
        @CustomType.Setter
        public Builder xmax(@Nullable Double xmax) {
            this.xmax = xmax;
            return this;
        }
        @CustomType.Setter
        public Builder xmin(@Nullable Double xmin) {
            this.xmin = xmin;
            return this;
        }
        @CustomType.Setter
        public Builder y0ScaleSiBy1024(@Nullable Boolean y0ScaleSiBy1024) {
            this.y0ScaleSiBy1024 = y0ScaleSiBy1024;
            return this;
        }
        @CustomType.Setter
        public Builder y0UnitAutoscaling(@Nullable Boolean y0UnitAutoscaling) {
            this.y0UnitAutoscaling = y0UnitAutoscaling;
            return this;
        }
        @CustomType.Setter
        public Builder y1ScaleSiBy1024(@Nullable Boolean y1ScaleSiBy1024) {
            this.y1ScaleSiBy1024 = y1ScaleSiBy1024;
            return this;
        }
        @CustomType.Setter
        public Builder y1UnitAutoscaling(@Nullable Boolean y1UnitAutoscaling) {
            this.y1UnitAutoscaling = y1UnitAutoscaling;
            return this;
        }
        @CustomType.Setter
        public Builder y1Units(@Nullable String y1Units) {
            this.y1Units = y1Units;
            return this;
        }
        @CustomType.Setter
        public Builder y1max(@Nullable Double y1max) {
            this.y1max = y1max;
            return this;
        }
        @CustomType.Setter
        public Builder y1min(@Nullable Double y1min) {
            this.y1min = y1min;
            return this;
        }
        @CustomType.Setter
        public Builder ymax(@Nullable Double ymax) {
            this.ymax = ymax;
            return this;
        }
        @CustomType.Setter
        public Builder ymin(@Nullable Double ymin) {
            this.ymin = ymin;
            return this;
        }
        public DashboardSectionRowChartChartSetting build() {
            final var o = new DashboardSectionRowChartChartSetting();
            o.autoColumnTags = autoColumnTags;
            o.columnTags = columnTags;
            o.customTags = customTags;
            o.expectedDataSpacing = expectedDataSpacing;
            o.fixedLegendDisplayStats = fixedLegendDisplayStats;
            o.fixedLegendEnabled = fixedLegendEnabled;
            o.fixedLegendFilterField = fixedLegendFilterField;
            o.fixedLegendFilterLimit = fixedLegendFilterLimit;
            o.fixedLegendFilterSort = fixedLegendFilterSort;
            o.fixedLegendHideLabel = fixedLegendHideLabel;
            o.fixedLegendPosition = fixedLegendPosition;
            o.fixedLegendUseRawStats = fixedLegendUseRawStats;
            o.groupBySource = groupBySource;
            o.invertDynamicLegendHoverControl = invertDynamicLegendHoverControl;
            o.lineType = lineType;
            o.max = max;
            o.min = min;
            o.numTags = numTags;
            o.plainMarkdownContent = plainMarkdownContent;
            o.showHosts = showHosts;
            o.showLabels = showLabels;
            o.showRawValues = showRawValues;
            o.sortValuesDescending = sortValuesDescending;
            o.sparklineDecimalPrecision = sparklineDecimalPrecision;
            o.sparklineDisplayColor = sparklineDisplayColor;
            o.sparklineDisplayFontSize = sparklineDisplayFontSize;
            o.sparklineDisplayHorizontalPosition = sparklineDisplayHorizontalPosition;
            o.sparklineDisplayPostfix = sparklineDisplayPostfix;
            o.sparklineDisplayPrefix = sparklineDisplayPrefix;
            o.sparklineDisplayValueType = sparklineDisplayValueType;
            o.sparklineDisplayVerticalPosition = sparklineDisplayVerticalPosition;
            o.sparklineFillColor = sparklineFillColor;
            o.sparklineLineColor = sparklineLineColor;
            o.sparklineSize = sparklineSize;
            o.sparklineValueColorMapApplyTo = sparklineValueColorMapApplyTo;
            o.sparklineValueColorMapColors = sparklineValueColorMapColors;
            o.sparklineValueColorMapValues = sparklineValueColorMapValues;
            o.sparklineValueColorMapValuesV2s = sparklineValueColorMapValuesV2s;
            o.sparklineValueTextMapTexts = sparklineValueTextMapTexts;
            o.sparklineValueTextMapThresholds = sparklineValueTextMapThresholds;
            o.stackType = stackType;
            o.tagMode = tagMode;
            o.timeBasedColoring = timeBasedColoring;
            o.type = type;
            o.windowSize = windowSize;
            o.windowing = windowing;
            o.xmax = xmax;
            o.xmin = xmin;
            o.y0ScaleSiBy1024 = y0ScaleSiBy1024;
            o.y0UnitAutoscaling = y0UnitAutoscaling;
            o.y1ScaleSiBy1024 = y1ScaleSiBy1024;
            o.y1UnitAutoscaling = y1UnitAutoscaling;
            o.y1Units = y1Units;
            o.y1max = y1max;
            o.y1min = y1min;
            o.ymax = ymax;
            o.ymin = ymin;
            return o;
        }
    }
}
