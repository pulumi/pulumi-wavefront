// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDashboardsDashboardParameterDetail {
    /**
     * @return The default value of the parameter.
     * 
     */
    private String defaultValue;
    /**
     * @return For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
     * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
     * 
     */
    private String dynamicFieldType;
    /**
     * @return If `true` the parameter will only be shown on the edit view of the dashboard.
     * 
     */
    private Boolean hideFromView;
    /**
     * @return The label for the parameter.
     * 
     */
    private String label;
    /**
     * @return The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
     * 
     */
    private String parameterType;
    /**
     * @return For `DYNAMIC` parameter types, the query to execute to return values.
     * 
     */
    private String queryValue;
    /**
     * @return For `TAG_KEY` dynamic field types, the tag key to return.
     * 
     */
    private String tagKey;
    /**
     * @return A string to string map. At least one of the keys must match the value of
     * `default_value`.
     * 
     */
    private Map<String,String> valuesToReadableStrings;

    private GetDashboardsDashboardParameterDetail() {}
    /**
     * @return The default value of the parameter.
     * 
     */
    public String defaultValue() {
        return this.defaultValue;
    }
    /**
     * @return For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
     * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
     * 
     */
    public String dynamicFieldType() {
        return this.dynamicFieldType;
    }
    /**
     * @return If `true` the parameter will only be shown on the edit view of the dashboard.
     * 
     */
    public Boolean hideFromView() {
        return this.hideFromView;
    }
    /**
     * @return The label for the parameter.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
     * 
     */
    public String parameterType() {
        return this.parameterType;
    }
    /**
     * @return For `DYNAMIC` parameter types, the query to execute to return values.
     * 
     */
    public String queryValue() {
        return this.queryValue;
    }
    /**
     * @return For `TAG_KEY` dynamic field types, the tag key to return.
     * 
     */
    public String tagKey() {
        return this.tagKey;
    }
    /**
     * @return A string to string map. At least one of the keys must match the value of
     * `default_value`.
     * 
     */
    public Map<String,String> valuesToReadableStrings() {
        return this.valuesToReadableStrings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDashboardsDashboardParameterDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultValue;
        private String dynamicFieldType;
        private Boolean hideFromView;
        private String label;
        private String parameterType;
        private String queryValue;
        private String tagKey;
        private Map<String,String> valuesToReadableStrings;
        public Builder() {}
        public Builder(GetDashboardsDashboardParameterDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValue = defaults.defaultValue;
    	      this.dynamicFieldType = defaults.dynamicFieldType;
    	      this.hideFromView = defaults.hideFromView;
    	      this.label = defaults.label;
    	      this.parameterType = defaults.parameterType;
    	      this.queryValue = defaults.queryValue;
    	      this.tagKey = defaults.tagKey;
    	      this.valuesToReadableStrings = defaults.valuesToReadableStrings;
        }

        @CustomType.Setter
        public Builder defaultValue(String defaultValue) {
            this.defaultValue = Objects.requireNonNull(defaultValue);
            return this;
        }
        @CustomType.Setter
        public Builder dynamicFieldType(String dynamicFieldType) {
            this.dynamicFieldType = Objects.requireNonNull(dynamicFieldType);
            return this;
        }
        @CustomType.Setter
        public Builder hideFromView(Boolean hideFromView) {
            this.hideFromView = Objects.requireNonNull(hideFromView);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder parameterType(String parameterType) {
            this.parameterType = Objects.requireNonNull(parameterType);
            return this;
        }
        @CustomType.Setter
        public Builder queryValue(String queryValue) {
            this.queryValue = Objects.requireNonNull(queryValue);
            return this;
        }
        @CustomType.Setter
        public Builder tagKey(String tagKey) {
            this.tagKey = Objects.requireNonNull(tagKey);
            return this;
        }
        @CustomType.Setter
        public Builder valuesToReadableStrings(Map<String,String> valuesToReadableStrings) {
            this.valuesToReadableStrings = Objects.requireNonNull(valuesToReadableStrings);
            return this;
        }
        public GetDashboardsDashboardParameterDetail build() {
            final var _resultValue = new GetDashboardsDashboardParameterDetail();
            _resultValue.defaultValue = defaultValue;
            _resultValue.dynamicFieldType = dynamicFieldType;
            _resultValue.hideFromView = hideFromView;
            _resultValue.label = label;
            _resultValue.parameterType = parameterType;
            _resultValue.queryValue = queryValue;
            _resultValue.tagKey = tagKey;
            _resultValue.valuesToReadableStrings = valuesToReadableStrings;
            return _resultValue;
        }
    }
}
