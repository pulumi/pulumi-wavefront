// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.wavefront.outputs.GetAlertsAlertFailingHostLabelPair;
import com.pulumi.wavefront.outputs.GetAlertsAlertInMaintenanceHostLabelPair;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetAlertsAlert {
    /**
     * @return User-supplied additional explanatory information about this alert.
     * 
     */
    private String additionalInformation;
    private String alertType;
    /**
     * @return A list of users or groups that can modify the alert.
     * 
     */
    private List<String> canModifies;
    /**
     * @return A list of users or groups that can view the alert.
     * 
     */
    private List<String> canViews;
    /**
     * @return A Wavefront query that is evaluated at regular intervals (default is 1 minute). The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes.
     * 
     */
    private String condition;
    /**
     * @return A map of severity to condition for which this alert will trigger.
     * 
     */
    private Map<String,String> conditions;
    /**
     * @return A second query the results of which are displayed in the alert user interface instead of the condition query.
     * 
     */
    private String displayExpression;
    /**
     * @return A Boolean flag to enable real-time evaluation.
     * 
     */
    private Boolean evaluateRealtimeData;
    /**
     * @return A list of failing host label pairs.
     * 
     */
    private List<GetAlertsAlertFailingHostLabelPair> failingHostLabelPairs;
    /**
     * @return The ID of the alert in Wavefront.
     * * `alert_type`- The type of alert in Wavefront.
     * 
     */
    private String id;
    /**
     * @return A list of in maintenance host label pairs.
     * 
     */
    private List<GetAlertsAlertInMaintenanceHostLabelPair> inMaintenanceHostLabelPairs;
    /**
     * @return A Boolean flag indicating whether to include obsolete metrics or not.
     * 
     */
    private Boolean includeObsoleteMetrics;
    /**
     * @return The number of consecutive minutes that a series matching the condition query must evaluate to &#34;true&#34; (non-zero value) before the alert fires.
     * 
     */
    private Integer minutes;
    /**
     * @return The name of the alert as it is displayed in Wavefront.
     * 
     */
    private String name;
    /**
     * @return How often to re-trigger a continually failing alert.
     * 
     */
    private Integer notificationResendFrequencyMinutes;
    /**
     * @return The specified query is executed every `process_rate_minutes` minutes.
     * 
     */
    private Integer processRateMinutes;
    /**
     * @return The number of consecutive minutes that a firing series matching the condition query must evaluate to &#34;false&#34; (zero value) before the alert resolves.
     * 
     */
    private Integer resolveAfterMinutes;
    /**
     * @return The severity of the alert.
     * 
     */
    private String severity;
    private List<String> severityLists;
    /**
     * @return The status of the alert.
     * 
     */
    private List<String> statuses;
    /**
     * @return A set of tags assigned to the alert.
     * 
     */
    private List<String> tags;
    /**
     * @return An email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes.
     * 
     */
    private String target;
    /**
     * @return A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
     * 
     */
    private @Nullable Map<String,String> targets;

    private GetAlertsAlert() {}
    /**
     * @return User-supplied additional explanatory information about this alert.
     * 
     */
    public String additionalInformation() {
        return this.additionalInformation;
    }
    public String alertType() {
        return this.alertType;
    }
    /**
     * @return A list of users or groups that can modify the alert.
     * 
     */
    public List<String> canModifies() {
        return this.canModifies;
    }
    /**
     * @return A list of users or groups that can view the alert.
     * 
     */
    public List<String> canViews() {
        return this.canViews;
    }
    /**
     * @return A Wavefront query that is evaluated at regular intervals (default is 1 minute). The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes.
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return A map of severity to condition for which this alert will trigger.
     * 
     */
    public Map<String,String> conditions() {
        return this.conditions;
    }
    /**
     * @return A second query the results of which are displayed in the alert user interface instead of the condition query.
     * 
     */
    public String displayExpression() {
        return this.displayExpression;
    }
    /**
     * @return A Boolean flag to enable real-time evaluation.
     * 
     */
    public Boolean evaluateRealtimeData() {
        return this.evaluateRealtimeData;
    }
    /**
     * @return A list of failing host label pairs.
     * 
     */
    public List<GetAlertsAlertFailingHostLabelPair> failingHostLabelPairs() {
        return this.failingHostLabelPairs;
    }
    /**
     * @return The ID of the alert in Wavefront.
     * * `alert_type`- The type of alert in Wavefront.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of in maintenance host label pairs.
     * 
     */
    public List<GetAlertsAlertInMaintenanceHostLabelPair> inMaintenanceHostLabelPairs() {
        return this.inMaintenanceHostLabelPairs;
    }
    /**
     * @return A Boolean flag indicating whether to include obsolete metrics or not.
     * 
     */
    public Boolean includeObsoleteMetrics() {
        return this.includeObsoleteMetrics;
    }
    /**
     * @return The number of consecutive minutes that a series matching the condition query must evaluate to &#34;true&#34; (non-zero value) before the alert fires.
     * 
     */
    public Integer minutes() {
        return this.minutes;
    }
    /**
     * @return The name of the alert as it is displayed in Wavefront.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return How often to re-trigger a continually failing alert.
     * 
     */
    public Integer notificationResendFrequencyMinutes() {
        return this.notificationResendFrequencyMinutes;
    }
    /**
     * @return The specified query is executed every `process_rate_minutes` minutes.
     * 
     */
    public Integer processRateMinutes() {
        return this.processRateMinutes;
    }
    /**
     * @return The number of consecutive minutes that a firing series matching the condition query must evaluate to &#34;false&#34; (zero value) before the alert resolves.
     * 
     */
    public Integer resolveAfterMinutes() {
        return this.resolveAfterMinutes;
    }
    /**
     * @return The severity of the alert.
     * 
     */
    public String severity() {
        return this.severity;
    }
    public List<String> severityLists() {
        return this.severityLists;
    }
    /**
     * @return The status of the alert.
     * 
     */
    public List<String> statuses() {
        return this.statuses;
    }
    /**
     * @return A set of tags assigned to the alert.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return An email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes.
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return A comma-separated list of the email addresses or integration endpoints (such as PagerDuty or webhook) to notify when the alert status changes. Multiple target types can be in the list.
     * 
     */
    public Map<String,String> targets() {
        return this.targets == null ? Map.of() : this.targets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertsAlert defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String additionalInformation;
        private String alertType;
        private List<String> canModifies;
        private List<String> canViews;
        private String condition;
        private Map<String,String> conditions;
        private String displayExpression;
        private Boolean evaluateRealtimeData;
        private List<GetAlertsAlertFailingHostLabelPair> failingHostLabelPairs;
        private String id;
        private List<GetAlertsAlertInMaintenanceHostLabelPair> inMaintenanceHostLabelPairs;
        private Boolean includeObsoleteMetrics;
        private Integer minutes;
        private String name;
        private Integer notificationResendFrequencyMinutes;
        private Integer processRateMinutes;
        private Integer resolveAfterMinutes;
        private String severity;
        private List<String> severityLists;
        private List<String> statuses;
        private List<String> tags;
        private String target;
        private @Nullable Map<String,String> targets;
        public Builder() {}
        public Builder(GetAlertsAlert defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalInformation = defaults.additionalInformation;
    	      this.alertType = defaults.alertType;
    	      this.canModifies = defaults.canModifies;
    	      this.canViews = defaults.canViews;
    	      this.condition = defaults.condition;
    	      this.conditions = defaults.conditions;
    	      this.displayExpression = defaults.displayExpression;
    	      this.evaluateRealtimeData = defaults.evaluateRealtimeData;
    	      this.failingHostLabelPairs = defaults.failingHostLabelPairs;
    	      this.id = defaults.id;
    	      this.inMaintenanceHostLabelPairs = defaults.inMaintenanceHostLabelPairs;
    	      this.includeObsoleteMetrics = defaults.includeObsoleteMetrics;
    	      this.minutes = defaults.minutes;
    	      this.name = defaults.name;
    	      this.notificationResendFrequencyMinutes = defaults.notificationResendFrequencyMinutes;
    	      this.processRateMinutes = defaults.processRateMinutes;
    	      this.resolveAfterMinutes = defaults.resolveAfterMinutes;
    	      this.severity = defaults.severity;
    	      this.severityLists = defaults.severityLists;
    	      this.statuses = defaults.statuses;
    	      this.tags = defaults.tags;
    	      this.target = defaults.target;
    	      this.targets = defaults.targets;
        }

        @CustomType.Setter
        public Builder additionalInformation(String additionalInformation) {
            this.additionalInformation = Objects.requireNonNull(additionalInformation);
            return this;
        }
        @CustomType.Setter
        public Builder alertType(String alertType) {
            this.alertType = Objects.requireNonNull(alertType);
            return this;
        }
        @CustomType.Setter
        public Builder canModifies(List<String> canModifies) {
            this.canModifies = Objects.requireNonNull(canModifies);
            return this;
        }
        public Builder canModifies(String... canModifies) {
            return canModifies(List.of(canModifies));
        }
        @CustomType.Setter
        public Builder canViews(List<String> canViews) {
            this.canViews = Objects.requireNonNull(canViews);
            return this;
        }
        public Builder canViews(String... canViews) {
            return canViews(List.of(canViews));
        }
        @CustomType.Setter
        public Builder condition(String condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }
        @CustomType.Setter
        public Builder conditions(Map<String,String> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        @CustomType.Setter
        public Builder displayExpression(String displayExpression) {
            this.displayExpression = Objects.requireNonNull(displayExpression);
            return this;
        }
        @CustomType.Setter
        public Builder evaluateRealtimeData(Boolean evaluateRealtimeData) {
            this.evaluateRealtimeData = Objects.requireNonNull(evaluateRealtimeData);
            return this;
        }
        @CustomType.Setter
        public Builder failingHostLabelPairs(List<GetAlertsAlertFailingHostLabelPair> failingHostLabelPairs) {
            this.failingHostLabelPairs = Objects.requireNonNull(failingHostLabelPairs);
            return this;
        }
        public Builder failingHostLabelPairs(GetAlertsAlertFailingHostLabelPair... failingHostLabelPairs) {
            return failingHostLabelPairs(List.of(failingHostLabelPairs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder inMaintenanceHostLabelPairs(List<GetAlertsAlertInMaintenanceHostLabelPair> inMaintenanceHostLabelPairs) {
            this.inMaintenanceHostLabelPairs = Objects.requireNonNull(inMaintenanceHostLabelPairs);
            return this;
        }
        public Builder inMaintenanceHostLabelPairs(GetAlertsAlertInMaintenanceHostLabelPair... inMaintenanceHostLabelPairs) {
            return inMaintenanceHostLabelPairs(List.of(inMaintenanceHostLabelPairs));
        }
        @CustomType.Setter
        public Builder includeObsoleteMetrics(Boolean includeObsoleteMetrics) {
            this.includeObsoleteMetrics = Objects.requireNonNull(includeObsoleteMetrics);
            return this;
        }
        @CustomType.Setter
        public Builder minutes(Integer minutes) {
            this.minutes = Objects.requireNonNull(minutes);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder notificationResendFrequencyMinutes(Integer notificationResendFrequencyMinutes) {
            this.notificationResendFrequencyMinutes = Objects.requireNonNull(notificationResendFrequencyMinutes);
            return this;
        }
        @CustomType.Setter
        public Builder processRateMinutes(Integer processRateMinutes) {
            this.processRateMinutes = Objects.requireNonNull(processRateMinutes);
            return this;
        }
        @CustomType.Setter
        public Builder resolveAfterMinutes(Integer resolveAfterMinutes) {
            this.resolveAfterMinutes = Objects.requireNonNull(resolveAfterMinutes);
            return this;
        }
        @CustomType.Setter
        public Builder severity(String severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }
        @CustomType.Setter
        public Builder severityLists(List<String> severityLists) {
            this.severityLists = Objects.requireNonNull(severityLists);
            return this;
        }
        public Builder severityLists(String... severityLists) {
            return severityLists(List.of(severityLists));
        }
        @CustomType.Setter
        public Builder statuses(List<String> statuses) {
            this.statuses = Objects.requireNonNull(statuses);
            return this;
        }
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        @CustomType.Setter
        public Builder targets(@Nullable Map<String,String> targets) {
            this.targets = targets;
            return this;
        }
        public GetAlertsAlert build() {
            final var o = new GetAlertsAlert();
            o.additionalInformation = additionalInformation;
            o.alertType = alertType;
            o.canModifies = canModifies;
            o.canViews = canViews;
            o.condition = condition;
            o.conditions = conditions;
            o.displayExpression = displayExpression;
            o.evaluateRealtimeData = evaluateRealtimeData;
            o.failingHostLabelPairs = failingHostLabelPairs;
            o.id = id;
            o.inMaintenanceHostLabelPairs = inMaintenanceHostLabelPairs;
            o.includeObsoleteMetrics = includeObsoleteMetrics;
            o.minutes = minutes;
            o.name = name;
            o.notificationResendFrequencyMinutes = notificationResendFrequencyMinutes;
            o.processRateMinutes = processRateMinutes;
            o.resolveAfterMinutes = resolveAfterMinutes;
            o.severity = severity;
            o.severityLists = severityLists;
            o.statuses = statuses;
            o.tags = tags;
            o.target = target;
            o.targets = targets;
            return o;
        }
    }
}
