// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.wavefront.inputs.IngestionPolicyTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IngestionPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final IngestionPolicyState Empty = new IngestionPolicyState();

    @Import(name="accounts")
    private @Nullable Output<List<String>> accounts;

    public Optional<Output<List<String>>> accounts() {
        return Optional.ofNullable(this.accounts);
    }

    /**
     * The description of the ingestion policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the ingestion policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="groups")
    private @Nullable Output<List<String>> groups;

    public Optional<Output<List<String>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * The name of the ingestion policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the ingestion policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="namespaces")
    private @Nullable Output<List<String>> namespaces;

    public Optional<Output<List<String>>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    @Import(name="scope")
    private @Nullable Output<String> scope;

    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    @Import(name="sources")
    private @Nullable Output<List<String>> sources;

    public Optional<Output<List<String>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    @Import(name="tags")
    private @Nullable Output<List<IngestionPolicyTagArgs>> tags;

    public Optional<Output<List<IngestionPolicyTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private IngestionPolicyState() {}

    private IngestionPolicyState(IngestionPolicyState $) {
        this.accounts = $.accounts;
        this.description = $.description;
        this.groups = $.groups;
        this.name = $.name;
        this.namespaces = $.namespaces;
        this.scope = $.scope;
        this.sources = $.sources;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngestionPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngestionPolicyState $;

        public Builder() {
            $ = new IngestionPolicyState();
        }

        public Builder(IngestionPolicyState defaults) {
            $ = new IngestionPolicyState(Objects.requireNonNull(defaults));
        }

        public Builder accounts(@Nullable Output<List<String>> accounts) {
            $.accounts = accounts;
            return this;
        }

        public Builder accounts(List<String> accounts) {
            return accounts(Output.of(accounts));
        }

        public Builder accounts(String... accounts) {
            return accounts(List.of(accounts));
        }

        /**
         * @param description The description of the ingestion policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the ingestion policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder groups(@Nullable Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param name The name of the ingestion policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the ingestion policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namespaces(@Nullable Output<List<String>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        public Builder namespaces(List<String> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public Builder sources(@Nullable Output<List<String>> sources) {
            $.sources = sources;
            return this;
        }

        public Builder sources(List<String> sources) {
            return sources(Output.of(sources));
        }

        public Builder sources(String... sources) {
            return sources(List.of(sources));
        }

        public Builder tags(@Nullable Output<List<IngestionPolicyTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<IngestionPolicyTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(IngestionPolicyTagArgs... tags) {
            return tags(List.of(tags));
        }

        public IngestionPolicyState build() {
            return $;
        }
    }

}
