// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.wavefront.inputs.AlertTargetRouteArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertTargetArgs Empty = new AlertTargetArgs();

    /**
     * The value of the `Content-Type` header of the webhook.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return The value of the `Content-Type` header of the webhook.
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * A `string-&gt;string` map specifying the custom HTTP header key/value pairs that will be
     * sent in the requests with a method of `WEBHOOK`.
     * 
     */
    @Import(name="customHeaders")
    private @Nullable Output<Map<String,String>> customHeaders;

    /**
     * @return A `string-&gt;string` map specifying the custom HTTP header key/value pairs that will be
     * sent in the requests with a method of `WEBHOOK`.
     * 
     */
    public Optional<Output<Map<String,String>>> customHeaders() {
        return Optional.ofNullable(this.customHeaders);
    }

    /**
     * Description describing this alert target.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description describing this alert target.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The subject title of an email notification target.
     * 
     */
    @Import(name="emailSubject")
    private @Nullable Output<String> emailSubject;

    /**
     * @return The subject title of an email notification target.
     * 
     */
    public Optional<Output<String>> emailSubject() {
        return Optional.ofNullable(this.emailSubject);
    }

    /**
     * Determine whether the email alert content is sent as HTML or text.
     * 
     */
    @Import(name="isHtmlContent")
    private @Nullable Output<Boolean> isHtmlContent;

    /**
     * @return Determine whether the email alert content is sent as HTML or text.
     * 
     */
    public Optional<Output<Boolean>> isHtmlContent() {
        return Optional.ofNullable(this.isHtmlContent);
    }

    /**
     * The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * The name of the alert target as it is displayed in Wavefront.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the alert target as it is displayed in Wavefront.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
     * routing key. `WEBHOOK`: URL endpoint.
     * 
     */
    @Import(name="recipient", required=true)
    private Output<String> recipient;

    /**
     * @return The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
     * routing key. `WEBHOOK`: URL endpoint.
     * 
     */
    public Output<String> recipient() {
        return this.recipient;
    }

    /**
     * List of routing targets that this alert target will notify. See Route
     * 
     */
    @Import(name="routes")
    private @Nullable Output<List<AlertTargetRouteArgs>> routes;

    /**
     * @return List of routing targets that this alert target will notify. See Route
     * 
     */
    public Optional<Output<List<AlertTargetRouteArgs>>> routes() {
        return Optional.ofNullable(this.routes);
    }

    /**
     * A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
     * 
     */
    @Import(name="template", required=true)
    private Output<String> template;

    /**
     * @return A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
     * 
     */
    public Output<String> template() {
        return this.template;
    }

    /**
     * A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
     * `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
     * 
     */
    @Import(name="triggers", required=true)
    private Output<List<String>> triggers;

    /**
     * @return A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
     * `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
     * 
     */
    public Output<List<String>> triggers() {
        return this.triggers;
    }

    private AlertTargetArgs() {}

    private AlertTargetArgs(AlertTargetArgs $) {
        this.contentType = $.contentType;
        this.customHeaders = $.customHeaders;
        this.description = $.description;
        this.emailSubject = $.emailSubject;
        this.isHtmlContent = $.isHtmlContent;
        this.method = $.method;
        this.name = $.name;
        this.recipient = $.recipient;
        this.routes = $.routes;
        this.template = $.template;
        this.triggers = $.triggers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertTargetArgs $;

        public Builder() {
            $ = new AlertTargetArgs();
        }

        public Builder(AlertTargetArgs defaults) {
            $ = new AlertTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentType The value of the `Content-Type` header of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The value of the `Content-Type` header of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param customHeaders A `string-&gt;string` map specifying the custom HTTP header key/value pairs that will be
         * sent in the requests with a method of `WEBHOOK`.
         * 
         * @return builder
         * 
         */
        public Builder customHeaders(@Nullable Output<Map<String,String>> customHeaders) {
            $.customHeaders = customHeaders;
            return this;
        }

        /**
         * @param customHeaders A `string-&gt;string` map specifying the custom HTTP header key/value pairs that will be
         * sent in the requests with a method of `WEBHOOK`.
         * 
         * @return builder
         * 
         */
        public Builder customHeaders(Map<String,String> customHeaders) {
            return customHeaders(Output.of(customHeaders));
        }

        /**
         * @param description Description describing this alert target.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description describing this alert target.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param emailSubject The subject title of an email notification target.
         * 
         * @return builder
         * 
         */
        public Builder emailSubject(@Nullable Output<String> emailSubject) {
            $.emailSubject = emailSubject;
            return this;
        }

        /**
         * @param emailSubject The subject title of an email notification target.
         * 
         * @return builder
         * 
         */
        public Builder emailSubject(String emailSubject) {
            return emailSubject(Output.of(emailSubject));
        }

        /**
         * @param isHtmlContent Determine whether the email alert content is sent as HTML or text.
         * 
         * @return builder
         * 
         */
        public Builder isHtmlContent(@Nullable Output<Boolean> isHtmlContent) {
            $.isHtmlContent = isHtmlContent;
            return this;
        }

        /**
         * @param isHtmlContent Determine whether the email alert content is sent as HTML or text.
         * 
         * @return builder
         * 
         */
        public Builder isHtmlContent(Boolean isHtmlContent) {
            return isHtmlContent(Output.of(isHtmlContent));
        }

        /**
         * @param method The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param name The name of the alert target as it is displayed in Wavefront.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the alert target as it is displayed in Wavefront.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recipient The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
         * routing key. `WEBHOOK`: URL endpoint.
         * 
         * @return builder
         * 
         */
        public Builder recipient(Output<String> recipient) {
            $.recipient = recipient;
            return this;
        }

        /**
         * @param recipient The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty
         * routing key. `WEBHOOK`: URL endpoint.
         * 
         * @return builder
         * 
         */
        public Builder recipient(String recipient) {
            return recipient(Output.of(recipient));
        }

        /**
         * @param routes List of routing targets that this alert target will notify. See Route
         * 
         * @return builder
         * 
         */
        public Builder routes(@Nullable Output<List<AlertTargetRouteArgs>> routes) {
            $.routes = routes;
            return this;
        }

        /**
         * @param routes List of routing targets that this alert target will notify. See Route
         * 
         * @return builder
         * 
         */
        public Builder routes(List<AlertTargetRouteArgs> routes) {
            return routes(Output.of(routes));
        }

        /**
         * @param routes List of routing targets that this alert target will notify. See Route
         * 
         * @return builder
         * 
         */
        public Builder routes(AlertTargetRouteArgs... routes) {
            return routes(List.of(routes));
        }

        /**
         * @param template A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
         * 
         * @return builder
         * 
         */
        public Builder template(Output<String> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template A mustache template that will form the body of the POST request, email, and summary of the PagerDuty.
         * 
         * @return builder
         * 
         */
        public Builder template(String template) {
            return template(Output.of(template));
        }

        /**
         * @param triggers A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
         * `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Output<List<String>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
         * `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
         * 
         * @return builder
         * 
         */
        public Builder triggers(List<String> triggers) {
            return triggers(Output.of(triggers));
        }

        /**
         * @param triggers A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,
         * `ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.
         * 
         * @return builder
         * 
         */
        public Builder triggers(String... triggers) {
            return triggers(List.of(triggers));
        }

        public AlertTargetArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("AlertTargetArgs", "description");
            }
            if ($.recipient == null) {
                throw new MissingRequiredPropertyException("AlertTargetArgs", "recipient");
            }
            if ($.template == null) {
                throw new MissingRequiredPropertyException("AlertTargetArgs", "template");
            }
            if ($.triggers == null) {
                throw new MissingRequiredPropertyException("AlertTargetArgs", "triggers");
            }
            return $;
        }
    }

}
