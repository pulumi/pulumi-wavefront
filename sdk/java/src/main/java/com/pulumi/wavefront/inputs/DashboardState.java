// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.wavefront.inputs.DashboardParameterDetailArgs;
import com.pulumi.wavefront.inputs.DashboardSectionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardState extends com.pulumi.resources.ResourceArgs {

    public static final DashboardState Empty = new DashboardState();

    /**
     * A list of users/groups/roles that can modify the dashboard.
     * 
     */
    @Import(name="canModifies")
    private @Nullable Output<List<String>> canModifies;

    /**
     * @return A list of users/groups/roles that can modify the dashboard.
     * 
     */
    public Optional<Output<List<String>>> canModifies() {
        return Optional.ofNullable(this.canModifies);
    }

    /**
     * A list of users/groups/roles that can view the dashboard.
     * 
     */
    @Import(name="canViews")
    private @Nullable Output<List<String>> canViews;

    /**
     * @return A list of users/groups/roles that can view the dashboard.
     * 
     */
    public Optional<Output<List<String>>> canViews() {
        return Optional.ofNullable(this.canViews);
    }

    /**
     * Human-readable description of the dashboard.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-readable description of the dashboard.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the dashboard parameters section is opened by default when the dashboard
     * is shown.
     * 
     */
    @Import(name="displayQueryParameters")
    private @Nullable Output<Boolean> displayQueryParameters;

    /**
     * @return Whether the dashboard parameters section is opened by default when the dashboard
     * is shown.
     * 
     */
    public Optional<Output<Boolean>> displayQueryParameters() {
        return Optional.ofNullable(this.displayQueryParameters);
    }

    /**
     * Whether the &#34;pills&#34; quick-linked the sections of the dashboard are
     * displayed by default when the dashboard is shown.
     * 
     */
    @Import(name="displaySectionTableOfContents")
    private @Nullable Output<Boolean> displaySectionTableOfContents;

    /**
     * @return Whether the &#34;pills&#34; quick-linked the sections of the dashboard are
     * displayed by default when the dashboard is shown.
     * 
     */
    public Optional<Output<Boolean>> displaySectionTableOfContents() {
        return Optional.ofNullable(this.displaySectionTableOfContents);
    }

    /**
     * How charts belonging to this dashboard should display events. `BYCHART` is default if
     * unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
     * 
     */
    @Import(name="eventFilterType")
    private @Nullable Output<String> eventFilterType;

    /**
     * @return How charts belonging to this dashboard should display events. `BYCHART` is default if
     * unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
     * 
     */
    public Optional<Output<String>> eventFilterType() {
        return Optional.ofNullable(this.eventFilterType);
    }

    /**
     * Name of the dashboard.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the dashboard.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The current JSON representation of dashboard parameters. See parameter details.
     * 
     */
    @Import(name="parameterDetails")
    private @Nullable Output<List<DashboardParameterDetailArgs>> parameterDetails;

    /**
     * @return The current JSON representation of dashboard parameters. See parameter details.
     * 
     */
    public Optional<Output<List<DashboardParameterDetailArgs>>> parameterDetails() {
        return Optional.ofNullable(this.parameterDetails);
    }

    /**
     * Dashboard chart sections. See dashboard sections.
     * 
     */
    @Import(name="sections")
    private @Nullable Output<List<DashboardSectionArgs>> sections;

    /**
     * @return Dashboard chart sections. See dashboard sections.
     * 
     */
    public Optional<Output<List<DashboardSectionArgs>>> sections() {
        return Optional.ofNullable(this.sections);
    }

    /**
     * A set of tags to assign to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A set of tags to assign to this resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Unique identifier, also a URL slug of the dashboard.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return Unique identifier, also a URL slug of the dashboard.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private DashboardState() {}

    private DashboardState(DashboardState $) {
        this.canModifies = $.canModifies;
        this.canViews = $.canViews;
        this.description = $.description;
        this.displayQueryParameters = $.displayQueryParameters;
        this.displaySectionTableOfContents = $.displaySectionTableOfContents;
        this.eventFilterType = $.eventFilterType;
        this.name = $.name;
        this.parameterDetails = $.parameterDetails;
        this.sections = $.sections;
        this.tags = $.tags;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardState $;

        public Builder() {
            $ = new DashboardState();
        }

        public Builder(DashboardState defaults) {
            $ = new DashboardState(Objects.requireNonNull(defaults));
        }

        /**
         * @param canModifies A list of users/groups/roles that can modify the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder canModifies(@Nullable Output<List<String>> canModifies) {
            $.canModifies = canModifies;
            return this;
        }

        /**
         * @param canModifies A list of users/groups/roles that can modify the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder canModifies(List<String> canModifies) {
            return canModifies(Output.of(canModifies));
        }

        /**
         * @param canModifies A list of users/groups/roles that can modify the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder canModifies(String... canModifies) {
            return canModifies(List.of(canModifies));
        }

        /**
         * @param canViews A list of users/groups/roles that can view the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder canViews(@Nullable Output<List<String>> canViews) {
            $.canViews = canViews;
            return this;
        }

        /**
         * @param canViews A list of users/groups/roles that can view the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder canViews(List<String> canViews) {
            return canViews(Output.of(canViews));
        }

        /**
         * @param canViews A list of users/groups/roles that can view the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder canViews(String... canViews) {
            return canViews(List.of(canViews));
        }

        /**
         * @param description Human-readable description of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-readable description of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayQueryParameters Whether the dashboard parameters section is opened by default when the dashboard
         * is shown.
         * 
         * @return builder
         * 
         */
        public Builder displayQueryParameters(@Nullable Output<Boolean> displayQueryParameters) {
            $.displayQueryParameters = displayQueryParameters;
            return this;
        }

        /**
         * @param displayQueryParameters Whether the dashboard parameters section is opened by default when the dashboard
         * is shown.
         * 
         * @return builder
         * 
         */
        public Builder displayQueryParameters(Boolean displayQueryParameters) {
            return displayQueryParameters(Output.of(displayQueryParameters));
        }

        /**
         * @param displaySectionTableOfContents Whether the &#34;pills&#34; quick-linked the sections of the dashboard are
         * displayed by default when the dashboard is shown.
         * 
         * @return builder
         * 
         */
        public Builder displaySectionTableOfContents(@Nullable Output<Boolean> displaySectionTableOfContents) {
            $.displaySectionTableOfContents = displaySectionTableOfContents;
            return this;
        }

        /**
         * @param displaySectionTableOfContents Whether the &#34;pills&#34; quick-linked the sections of the dashboard are
         * displayed by default when the dashboard is shown.
         * 
         * @return builder
         * 
         */
        public Builder displaySectionTableOfContents(Boolean displaySectionTableOfContents) {
            return displaySectionTableOfContents(Output.of(displaySectionTableOfContents));
        }

        /**
         * @param eventFilterType How charts belonging to this dashboard should display events. `BYCHART` is default if
         * unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
         * 
         * @return builder
         * 
         */
        public Builder eventFilterType(@Nullable Output<String> eventFilterType) {
            $.eventFilterType = eventFilterType;
            return this;
        }

        /**
         * @param eventFilterType How charts belonging to this dashboard should display events. `BYCHART` is default if
         * unspecified. Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`.
         * 
         * @return builder
         * 
         */
        public Builder eventFilterType(String eventFilterType) {
            return eventFilterType(Output.of(eventFilterType));
        }

        /**
         * @param name Name of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parameterDetails The current JSON representation of dashboard parameters. See parameter details.
         * 
         * @return builder
         * 
         */
        public Builder parameterDetails(@Nullable Output<List<DashboardParameterDetailArgs>> parameterDetails) {
            $.parameterDetails = parameterDetails;
            return this;
        }

        /**
         * @param parameterDetails The current JSON representation of dashboard parameters. See parameter details.
         * 
         * @return builder
         * 
         */
        public Builder parameterDetails(List<DashboardParameterDetailArgs> parameterDetails) {
            return parameterDetails(Output.of(parameterDetails));
        }

        /**
         * @param parameterDetails The current JSON representation of dashboard parameters. See parameter details.
         * 
         * @return builder
         * 
         */
        public Builder parameterDetails(DashboardParameterDetailArgs... parameterDetails) {
            return parameterDetails(List.of(parameterDetails));
        }

        /**
         * @param sections Dashboard chart sections. See dashboard sections.
         * 
         * @return builder
         * 
         */
        public Builder sections(@Nullable Output<List<DashboardSectionArgs>> sections) {
            $.sections = sections;
            return this;
        }

        /**
         * @param sections Dashboard chart sections. See dashboard sections.
         * 
         * @return builder
         * 
         */
        public Builder sections(List<DashboardSectionArgs> sections) {
            return sections(Output.of(sections));
        }

        /**
         * @param sections Dashboard chart sections. See dashboard sections.
         * 
         * @return builder
         * 
         */
        public Builder sections(DashboardSectionArgs... sections) {
            return sections(List.of(sections));
        }

        /**
         * @param tags A set of tags to assign to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A set of tags to assign to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A set of tags to assign to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param url Unique identifier, also a URL slug of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url Unique identifier, also a URL slug of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public DashboardState build() {
            return $;
        }
    }

}
