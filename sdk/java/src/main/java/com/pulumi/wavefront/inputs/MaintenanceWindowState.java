// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaintenanceWindowState extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceWindowState Empty = new MaintenanceWindowState();

    /**
     * end time in seconds after 1 Jan 1970 GMT.
     * 
     */
    @Import(name="endTimeInSeconds")
    private @Nullable Output<Integer> endTimeInSeconds;

    /**
     * @return end time in seconds after 1 Jan 1970 GMT.
     * 
     */
    public Optional<Output<Integer>> endTimeInSeconds() {
        return Optional.ofNullable(this.endTimeInSeconds);
    }

    /**
     * If `true`, a source/host must be in `relevant_host_names`
     * and have tags matching the specification formed by `relevant_host_tags` and `relevant_host_tags_anded` in
     * order for this maintenance window to apply. If `false`, a source/host must either be in `relevant_host_names`
     * or match `relevant_host_tags` and `relevant_host_tags_anded`. Default: `false`.
     * 
     */
    @Import(name="hostTagGroupHostNamesGroupAnded")
    private @Nullable Output<Boolean> hostTagGroupHostNamesGroupAnded;

    /**
     * @return If `true`, a source/host must be in `relevant_host_names`
     * and have tags matching the specification formed by `relevant_host_tags` and `relevant_host_tags_anded` in
     * order for this maintenance window to apply. If `false`, a source/host must either be in `relevant_host_names`
     * or match `relevant_host_tags` and `relevant_host_tags_anded`. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> hostTagGroupHostNamesGroupAnded() {
        return Optional.ofNullable(this.hostTagGroupHostNamesGroupAnded);
    }

    /**
     * The reason for the maintenance window.
     * 
     */
    @Import(name="reason")
    private @Nullable Output<String> reason;

    /**
     * @return The reason for the maintenance window.
     * 
     */
    public Optional<Output<String>> reason() {
        return Optional.ofNullable(this.reason);
    }

    /**
     * List of alert tags whose matching alerts will be put into maintenance because
     * of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
     * is required.
     * 
     */
    @Import(name="relevantCustomerTags")
    private @Nullable Output<List<String>> relevantCustomerTags;

    /**
     * @return List of alert tags whose matching alerts will be put into maintenance because
     * of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
     * is required.
     * 
     */
    public Optional<Output<List<String>>> relevantCustomerTags() {
        return Optional.ofNullable(this.relevantCustomerTags);
    }

    /**
     * List of source/host names that will be put into maintenance because of this
     * maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
     * is required.
     * 
     */
    @Import(name="relevantHostNames")
    private @Nullable Output<List<String>> relevantHostNames;

    /**
     * @return List of source/host names that will be put into maintenance because of this
     * maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
     * is required.
     * 
     */
    public Optional<Output<List<String>>> relevantHostNames() {
        return Optional.ofNullable(this.relevantHostNames);
    }

    /**
     * List of source/host tags whose matching sources/hosts will be put into maintenance
     * because of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or
     * `relevant_host_names` is required.
     * 
     */
    @Import(name="relevantHostTags")
    private @Nullable Output<List<String>> relevantHostTags;

    /**
     * @return List of source/host tags whose matching sources/hosts will be put into maintenance
     * because of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or
     * `relevant_host_names` is required.
     * 
     */
    public Optional<Output<List<String>>> relevantHostTags() {
        return Optional.ofNullable(this.relevantHostTags);
    }

    /**
     * Whether to AND source/host tags listed in `relevant_host_tags`.
     * If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
     * the tags are OR&#39;ed, and a source/host must contain one of the tags. Default: `false`.
     * 
     */
    @Import(name="relevantHostTagsAnded")
    private @Nullable Output<Boolean> relevantHostTagsAnded;

    /**
     * @return Whether to AND source/host tags listed in `relevant_host_tags`.
     * If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
     * the tags are OR&#39;ed, and a source/host must contain one of the tags. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> relevantHostTagsAnded() {
        return Optional.ofNullable(this.relevantHostTagsAnded);
    }

    /**
     * start time in seconds after 1 Jan 1970 GMT.
     * 
     */
    @Import(name="startTimeInSeconds")
    private @Nullable Output<Integer> startTimeInSeconds;

    /**
     * @return start time in seconds after 1 Jan 1970 GMT.
     * 
     */
    public Optional<Output<Integer>> startTimeInSeconds() {
        return Optional.ofNullable(this.startTimeInSeconds);
    }

    /**
     * The title of the maintenance window.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the maintenance window.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private MaintenanceWindowState() {}

    private MaintenanceWindowState(MaintenanceWindowState $) {
        this.endTimeInSeconds = $.endTimeInSeconds;
        this.hostTagGroupHostNamesGroupAnded = $.hostTagGroupHostNamesGroupAnded;
        this.reason = $.reason;
        this.relevantCustomerTags = $.relevantCustomerTags;
        this.relevantHostNames = $.relevantHostNames;
        this.relevantHostTags = $.relevantHostTags;
        this.relevantHostTagsAnded = $.relevantHostTagsAnded;
        this.startTimeInSeconds = $.startTimeInSeconds;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceWindowState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceWindowState $;

        public Builder() {
            $ = new MaintenanceWindowState();
        }

        public Builder(MaintenanceWindowState defaults) {
            $ = new MaintenanceWindowState(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTimeInSeconds end time in seconds after 1 Jan 1970 GMT.
         * 
         * @return builder
         * 
         */
        public Builder endTimeInSeconds(@Nullable Output<Integer> endTimeInSeconds) {
            $.endTimeInSeconds = endTimeInSeconds;
            return this;
        }

        /**
         * @param endTimeInSeconds end time in seconds after 1 Jan 1970 GMT.
         * 
         * @return builder
         * 
         */
        public Builder endTimeInSeconds(Integer endTimeInSeconds) {
            return endTimeInSeconds(Output.of(endTimeInSeconds));
        }

        /**
         * @param hostTagGroupHostNamesGroupAnded If `true`, a source/host must be in `relevant_host_names`
         * and have tags matching the specification formed by `relevant_host_tags` and `relevant_host_tags_anded` in
         * order for this maintenance window to apply. If `false`, a source/host must either be in `relevant_host_names`
         * or match `relevant_host_tags` and `relevant_host_tags_anded`. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder hostTagGroupHostNamesGroupAnded(@Nullable Output<Boolean> hostTagGroupHostNamesGroupAnded) {
            $.hostTagGroupHostNamesGroupAnded = hostTagGroupHostNamesGroupAnded;
            return this;
        }

        /**
         * @param hostTagGroupHostNamesGroupAnded If `true`, a source/host must be in `relevant_host_names`
         * and have tags matching the specification formed by `relevant_host_tags` and `relevant_host_tags_anded` in
         * order for this maintenance window to apply. If `false`, a source/host must either be in `relevant_host_names`
         * or match `relevant_host_tags` and `relevant_host_tags_anded`. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder hostTagGroupHostNamesGroupAnded(Boolean hostTagGroupHostNamesGroupAnded) {
            return hostTagGroupHostNamesGroupAnded(Output.of(hostTagGroupHostNamesGroupAnded));
        }

        /**
         * @param reason The reason for the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder reason(@Nullable Output<String> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason The reason for the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        /**
         * @param relevantCustomerTags List of alert tags whose matching alerts will be put into maintenance because
         * of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
         * is required.
         * 
         * @return builder
         * 
         */
        public Builder relevantCustomerTags(@Nullable Output<List<String>> relevantCustomerTags) {
            $.relevantCustomerTags = relevantCustomerTags;
            return this;
        }

        /**
         * @param relevantCustomerTags List of alert tags whose matching alerts will be put into maintenance because
         * of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
         * is required.
         * 
         * @return builder
         * 
         */
        public Builder relevantCustomerTags(List<String> relevantCustomerTags) {
            return relevantCustomerTags(Output.of(relevantCustomerTags));
        }

        /**
         * @param relevantCustomerTags List of alert tags whose matching alerts will be put into maintenance because
         * of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
         * is required.
         * 
         * @return builder
         * 
         */
        public Builder relevantCustomerTags(String... relevantCustomerTags) {
            return relevantCustomerTags(List.of(relevantCustomerTags));
        }

        /**
         * @param relevantHostNames List of source/host names that will be put into maintenance because of this
         * maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
         * is required.
         * 
         * @return builder
         * 
         */
        public Builder relevantHostNames(@Nullable Output<List<String>> relevantHostNames) {
            $.relevantHostNames = relevantHostNames;
            return this;
        }

        /**
         * @param relevantHostNames List of source/host names that will be put into maintenance because of this
         * maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
         * is required.
         * 
         * @return builder
         * 
         */
        public Builder relevantHostNames(List<String> relevantHostNames) {
            return relevantHostNames(Output.of(relevantHostNames));
        }

        /**
         * @param relevantHostNames List of source/host names that will be put into maintenance because of this
         * maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or `relevant_host_names`
         * is required.
         * 
         * @return builder
         * 
         */
        public Builder relevantHostNames(String... relevantHostNames) {
            return relevantHostNames(List.of(relevantHostNames));
        }

        /**
         * @param relevantHostTags List of source/host tags whose matching sources/hosts will be put into maintenance
         * because of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or
         * `relevant_host_names` is required.
         * 
         * @return builder
         * 
         */
        public Builder relevantHostTags(@Nullable Output<List<String>> relevantHostTags) {
            $.relevantHostTags = relevantHostTags;
            return this;
        }

        /**
         * @param relevantHostTags List of source/host tags whose matching sources/hosts will be put into maintenance
         * because of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or
         * `relevant_host_names` is required.
         * 
         * @return builder
         * 
         */
        public Builder relevantHostTags(List<String> relevantHostTags) {
            return relevantHostTags(Output.of(relevantHostTags));
        }

        /**
         * @param relevantHostTags List of source/host tags whose matching sources/hosts will be put into maintenance
         * because of this maintenance window. At least one of `relevant_customer_tags`, `relevant_host_tags`, or
         * `relevant_host_names` is required.
         * 
         * @return builder
         * 
         */
        public Builder relevantHostTags(String... relevantHostTags) {
            return relevantHostTags(List.of(relevantHostTags));
        }

        /**
         * @param relevantHostTagsAnded Whether to AND source/host tags listed in `relevant_host_tags`.
         * If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
         * the tags are OR&#39;ed, and a source/host must contain one of the tags. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder relevantHostTagsAnded(@Nullable Output<Boolean> relevantHostTagsAnded) {
            $.relevantHostTagsAnded = relevantHostTagsAnded;
            return this;
        }

        /**
         * @param relevantHostTagsAnded Whether to AND source/host tags listed in `relevant_host_tags`.
         * If `true`, a source/host must contain all tags in order for the maintenance window to apply. If `false`,
         * the tags are OR&#39;ed, and a source/host must contain one of the tags. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder relevantHostTagsAnded(Boolean relevantHostTagsAnded) {
            return relevantHostTagsAnded(Output.of(relevantHostTagsAnded));
        }

        /**
         * @param startTimeInSeconds start time in seconds after 1 Jan 1970 GMT.
         * 
         * @return builder
         * 
         */
        public Builder startTimeInSeconds(@Nullable Output<Integer> startTimeInSeconds) {
            $.startTimeInSeconds = startTimeInSeconds;
            return this;
        }

        /**
         * @param startTimeInSeconds start time in seconds after 1 Jan 1970 GMT.
         * 
         * @return builder
         * 
         */
        public Builder startTimeInSeconds(Integer startTimeInSeconds) {
            return startTimeInSeconds(Output.of(startTimeInSeconds));
        }

        /**
         * @param title The title of the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public MaintenanceWindowState build() {
            return $;
        }
    }

}
