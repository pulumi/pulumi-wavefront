// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEventsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEventsPlainArgs Empty = new GetEventsPlainArgs();

    /**
     * The earliest start time in epoch milliseconds.
     * 
     */
    @Import(name="earliestStartTimeEpochMillis", required=true)
    private Integer earliestStartTimeEpochMillis;

    /**
     * @return The earliest start time in epoch milliseconds.
     * 
     */
    public Integer earliestStartTimeEpochMillis() {
        return this.earliestStartTimeEpochMillis;
    }

    /**
     * The latest start time in epoch milliseconds.
     * 
     */
    @Import(name="latestStartTimeEpochMillis", required=true)
    private Integer latestStartTimeEpochMillis;

    /**
     * @return The latest start time in epoch milliseconds.
     * 
     */
    public Integer latestStartTimeEpochMillis() {
        return this.latestStartTimeEpochMillis;
    }

    /**
     * Limit is the maximum number of results to be returned. Defaults to 100.
     * 
     */
    @Import(name="limit")
    private @Nullable Integer limit;

    /**
     * @return Limit is the maximum number of results to be returned. Defaults to 100.
     * 
     */
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * Offset is the offset from the first result to be returned. Defaults to 0.
     * 
     */
    @Import(name="offset")
    private @Nullable Integer offset;

    /**
     * @return Offset is the offset from the first result to be returned. Defaults to 0.
     * 
     */
    public Optional<Integer> offset() {
        return Optional.ofNullable(this.offset);
    }

    private GetEventsPlainArgs() {}

    private GetEventsPlainArgs(GetEventsPlainArgs $) {
        this.earliestStartTimeEpochMillis = $.earliestStartTimeEpochMillis;
        this.latestStartTimeEpochMillis = $.latestStartTimeEpochMillis;
        this.limit = $.limit;
        this.offset = $.offset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEventsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEventsPlainArgs $;

        public Builder() {
            $ = new GetEventsPlainArgs();
        }

        public Builder(GetEventsPlainArgs defaults) {
            $ = new GetEventsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param earliestStartTimeEpochMillis The earliest start time in epoch milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder earliestStartTimeEpochMillis(Integer earliestStartTimeEpochMillis) {
            $.earliestStartTimeEpochMillis = earliestStartTimeEpochMillis;
            return this;
        }

        /**
         * @param latestStartTimeEpochMillis The latest start time in epoch milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder latestStartTimeEpochMillis(Integer latestStartTimeEpochMillis) {
            $.latestStartTimeEpochMillis = latestStartTimeEpochMillis;
            return this;
        }

        /**
         * @param limit Limit is the maximum number of results to be returned. Defaults to 100.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Integer limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param offset Offset is the offset from the first result to be returned. Defaults to 0.
         * 
         * @return builder
         * 
         */
        public Builder offset(@Nullable Integer offset) {
            $.offset = offset;
            return this;
        }

        public GetEventsPlainArgs build() {
            if ($.earliestStartTimeEpochMillis == null) {
                throw new MissingRequiredPropertyException("GetEventsPlainArgs", "earliestStartTimeEpochMillis");
            }
            if ($.latestStartTimeEpochMillis == null) {
                throw new MissingRequiredPropertyException("GetEventsPlainArgs", "latestStartTimeEpochMillis");
            }
            return $;
        }
    }

}
