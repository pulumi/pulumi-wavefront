// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.wavefront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardParameterDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardParameterDetailArgs Empty = new DashboardParameterDetailArgs();

    /**
     * The default value of the parameter.
     * 
     */
    @Import(name="defaultValue", required=true)
    private Output<String> defaultValue;

    /**
     * @return The default value of the parameter.
     * 
     */
    public Output<String> defaultValue() {
        return this.defaultValue;
    }

    /**
     * For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
     * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
     * 
     */
    @Import(name="dynamicFieldType")
    private @Nullable Output<String> dynamicFieldType;

    /**
     * @return For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
     * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
     * 
     */
    public Optional<Output<String>> dynamicFieldType() {
        return Optional.ofNullable(this.dynamicFieldType);
    }

    /**
     * If `true` the parameter will only be shown on the edit view of the dashboard.
     * 
     */
    @Import(name="hideFromView", required=true)
    private Output<Boolean> hideFromView;

    /**
     * @return If `true` the parameter will only be shown on the edit view of the dashboard.
     * 
     */
    public Output<Boolean> hideFromView() {
        return this.hideFromView;
    }

    /**
     * The label for the parameter.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The label for the parameter.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The name of the parameters.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the parameters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
     * 
     */
    @Import(name="parameterType", required=true)
    private Output<String> parameterType;

    /**
     * @return The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
     * 
     */
    public Output<String> parameterType() {
        return this.parameterType;
    }

    /**
     * For `DYNAMIC` parameter types, the query to execute to return values.
     * 
     */
    @Import(name="queryValue")
    private @Nullable Output<String> queryValue;

    /**
     * @return For `DYNAMIC` parameter types, the query to execute to return values.
     * 
     */
    public Optional<Output<String>> queryValue() {
        return Optional.ofNullable(this.queryValue);
    }

    /**
     * for `TAG_KEY` dynamic field types, the tag key to return.
     * 
     */
    @Import(name="tagKey")
    private @Nullable Output<String> tagKey;

    /**
     * @return for `TAG_KEY` dynamic field types, the tag key to return.
     * 
     */
    public Optional<Output<String>> tagKey() {
        return Optional.ofNullable(this.tagKey);
    }

    /**
     * A string-&gt;string map. At least one of the keys must match the value of
     * `defaultValue`.
     * 
     */
    @Import(name="valuesToReadableStrings", required=true)
    private Output<Map<String,String>> valuesToReadableStrings;

    /**
     * @return A string-&gt;string map. At least one of the keys must match the value of
     * `defaultValue`.
     * 
     */
    public Output<Map<String,String>> valuesToReadableStrings() {
        return this.valuesToReadableStrings;
    }

    private DashboardParameterDetailArgs() {}

    private DashboardParameterDetailArgs(DashboardParameterDetailArgs $) {
        this.defaultValue = $.defaultValue;
        this.dynamicFieldType = $.dynamicFieldType;
        this.hideFromView = $.hideFromView;
        this.label = $.label;
        this.name = $.name;
        this.parameterType = $.parameterType;
        this.queryValue = $.queryValue;
        this.tagKey = $.tagKey;
        this.valuesToReadableStrings = $.valuesToReadableStrings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardParameterDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardParameterDetailArgs $;

        public Builder() {
            $ = new DashboardParameterDetailArgs();
        }

        public Builder(DashboardParameterDetailArgs defaults) {
            $ = new DashboardParameterDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue The default value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue The default value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param dynamicFieldType For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
         * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicFieldType(@Nullable Output<String> dynamicFieldType) {
            $.dynamicFieldType = dynamicFieldType;
            return this;
        }

        /**
         * @param dynamicFieldType For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,
         * `SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, and `MATCHING_SOURCE_TAG`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicFieldType(String dynamicFieldType) {
            return dynamicFieldType(Output.of(dynamicFieldType));
        }

        /**
         * @param hideFromView If `true` the parameter will only be shown on the edit view of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder hideFromView(Output<Boolean> hideFromView) {
            $.hideFromView = hideFromView;
            return this;
        }

        /**
         * @param hideFromView If `true` the parameter will only be shown on the edit view of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder hideFromView(Boolean hideFromView) {
            return hideFromView(Output.of(hideFromView));
        }

        /**
         * @param label The label for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param name The name of the parameters.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the parameters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parameterType The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
         * 
         * @return builder
         * 
         */
        public Builder parameterType(Output<String> parameterType) {
            $.parameterType = parameterType;
            return this;
        }

        /**
         * @param parameterType The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`.
         * 
         * @return builder
         * 
         */
        public Builder parameterType(String parameterType) {
            return parameterType(Output.of(parameterType));
        }

        /**
         * @param queryValue For `DYNAMIC` parameter types, the query to execute to return values.
         * 
         * @return builder
         * 
         */
        public Builder queryValue(@Nullable Output<String> queryValue) {
            $.queryValue = queryValue;
            return this;
        }

        /**
         * @param queryValue For `DYNAMIC` parameter types, the query to execute to return values.
         * 
         * @return builder
         * 
         */
        public Builder queryValue(String queryValue) {
            return queryValue(Output.of(queryValue));
        }

        /**
         * @param tagKey for `TAG_KEY` dynamic field types, the tag key to return.
         * 
         * @return builder
         * 
         */
        public Builder tagKey(@Nullable Output<String> tagKey) {
            $.tagKey = tagKey;
            return this;
        }

        /**
         * @param tagKey for `TAG_KEY` dynamic field types, the tag key to return.
         * 
         * @return builder
         * 
         */
        public Builder tagKey(String tagKey) {
            return tagKey(Output.of(tagKey));
        }

        /**
         * @param valuesToReadableStrings A string-&gt;string map. At least one of the keys must match the value of
         * `defaultValue`.
         * 
         * @return builder
         * 
         */
        public Builder valuesToReadableStrings(Output<Map<String,String>> valuesToReadableStrings) {
            $.valuesToReadableStrings = valuesToReadableStrings;
            return this;
        }

        /**
         * @param valuesToReadableStrings A string-&gt;string map. At least one of the keys must match the value of
         * `defaultValue`.
         * 
         * @return builder
         * 
         */
        public Builder valuesToReadableStrings(Map<String,String> valuesToReadableStrings) {
            return valuesToReadableStrings(Output.of(valuesToReadableStrings));
        }

        public DashboardParameterDetailArgs build() {
            if ($.defaultValue == null) {
                throw new MissingRequiredPropertyException("DashboardParameterDetailArgs", "defaultValue");
            }
            if ($.hideFromView == null) {
                throw new MissingRequiredPropertyException("DashboardParameterDetailArgs", "hideFromView");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("DashboardParameterDetailArgs", "label");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DashboardParameterDetailArgs", "name");
            }
            if ($.parameterType == null) {
                throw new MissingRequiredPropertyException("DashboardParameterDetailArgs", "parameterType");
            }
            if ($.valuesToReadableStrings == null) {
                throw new MissingRequiredPropertyException("DashboardParameterDetailArgs", "valuesToReadableStrings");
            }
            return $;
        }
    }

}
