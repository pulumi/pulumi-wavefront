{
    "name": "wavefront",
    "description": "A Pulumi package for creating and managing wavefront cloud resources.",
    "keywords": [
        "pulumi",
        "wavefront"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`wavefront` Terraform Provider](https://github.com/vmware/terraform-provider-wavefront).",
    "repository": "https://github.com/pulumi/pulumi-wavefront",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "address": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "WAVEFRONT_ADDRESS"
                    ]
                }
            },
            "httpProxy": {
                "type": "string"
            },
            "token": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "WAVEFRONT_TOKEN"
                    ]
                }
            }
        },
        "defaults": [
            "address",
            "token"
        ]
    },
    "types": {
        "wavefront:index/AlertTargetRoute:AlertTargetRoute": {
            "properties": {
                "filter": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "method",
                "target"
            ]
        },
        "wavefront:index/CloudIntegrationNewRelicMetricFilter:CloudIntegrationNewRelicMetricFilter": {
            "properties": {
                "appName": {
                    "type": "string",
                    "description": "The name of a NewRelic App\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that a metric name must match (case-insensitively) in order to be ingested\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appName",
                "metricFilterRegex"
            ]
        },
        "wavefront:index/DashboardParameterDetail:DashboardParameterDetail": {
            "properties": {
                "defaultValue": {
                    "type": "string",
                    "description": "The default value of the parameter\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dynamicFieldType": {
                    "type": "string",
                    "description": "For `DYNAMIC` parameter types, the type of the field. Valid options are `SOURCE`,\n`SOURCE_TAG`, `METRIC_NAME`, `TAG_KEY`, `MATCHING_SOURCE_TAG`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hideFromView": {
                    "type": "boolean",
                    "description": "If `true` the parameter will only be shown on the edit view of the dashboard\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "The label for the parameter\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the parameters\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterType": {
                    "type": "string",
                    "description": "The type of the parameter. `SIMPLE`, `LIST`, or `DYNAMIC`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryValue": {
                    "type": "string",
                    "description": "For `DYNAMIC` parameter types, the query to execute to return values\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "for `TAG_KEY` dynamic field types, the tag key to return\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valuesToReadableStrings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A string-\u003estring map.  At least one of the keys must match the value of\n`default_value`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultValue",
                "hideFromView",
                "label",
                "name",
                "parameterType",
                "valuesToReadableStrings"
            ]
        },
        "wavefront:index/DashboardSection:DashboardSection": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of this section\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/DashboardSectionRow:DashboardSectionRow"
                    },
                    "description": "See dashboard section rows\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "rows"
            ]
        },
        "wavefront:index/DashboardSectionRow:DashboardSectionRow": {
            "properties": {
                "charts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/DashboardSectionRowChart:DashboardSectionRowChart"
                    },
                    "description": "Charts in this section. See dashboard chart\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "charts"
            ]
        },
        "wavefront:index/DashboardSectionRowChart:DashboardSectionRowChart": {
            "properties": {
                "base": {
                    "type": "integer",
                    "description": "The base of logarithmic scale charts. Omit or set to 0 for the default linear scale. Usually set to 10 for the traditional logarithmic scale.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chartAttribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chartSetting": {
                    "$ref": "#/types/wavefront:index/DashboardSectionRowChartChartSetting:DashboardSectionRowChartChartSetting",
                    "description": "Chart settings. See chart settings\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description of the chart\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the source\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/DashboardSectionRowChartSource:DashboardSectionRowChartSource"
                    },
                    "description": "Query expression to plot on the chart. See chart source queries\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summarization": {
                    "type": "string",
                    "description": "Summarization strategy for the chart. MEAN is default. Valid options are, `MEAN`, \n`MEDIAN`, `MIN`, `MAX`, `SUM`, `COUNT`, `LAST`, `FIRST`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "units": {
                    "type": "string",
                    "description": "String to label the units of the chart on the Y-Axis\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chartSetting",
                "name",
                "sources",
                "summarization",
                "units"
            ]
        },
        "wavefront:index/DashboardSectionRowChartChartSetting:DashboardSectionRowChartChartSetting": {
            "properties": {
                "autoColumnTags": {
                    "type": "boolean",
                    "description": "deprecated\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "columnTags": {
                    "type": "string",
                    "description": "deprecated\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For the tabular view, a list of point tags to display when using the `custom` tag display mode\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expectedDataSpacing": {
                    "type": "integer",
                    "description": "Threshold (in seconds) for time delta between consecutive points in a series\nabove which a dotted line will replace a solid in in line plots. Default 60\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedLegendDisplayStats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For a chart with a fixed legend, a list of statistics to display in the legend\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedLegendEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable a fixed tabular legend adjacent to the chart\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedLegendFilterField": {
                    "type": "string",
                    "description": "Statistic to use for determining whether a series is displayed on the fixed legend.\nValid options are `CURRENT`, `MEAN`, `MEDIAN`, `SUM`, `MIN`, `MAX`, `COUNT`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedLegendFilterLimit": {
                    "type": "integer",
                    "description": "Number of series to include in the fixed legend\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedLegendFilterSort": {
                    "type": "string",
                    "description": "Whether to display `TOP` or `BOTTOM` ranked series in a fixed legend. Valid options\nare `TOP`, and `BOTTOM`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedLegendHideLabel": {
                    "type": "boolean",
                    "description": "deprecated\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedLegendPosition": {
                    "type": "string",
                    "description": "Where the fixed legend should be displayed with respect ot the chart.\nValid options are `RIGHt`, `TOP`, `LEFT`, `BOTTOM`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedLegendUseRawStats": {
                    "type": "boolean",
                    "description": "If `true`, the legend uses non-summarized stats instead of summarized\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBySource": {
                    "type": "boolean",
                    "description": "For the tabular view, whether to group multi metrics into a single row by a common source.\nIf `false`, each source is displayed in its own row.  if `true`, multiple metrics for the same host will be displayed as different\ncolumns in the same row\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "invertDynamicLegendHoverControl": {
                    "type": "boolean",
                    "description": "Whether to disable the display of the floating legend (but\nreenable it when the ctrl-key is pressed)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lineType": {
                    "type": "string",
                    "description": "Plot interpolation type.  `linear` is default. Valid options are `linear`, `step-before`, \n`step-after`, `basis`, `cardinal`, `monotone`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "max": {
                    "type": "number",
                    "description": "Max value of the Y-axis. Set to null or leave blank for auto\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "number",
                    "description": "Min value of the Y-axis. Set to null or leave blank for auto\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numTags": {
                    "type": "integer",
                    "description": "For the tabular view, how many point tags to display\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plainMarkdownContent": {
                    "type": "string",
                    "description": "The markdown content for a Markdown display, in plain text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "showHosts": {
                    "type": "boolean",
                    "description": "For the tabular view, whether to display sources. Default is `true`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "showLabels": {
                    "type": "boolean",
                    "description": "For the tabular view, whether to display labels. Default is `true`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "showRawValues": {
                    "type": "boolean",
                    "description": "For the tabular view, whether to display raw values. Default is `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortValuesDescending": {
                    "type": "boolean",
                    "description": "For the tabular view, whether to display display values in descending order. Default is `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineDecimalPrecision": {
                    "type": "integer",
                    "description": "For the single stat view, the decimal precision of the displayed number\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineDisplayColor": {
                    "type": "string",
                    "description": "For the single stat view, the color of the displayed text (when not dynamically determined). \nValues should be in `rgba(,,,,)` format\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineDisplayFontSize": {
                    "type": "string",
                    "description": "For the single stat view, the font size of the displayed text, in percent\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineDisplayHorizontalPosition": {
                    "type": "string",
                    "description": "For the single stat view, the horizontal position of the displayed text.\nValid options are `MIDDLE`, `LEFT`, `RIGHT`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineDisplayPostfix": {
                    "type": "string",
                    "description": "For the single stat view, a string to append to the displayed text\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineDisplayPrefix": {
                    "type": "string",
                    "description": "For the single stat view, a string to add before the displayed text\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineDisplayValueType": {
                    "type": "string",
                    "description": "For the single stat view, where to display the name of the query or the value of the query.\nValid options are `VALUE` or `LABEL`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineDisplayVerticalPosition": {
                    "type": "string",
                    "description": "deprecated\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineFillColor": {
                    "type": "string",
                    "description": "For the single stat view, the color of the background fill.  Values should be\nin `rgba(,,,,)`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineLineColor": {
                    "type": "string",
                    "description": "For the single stat view, the color of the line.  Values should be in `rgba(,,,,)` format\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineSize": {
                    "type": "string",
                    "description": "For the single stat view, This determines whether the sparkline of the statistic is displayed in the chart `BACKGROUND`, `BOTTOM`, or `NONE`.\nValid options are `BACKGROUND`, `BOTTOM`, `NONE`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineValueColorMapApplyTo": {
                    "type": "string",
                    "description": "For the single stat view, whether to apply dyunamic color settings to \nthe displayed `TEXT` or `BACKGROUND`. Valid options are `TEXT` or `BACKGROUND`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineValueColorMapColors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For the single stat view, A list of colors that differing query values map to. \nMust contain one more element than `sparkline_value_color_map_values_v2`. Values should be in `rgba(,,,,)`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineValueColorMapValues": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "deprecated\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineValueColorMapValuesV2s": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "For the single stat view, a list of boundaries for mapping different\nquery values to colors.  Must contain one less element than `sparkline_value_color_map_colors`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineValueTextMapTexts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For the single stat view, a list of display text values that different query\nvalues map to.  Must contain one more element than `sparkline_value_text_map_thresholds`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sparklineValueTextMapThresholds": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "For the single stat view, a list of threshold boundaries for \nmapping different query values to display text.  Must contain one less element than `sparkline_value_text_map_text`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stackType": {
                    "type": "string",
                    "description": "Type of stacked chart (applicable only if chart type is `stacked`). `zero` (default) means\nstacked from y=0. `expand` means normalized from 0 to 1.  `wiggle` means minimize weighted changes. `silhouette` means to\ncenter the stream. Valid options are `zero`, `expand`, `wiggle`, `silhouette`, `bars`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagMode": {
                    "type": "string",
                    "description": "For the tabular view, which mode to use to determine which point tags to display.\nValid options are `all`, `top`, or `custom`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeBasedColoring": {
                    "type": "boolean",
                    "description": "For x-y scatterplots, whether to color more recent points as darker than older points\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Chart Type. `line` refers to the Line Plot, `scatter` to the Point Plot, `stacked-area` to \nthe Stacked Area plot, `table` to the Tabular View, `scatterploy-xy` to Scatter Plot, `markdown-widget` to the\nMarkdown display, and `sparkline` to the Single Stat view. Valid options are `line`, `scatterplot`,\n`stacked-area`, `stacked-column`, `table`, `scatterplot-xy`, `markdown-widget`, `sparkline`, `globe`, `nodemap`,\n`top-k`, `status-list`, `histogram`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowSize": {
                    "type": "integer",
                    "description": "Width, in minutes, of the time window to use for `last` windowing\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowing": {
                    "type": "string",
                    "description": "For the tabular view, whether to use the full time window for the query or the last X minutes.\nValid options are `full` or `last`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "xmax": {
                    "type": "number",
                    "description": "For x-y scatterplots, max value for the X-axis. Set to null for auto\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "xmin": {
                    "type": "number",
                    "description": "For x-y scatterplots, min value for the X-axis. Set to null for auto\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "y0ScaleSiBy1024": {
                    "type": "boolean",
                    "description": "Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "y0UnitAutoscaling": {
                    "type": "boolean",
                    "description": "Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "y1ScaleSiBy1024": {
                    "type": "boolean",
                    "description": "Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "y1UnitAutoscaling": {
                    "type": "boolean",
                    "description": "Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "y1Units": {
                    "type": "string",
                    "description": "For plots with multiple Y-axes, units for right side Y-axis\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "y1max": {
                    "type": "number",
                    "description": "For plots with multiple Y-axes, max value for the right side Y-axis. Set null for auto\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "y1min": {
                    "type": "number",
                    "description": "For plots with multiple Y-axes, min value for the right side Y-axis. Set null for auto\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ymax": {
                    "type": "number",
                    "description": "For x-y scatterplots, max value for the Y-axis. Set to null for auto\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ymin": {
                    "type": "number",
                    "description": "For x-y scatterplots, min value for the Y-axis. Set to null for auto\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "wavefront:index/DashboardSectionRowChartSource:DashboardSectionRowChartSource": {
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Whether the source is disabled\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the source\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "Query expression to plot on the chart\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryBuilderEnabled": {
                    "type": "boolean",
                    "description": "Whether oir not this source line should have the query builder enabled\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scatterPlotSource": {
                    "type": "string",
                    "description": "For scatter plots, does this query source the X-axis or the Y-axis, `X`, or `Y`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceDescription": {
                    "type": "string",
                    "description": "A description for the purpose of this source\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "query"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the wavefront package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "address": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "WAVEFRONT_ADDRESS"
                    ]
                }
            },
            "httpProxy": {
                "type": "string"
            },
            "token": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "WAVEFRONT_TOKEN"
                    ]
                }
            }
        }
    },
    "resources": {
        "wavefront:index/alert:Alert": {
            "description": "Provides a Wavefront Alert resource.  This allows alerts to be created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst foobar = new wavefront.Alert(\"foobar\", {\n    condition: \"100-ts(\\\"cpu.usage_idle\\\", environment=preprod and cpu=cpu-total ) \u003e 80\",\n    displayExpression: \"100-ts(\\\"cpu.usage_idle\\\", environment=preprod and cpu=cpu-total )\",\n    minutes: 5,\n    resolveAfterMinutes: 5,\n    severity: \"WARN\",\n    tags: [\n        \"terraform\",\n        \"test\",\n    ],\n    target: \"test@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nfoobar = wavefront.Alert(\"foobar\",\n    condition=\"100-ts(\\\"cpu.usage_idle\\\", environment=preprod and cpu=cpu-total ) \u003e 80\",\n    display_expression=\"100-ts(\\\"cpu.usage_idle\\\", environment=preprod and cpu=cpu-total )\",\n    minutes=5,\n    resolve_after_minutes=5,\n    severity=\"WARN\",\n    tags=[\n        \"terraform\",\n        \"test\",\n    ],\n    target=\"test@example.com\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Wavefront.Alert(\"foobar\", new Wavefront.AlertArgs\n        {\n            Condition = \"100-ts(\\\"cpu.usage_idle\\\", environment=preprod and cpu=cpu-total ) \u003e 80\",\n            DisplayExpression = \"100-ts(\\\"cpu.usage_idle\\\", environment=preprod and cpu=cpu-total )\",\n            Minutes = 5,\n            ResolveAfterMinutes = 5,\n            Severity = \"WARN\",\n            Tags = \n            {\n                \"terraform\",\n                \"test\",\n            },\n            Target = \"test@example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewAlert(ctx, \"foobar\", \u0026wavefront.AlertArgs{\n\t\t\tCondition:           pulumi.String(\"100-ts(\\\"cpu.usage_idle\\\", environment=preprod and cpu=cpu-total ) \u003e 80\"),\n\t\t\tDisplayExpression:   pulumi.String(\"100-ts(\\\"cpu.usage_idle\\\", environment=preprod and cpu=cpu-total )\"),\n\t\t\tMinutes:             pulumi.Int(5),\n\t\t\tResolveAfterMinutes: pulumi.Int(5),\n\t\t\tSeverity:            pulumi.String(\"WARN\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t},\n\t\t\tTarget: pulumi.String(\"test@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAlerts can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/alert:Alert alert_target 1479868728473\n```\n\n ",
            "properties": {
                "additionalInformation": {
                    "type": "string",
                    "description": "User-supplied additional explanatory information for this alert.\nUseful for linking runbooks, migrations...etc\n"
                },
                "alertType": {
                    "type": "string",
                    "description": "The type of alert in Wavefront.  Either `CLASSIC` (default) \nor `THRESHOLD`\n"
                },
                "canModifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users or groups that can modify this resource.\n"
                },
                "canViews": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users or groups that can view this resource.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "A Wavefront query that is evaluated at regular intervals (default 1m).\nThe alert fires and notifications are triggered when data series matching this query evaluates\nto a non-zero value for a set number of consecutive minutes.\n"
                },
                "conditions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a string-\u003estring map of `severity` to `condition` \nfor which this alert will trigger.\n"
                },
                "displayExpression": {
                    "type": "string",
                    "description": "A second query whose results are displayed in the alert user\ninterface instead of the condition query.  This field is often used to display a version\nof the condition query with Boolean operators removed so that numerical values are plotted.\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "The number of consecutive minutes that a series matching the condition query must \nevaluate to \"true\" (non-zero value) before the alert fires.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert as it is displayed in Wavefront.\n"
                },
                "notificationResendFrequencyMinutes": {
                    "type": "integer",
                    "description": "How often to re-trigger a continually failing alert. \nIf absent or \u003c= 0, no re-triggering occur.\n"
                },
                "resolveAfterMinutes": {
                    "type": "integer",
                    "description": "The number of consecutive minutes that a firing series matching the condition\nquery must evaluate to \"false\" (zero value) before the alert resolves.  When unset, this default sto\nthe same value as `minutes`.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "- Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to assign to this resource.\n"
                },
                "target": {
                    "type": "string",
                    "description": "A comma-separated list of the email address or integration endpoint \n(such as PagerDuty or web hook) to notify when the alert status changes.\n"
                },
                "thresholdTargets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Targets for severity\n"
                }
            },
            "required": [
                "canModifies",
                "minutes",
                "name",
                "severity",
                "tags"
            ],
            "inputProperties": {
                "additionalInformation": {
                    "type": "string",
                    "description": "User-supplied additional explanatory information for this alert.\nUseful for linking runbooks, migrations...etc\n"
                },
                "alertType": {
                    "type": "string",
                    "description": "The type of alert in Wavefront.  Either `CLASSIC` (default) \nor `THRESHOLD`\n"
                },
                "canModifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users or groups that can modify this resource.\n"
                },
                "canViews": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users or groups that can view this resource.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "A Wavefront query that is evaluated at regular intervals (default 1m).\nThe alert fires and notifications are triggered when data series matching this query evaluates\nto a non-zero value for a set number of consecutive minutes.\n"
                },
                "conditions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a string-\u003estring map of `severity` to `condition` \nfor which this alert will trigger.\n"
                },
                "displayExpression": {
                    "type": "string",
                    "description": "A second query whose results are displayed in the alert user\ninterface instead of the condition query.  This field is often used to display a version\nof the condition query with Boolean operators removed so that numerical values are plotted.\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "The number of consecutive minutes that a series matching the condition query must \nevaluate to \"true\" (non-zero value) before the alert fires.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert as it is displayed in Wavefront.\n"
                },
                "notificationResendFrequencyMinutes": {
                    "type": "integer",
                    "description": "How often to re-trigger a continually failing alert. \nIf absent or \u003c= 0, no re-triggering occur.\n"
                },
                "resolveAfterMinutes": {
                    "type": "integer",
                    "description": "The number of consecutive minutes that a firing series matching the condition\nquery must evaluate to \"false\" (zero value) before the alert resolves.  When unset, this default sto\nthe same value as `minutes`.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "- Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to assign to this resource.\n"
                },
                "target": {
                    "type": "string",
                    "description": "A comma-separated list of the email address or integration endpoint \n(such as PagerDuty or web hook) to notify when the alert status changes.\n"
                },
                "thresholdTargets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Targets for severity\n"
                }
            },
            "requiredInputs": [
                "minutes",
                "tags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alert resources.\n",
                "properties": {
                    "additionalInformation": {
                        "type": "string",
                        "description": "User-supplied additional explanatory information for this alert.\nUseful for linking runbooks, migrations...etc\n"
                    },
                    "alertType": {
                        "type": "string",
                        "description": "The type of alert in Wavefront.  Either `CLASSIC` (default) \nor `THRESHOLD`\n"
                    },
                    "canModifies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users or groups that can modify this resource.\n"
                    },
                    "canViews": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users or groups that can view this resource.\n"
                    },
                    "condition": {
                        "type": "string",
                        "description": "A Wavefront query that is evaluated at regular intervals (default 1m).\nThe alert fires and notifications are triggered when data series matching this query evaluates\nto a non-zero value for a set number of consecutive minutes.\n"
                    },
                    "conditions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "a string-\u003estring map of `severity` to `condition` \nfor which this alert will trigger.\n"
                    },
                    "displayExpression": {
                        "type": "string",
                        "description": "A second query whose results are displayed in the alert user\ninterface instead of the condition query.  This field is often used to display a version\nof the condition query with Boolean operators removed so that numerical values are plotted.\n"
                    },
                    "minutes": {
                        "type": "integer",
                        "description": "The number of consecutive minutes that a series matching the condition query must \nevaluate to \"true\" (non-zero value) before the alert fires.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert as it is displayed in Wavefront.\n"
                    },
                    "notificationResendFrequencyMinutes": {
                        "type": "integer",
                        "description": "How often to re-trigger a continually failing alert. \nIf absent or \u003c= 0, no re-triggering occur.\n"
                    },
                    "resolveAfterMinutes": {
                        "type": "integer",
                        "description": "The number of consecutive minutes that a firing series matching the condition\nquery must evaluate to \"false\" (zero value) before the alert resolves.  When unset, this default sto\nthe same value as `minutes`.\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "- Severity of the alert, valid values are `INFO`, `SMOKE`, `WARN`, `SEVERE`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of tags to assign to this resource.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "A comma-separated list of the email address or integration endpoint \n(such as PagerDuty or web hook) to notify when the alert status changes.\n"
                    },
                    "thresholdTargets": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Targets for severity\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/alertTarget:AlertTarget": {
            "description": "Provides a wavefront Alert Target resource. This allows alert targets to created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst testTarget = new wavefront.AlertTarget(\"test_target\", {\n    contentType: \"application/json\",\n    customHeaders: {\n        Testing: \"true\",\n    },\n    description: \"Test target\",\n    method: \"WEBHOOK\",\n    recipient: \"https://hooks.slack.com/services/test/me\",\n    template: \"{}\",\n    triggers: [\n        \"ALERT_OPENED\",\n        \"ALERT_RESOLVED\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\ntest_target = wavefront.AlertTarget(\"testTarget\",\n    content_type=\"application/json\",\n    custom_headers={\n        \"Testing\": \"true\",\n    },\n    description=\"Test target\",\n    method=\"WEBHOOK\",\n    recipient=\"https://hooks.slack.com/services/test/me\",\n    template=\"{}\",\n    triggers=[\n        \"ALERT_OPENED\",\n        \"ALERT_RESOLVED\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testTarget = new Wavefront.AlertTarget(\"testTarget\", new Wavefront.AlertTargetArgs\n        {\n            ContentType = \"application/json\",\n            CustomHeaders = \n            {\n                { \"Testing\", \"true\" },\n            },\n            Description = \"Test target\",\n            Method = \"WEBHOOK\",\n            Recipient = \"https://hooks.slack.com/services/test/me\",\n            Template = \"{}\",\n            Triggers = \n            {\n                \"ALERT_OPENED\",\n                \"ALERT_RESOLVED\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewAlertTarget(ctx, \"testTarget\", \u0026wavefront.AlertTargetArgs{\n\t\t\tContentType: pulumi.String(\"application/json\"),\n\t\t\tCustomHeaders: pulumi.StringMap{\n\t\t\t\t\"Testing\": pulumi.String(\"true\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Test target\"),\n\t\t\tMethod:      pulumi.String(\"WEBHOOK\"),\n\t\t\tRecipient:   pulumi.String(\"https://hooks.slack.com/services/test/me\"),\n\t\t\tTemplate:    pulumi.String(\"{}\"),\n\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ALERT_OPENED\"),\n\t\t\t\tpulumi.String(\"ALERT_RESOLVED\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes Reference \n\n* `target_id` - The target ID prefixed with `target:` for interpolating into a Wavefront Alert. \n\n### Route\n\nThe `route` mapping supports the following:\n\n* `method` - (Required)  The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.\n* `target` - (Required) The endpoint for the alert route. `EMAIL`: email address. `PAGERDUTY`: PagerDuty routing \nkey. `WEBHOOK`: URL endpoint. \n* `filter` - (Required) String that filters the route. Space delimited.  Currently only allows a single key value pair.\n(e.g. `env prod`)\n\n### Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst testTarget = new wavefront.AlertTarget(\"test_target\", {\n    contentType: \"application/json\",\n    customHeaders: {\n        Testing: \"true\",\n    },\n    description: \"Test target\",\n    method: \"WEBHOOK\",\n    recipient: \"https://hooks.slack.com/services/test/me\",\n    routes: [\n        {\n            filter: {\n                key: \"env\",\n                value: \"prod\",\n            },\n            method: \"WEBHOOK\",\n            target: \"https://hooks.slack.com/services/test/me/prod\",\n        },\n        {\n            filter: {\n                key: \"env\",\n                value: \"dev\",\n            },\n            method: \"WEBHOOK\",\n            target: \"https://hooks.slack.com/services/test/me/dev\",\n        },\n    ],\n    template: \"{}\",\n    triggers: [\n        \"ALERT_OPENED\",\n        \"ALERT_RESOLVED\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\ntest_target = wavefront.AlertTarget(\"testTarget\",\n    content_type=\"application/json\",\n    custom_headers={\n        \"Testing\": \"true\",\n    },\n    description=\"Test target\",\n    method=\"WEBHOOK\",\n    recipient=\"https://hooks.slack.com/services/test/me\",\n    routes=[\n        wavefront.AlertTargetRouteArgs(\n            filter={\n                \"key\": \"env\",\n                \"value\": \"prod\",\n            },\n            method=\"WEBHOOK\",\n            target=\"https://hooks.slack.com/services/test/me/prod\",\n        ),\n        wavefront.AlertTargetRouteArgs(\n            filter={\n                \"key\": \"env\",\n                \"value\": \"dev\",\n            },\n            method=\"WEBHOOK\",\n            target=\"https://hooks.slack.com/services/test/me/dev\",\n        ),\n    ],\n    template=\"{}\",\n    triggers=[\n        \"ALERT_OPENED\",\n        \"ALERT_RESOLVED\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testTarget = new Wavefront.AlertTarget(\"testTarget\", new Wavefront.AlertTargetArgs\n        {\n            ContentType = \"application/json\",\n            CustomHeaders = \n            {\n                { \"Testing\", \"true\" },\n            },\n            Description = \"Test target\",\n            Method = \"WEBHOOK\",\n            Recipient = \"https://hooks.slack.com/services/test/me\",\n            Routes = \n            {\n                new Wavefront.Inputs.AlertTargetRouteArgs\n                {\n                    Filter = \n                    {\n                        { \"key\", \"env\" },\n                        { \"value\", \"prod\" },\n                    },\n                    Method = \"WEBHOOK\",\n                    Target = \"https://hooks.slack.com/services/test/me/prod\",\n                },\n                new Wavefront.Inputs.AlertTargetRouteArgs\n                {\n                    Filter = \n                    {\n                        { \"key\", \"env\" },\n                        { \"value\", \"dev\" },\n                    },\n                    Method = \"WEBHOOK\",\n                    Target = \"https://hooks.slack.com/services/test/me/dev\",\n                },\n            },\n            Template = \"{}\",\n            Triggers = \n            {\n                \"ALERT_OPENED\",\n                \"ALERT_RESOLVED\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront\"\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewAlertTarget(ctx, \"testTarget\", \u0026wavefront.AlertTargetArgs{\n\t\t\tContentType: pulumi.String(\"application/json\"),\n\t\t\tCustomHeaders: pulumi.StringMap{\n\t\t\t\t\"Testing\": pulumi.String(\"true\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Test target\"),\n\t\t\tMethod:      pulumi.String(\"WEBHOOK\"),\n\t\t\tRecipient:   pulumi.String(\"https://hooks.slack.com/services/test/me\"),\n\t\t\tRoutes: wavefront.AlertTargetRouteArray{\n\t\t\t\t\u0026wavefront.AlertTargetRouteArgs{\n\t\t\t\t\tFilter: pulumi.StringMap{\n\t\t\t\t\t\t\"key\":   pulumi.String(\"env\"),\n\t\t\t\t\t\t\"value\": pulumi.String(\"prod\"),\n\t\t\t\t\t},\n\t\t\t\t\tMethod: pulumi.String(\"WEBHOOK\"),\n\t\t\t\t\tTarget: pulumi.String(\"https://hooks.slack.com/services/test/me/prod\"),\n\t\t\t\t},\n\t\t\t\t\u0026wavefront.AlertTargetRouteArgs{\n\t\t\t\t\tFilter: pulumi.StringMap{\n\t\t\t\t\t\t\"key\":   pulumi.String(\"env\"),\n\t\t\t\t\t\t\"value\": pulumi.String(\"dev\"),\n\t\t\t\t\t},\n\t\t\t\t\tMethod: pulumi.String(\"WEBHOOK\"),\n\t\t\t\t\tTarget: pulumi.String(\"https://hooks.slack.com/services/test/me/dev\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTemplate: pulumi.String(\"{}\"),\n\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ALERT_OPENED\"),\n\t\t\t\tpulumi.String(\"ALERT_RESOLVED\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nAlert Targets can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/alertTarget:AlertTarget alert_target abcdEFGhijKLMNO\n```\n\n ",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "The value of the `Content-Type` header of the webhook.\n"
                },
                "customHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A `string-\u003estring` map specifying the custome HTTP header key/value pairs that will be \nsent in the requests with a method of `WEBHOOK`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description describing this alert target.\n"
                },
                "emailSubject": {
                    "type": "string",
                    "description": "The subject title of an email notification target.\n"
                },
                "isHtmlContent": {
                    "type": "boolean",
                    "description": "Determine whether the email alert content is sent as HTML or text.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert target as it is displayed in wavefront\n"
                },
                "recipient": {
                    "type": "string",
                    "description": "The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty \nrouting key. `WEBHOOK`: URL endpoint.\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/AlertTargetRoute:AlertTargetRoute"
                    },
                    "description": "List of routing targets that this alert target will notify. See Route\n"
                },
                "targetId": {
                    "type": "string"
                },
                "template": {
                    "type": "string",
                    "description": "A mustache template that will form the body of the POST request, email and summary of the PagerDuty.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,\n`ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.\n"
                }
            },
            "required": [
                "description",
                "name",
                "recipient",
                "targetId",
                "template",
                "triggers"
            ],
            "inputProperties": {
                "contentType": {
                    "type": "string",
                    "description": "The value of the `Content-Type` header of the webhook.\n"
                },
                "customHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A `string-\u003estring` map specifying the custome HTTP header key/value pairs that will be \nsent in the requests with a method of `WEBHOOK`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description describing this alert target.\n"
                },
                "emailSubject": {
                    "type": "string",
                    "description": "The subject title of an email notification target.\n"
                },
                "isHtmlContent": {
                    "type": "boolean",
                    "description": "Determine whether the email alert content is sent as HTML or text.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert target as it is displayed in wavefront\n"
                },
                "recipient": {
                    "type": "string",
                    "description": "The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty \nrouting key. `WEBHOOK`: URL endpoint.\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/AlertTargetRoute:AlertTargetRoute"
                    },
                    "description": "List of routing targets that this alert target will notify. See Route\n"
                },
                "template": {
                    "type": "string",
                    "description": "A mustache template that will form the body of the POST request, email and summary of the PagerDuty.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,\n`ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.\n"
                }
            },
            "requiredInputs": [
                "description",
                "recipient",
                "template",
                "triggers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertTarget resources.\n",
                "properties": {
                    "contentType": {
                        "type": "string",
                        "description": "The value of the `Content-Type` header of the webhook.\n"
                    },
                    "customHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A `string-\u003estring` map specifying the custome HTTP header key/value pairs that will be \nsent in the requests with a method of `WEBHOOK`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description describing this alert target.\n"
                    },
                    "emailSubject": {
                        "type": "string",
                        "description": "The subject title of an email notification target.\n"
                    },
                    "isHtmlContent": {
                        "type": "boolean",
                        "description": "Determine whether the email alert content is sent as HTML or text.\n"
                    },
                    "method": {
                        "type": "string",
                        "description": "The notification method used for notification target. One of `WEBHOOK`, `EMAIL`, `PAGERDUTY`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert target as it is displayed in wavefront\n"
                    },
                    "recipient": {
                        "type": "string",
                        "description": "The end point for the notification Target.  `EMAIL`: email address. `PAGERDUTY`: PagerDuty \nrouting key. `WEBHOOK`: URL endpoint.\n"
                    },
                    "routes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/wavefront:index/AlertTargetRoute:AlertTargetRoute"
                        },
                        "description": "List of routing targets that this alert target will notify. See Route\n"
                    },
                    "targetId": {
                        "type": "string"
                    },
                    "template": {
                        "type": "string",
                        "description": "A mustache template that will form the body of the POST request, email and summary of the PagerDuty.\n"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of occurrences on which this webhook will be fired. Valid values are `ALERT_OPENED`,\n`ALERT_UPDATED`, `ALERT_RESOLVED`, `ALERT_MAINTENANCE`, `ALERT_SNOOZED`, `ALERT_NO_DATA`, `ALERT_NO_DATA_RESOLVED`, `ALERT_NO_DATA_MAINTENANCE`.\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationAppDynamics:CloudIntegrationAppDynamics": {
            "description": "Provides a Wavefront Cloud Integration for App Dynamics. This allows app dynamics cloud integrations to be created, \nupdated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst appDynamics = new wavefront.CloudIntegrationAppDynamics(\"app_dynamics\", {\n    controllerName: \"exampleController\",\n    encryptedPassword: \"encryptedPassword\",\n    userName: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\napp_dynamics = wavefront.CloudIntegrationAppDynamics(\"appDynamics\",\n    controller_name=\"exampleController\",\n    encrypted_password=\"encryptedPassword\",\n    user_name=\"example\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var appDynamics = new Wavefront.CloudIntegrationAppDynamics(\"appDynamics\", new Wavefront.CloudIntegrationAppDynamicsArgs\n        {\n            ControllerName = \"exampleController\",\n            EncryptedPassword = \"encryptedPassword\",\n            UserName = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewCloudIntegrationAppDynamics(ctx, \"appDynamics\", \u0026wavefront.CloudIntegrationAppDynamicsArgs{\n\t\t\tControllerName:    pulumi.String(\"exampleController\"),\n\t\t\tEncryptedPassword: pulumi.String(\"encryptedPassword\"),\n\t\t\tUserName:          pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApp Dynamic Cloud Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationAppDynamics:CloudIntegrationAppDynamics app_dynamics a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "appFilterRegexes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of regular expressions that a application name must match (case-insensitively) \nin order to be ingested\n"
                },
                "controllerName": {
                    "type": "string",
                    "description": "Name of the SaaS controller\n"
                },
                "enableAppInfraMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Application Infrastructure metric injection\n"
                },
                "enableBackendMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Backend metric injection\n"
                },
                "enableBusinessTrxMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Business Transaction metric injection\n"
                },
                "enableErrorMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Error metric injection\n"
                },
                "enableIndividualNodeMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Individual Node metric injection\n"
                },
                "enableOverallPerfMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Overall Performance metric injection\n"
                },
                "enableRollup": {
                    "type": "boolean",
                    "description": "Set this to `false` to get separate results for all values within the time range, \nby default it is `true`\n"
                },
                "enableServiceEndpointMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Service End point metric injection\n"
                },
                "encryptedPassword": {
                    "type": "string",
                    "description": "Password for AppDynamics user\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Username is a combination of userName and the account name\n"
                }
            },
            "required": [
                "controllerName",
                "encryptedPassword",
                "name",
                "service",
                "userName"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "appFilterRegexes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of regular expressions that a application name must match (case-insensitively) \nin order to be ingested\n"
                },
                "controllerName": {
                    "type": "string",
                    "description": "Name of the SaaS controller\n"
                },
                "enableAppInfraMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Application Infrastructure metric injection\n"
                },
                "enableBackendMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Backend metric injection\n"
                },
                "enableBusinessTrxMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Business Transaction metric injection\n"
                },
                "enableErrorMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Error metric injection\n"
                },
                "enableIndividualNodeMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Individual Node metric injection\n"
                },
                "enableOverallPerfMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Overall Performance metric injection\n"
                },
                "enableRollup": {
                    "type": "boolean",
                    "description": "Set this to `false` to get separate results for all values within the time range, \nby default it is `true`\n"
                },
                "enableServiceEndpointMetrics": {
                    "type": "boolean",
                    "description": "Boolean flag to control Service End point metric injection\n"
                },
                "encryptedPassword": {
                    "type": "string",
                    "description": "Password for AppDynamics user\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Username is a combination of userName and the account name\n"
                }
            },
            "requiredInputs": [
                "controllerName",
                "encryptedPassword",
                "service",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationAppDynamics resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "appFilterRegexes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of regular expressions that a application name must match (case-insensitively) \nin order to be ingested\n"
                    },
                    "controllerName": {
                        "type": "string",
                        "description": "Name of the SaaS controller\n"
                    },
                    "enableAppInfraMetrics": {
                        "type": "boolean",
                        "description": "Boolean flag to control Application Infrastructure metric injection\n"
                    },
                    "enableBackendMetrics": {
                        "type": "boolean",
                        "description": "Boolean flag to control Backend metric injection\n"
                    },
                    "enableBusinessTrxMetrics": {
                        "type": "boolean",
                        "description": "Boolean flag to control Business Transaction metric injection\n"
                    },
                    "enableErrorMetrics": {
                        "type": "boolean",
                        "description": "Boolean flag to control Error metric injection\n"
                    },
                    "enableIndividualNodeMetrics": {
                        "type": "boolean",
                        "description": "Boolean flag to control Individual Node metric injection\n"
                    },
                    "enableOverallPerfMetrics": {
                        "type": "boolean",
                        "description": "Boolean flag to control Overall Performance metric injection\n"
                    },
                    "enableRollup": {
                        "type": "boolean",
                        "description": "Set this to `false` to get separate results for all values within the time range, \nby default it is `true`\n"
                    },
                    "enableServiceEndpointMetrics": {
                        "type": "boolean",
                        "description": "Boolean flag to control Service End point metric injection\n"
                    },
                    "encryptedPassword": {
                        "type": "string",
                        "description": "Password for AppDynamics user\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Username is a combination of userName and the account name\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationAwsExternalId:CloudIntegrationAwsExternalId": {
            "description": "Provides an External ID for use in AWS IAM Roles.  This allows External IDs to be created and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst externalId = new wavefront.CloudIntegrationAwsExternalId(\"external_id\", {});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nexternal_id = wavefront.CloudIntegrationAwsExternalId(\"externalId\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var externalId = new Wavefront.CloudIntegrationAwsExternalId(\"externalId\", new Wavefront.CloudIntegrationAwsExternalIdArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewCloudIntegrationAwsExternalId(ctx, \"externalId\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExternal IDs can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationAwsExternalId:CloudIntegrationAwsExternalId external_id uGJdkH3k\n```\n\n ",
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationAwsExternalId resources.\n",
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationAzure:CloudIntegrationAzure": {
            "description": "Provides a Wavefront Cloud Integration for Azure. This allows azure cloud integrations to be created,\nupdated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst azureActivityLog = new wavefront.CloudIntegrationAzureActivityLog(\"azure_activity_log\", {\n    clientId: \"client-id2\",\n    clientSecret: \"client-secret2\",\n    tenant: \"my-tenant2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nazure_activity_log = wavefront.CloudIntegrationAzureActivityLog(\"azureActivityLog\",\n    client_id=\"client-id2\",\n    client_secret=\"client-secret2\",\n    tenant=\"my-tenant2\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var azureActivityLog = new Wavefront.CloudIntegrationAzureActivityLog(\"azureActivityLog\", new Wavefront.CloudIntegrationAzureActivityLogArgs\n        {\n            ClientId = \"client-id2\",\n            ClientSecret = \"client-secret2\",\n            Tenant = \"my-tenant2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewCloudIntegrationAzureActivityLog(ctx, \"azureActivityLog\", \u0026wavefront.CloudIntegrationAzureActivityLogArgs{\n\t\t\tClientId:     pulumi.String(\"client-id2\"),\n\t\t\tClientSecret: pulumi.String(\"client-secret2\"),\n\t\t\tTenant:       pulumi.String(\"my-tenant2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAzure Cloud Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationAzure:CloudIntegrationAzure azure a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "categoryFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Azure Activity Log categories.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client id for an azure service account within your project\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Client secret for an Azure service account within your project\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "metricFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that a metric name must match (case-insensitively) in order to be ingested\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "resourceGroupFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Azure resource groups from which to pull metrics\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                },
                "tenant": {
                    "type": "string",
                    "description": "Tenant Id for an Azure service account within your project\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "name",
                "service",
                "tenant"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "categoryFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Azure Activity Log categories.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client id for an azure service account within your project\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Client secret for an Azure service account within your project\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "metricFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that a metric name must match (case-insensitively) in order to be ingested\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "resourceGroupFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Azure resource groups from which to pull metrics\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                },
                "tenant": {
                    "type": "string",
                    "description": "Tenant Id for an Azure service account within your project\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "service",
                "tenant"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationAzure resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "categoryFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Azure Activity Log categories.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Client id for an azure service account within your project\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client secret for an Azure service account within your project\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "metricFilterRegex": {
                        "type": "string",
                        "description": "A regular expression that a metric name must match (case-insensitively) in order to be ingested\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "resourceGroupFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Azure resource groups from which to pull metrics\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Tenant Id for an Azure service account within your project\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationAzureActivityLog:CloudIntegrationAzureActivityLog": {
            "description": "Provides a Wavefront Cloud Integration for Azure Activity Logs. This allows azure activity log cloud integrations to be created,\nupdated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst azureActivityLog = new wavefront.CloudIntegrationAzureActivityLog(\"azure_activity_log\", {\n    categoryFilters: [\"ADMINISTRATIVE\"],\n    clientId: \"client-id2\",\n    clientSecret: \"client-secret2\",\n    tenant: \"my-tenant2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nazure_activity_log = wavefront.CloudIntegrationAzureActivityLog(\"azureActivityLog\",\n    category_filters=[\"ADMINISTRATIVE\"],\n    client_id=\"client-id2\",\n    client_secret=\"client-secret2\",\n    tenant=\"my-tenant2\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var azureActivityLog = new Wavefront.CloudIntegrationAzureActivityLog(\"azureActivityLog\", new Wavefront.CloudIntegrationAzureActivityLogArgs\n        {\n            CategoryFilters = \n            {\n                \"ADMINISTRATIVE\",\n            },\n            ClientId = \"client-id2\",\n            ClientSecret = \"client-secret2\",\n            Tenant = \"my-tenant2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewCloudIntegrationAzureActivityLog(ctx, \"azureActivityLog\", \u0026wavefront.CloudIntegrationAzureActivityLogArgs{\n\t\t\tCategoryFilters: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ADMINISTRATIVE\"),\n\t\t\t},\n\t\t\tClientId:     pulumi.String(\"client-id2\"),\n\t\t\tClientSecret: pulumi.String(\"client-secret2\"),\n\t\t\tTenant:       pulumi.String(\"my-tenant2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAzure Activity Log Cloud Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationAzureActivityLog:CloudIntegrationAzureActivityLog azure_al a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "categoryFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Azure services (such as Microsoft.Compute/virtualMachines) from which to pull metrics\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client id for an azure service account within your project\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Client secret for an Azure service account within your project\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                },
                "tenant": {
                    "type": "string",
                    "description": "Tenant Id for an Azure service account within your project\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "name",
                "service",
                "tenant"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "categoryFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Azure services (such as Microsoft.Compute/virtualMachines) from which to pull metrics\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client id for an azure service account within your project\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Client secret for an Azure service account within your project\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                },
                "tenant": {
                    "type": "string",
                    "description": "Tenant Id for an Azure service account within your project\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "service",
                "tenant"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationAzureActivityLog resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "categoryFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Azure services (such as Microsoft.Compute/virtualMachines) from which to pull metrics\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Client id for an azure service account within your project\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client secret for an Azure service account within your project\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Tenant Id for an Azure service account within your project\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail": {
            "description": "Provides a Wavefront Cloud Integration for CloudTrail. This allows CloudTrail cloud integrations to be created,\nupdated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst extId = new wavefront.CloudIntegrationAwsExternalId(\"extId\", {});\nconst cloudtrail = new wavefront.CloudIntegrationCloudTrail(\"cloudtrail\", {\n    roleArn: \"arn:aws::1234567:role/example-arn\",\n    externalId: extId.id,\n    region: \"us-west-2\",\n    bucketName: \"example-s3-bucket\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\next_id = wavefront.CloudIntegrationAwsExternalId(\"extId\")\ncloudtrail = wavefront.CloudIntegrationCloudTrail(\"cloudtrail\",\n    role_arn=\"arn:aws::1234567:role/example-arn\",\n    external_id=ext_id.id,\n    region=\"us-west-2\",\n    bucket_name=\"example-s3-bucket\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var extId = new Wavefront.CloudIntegrationAwsExternalId(\"extId\", new Wavefront.CloudIntegrationAwsExternalIdArgs\n        {\n        });\n        var cloudtrail = new Wavefront.CloudIntegrationCloudTrail(\"cloudtrail\", new Wavefront.CloudIntegrationCloudTrailArgs\n        {\n            RoleArn = \"arn:aws::1234567:role/example-arn\",\n            ExternalId = extId.Id,\n            Region = \"us-west-2\",\n            BucketName = \"example-s3-bucket\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\textId, err := wavefront.NewCloudIntegrationAwsExternalId(ctx, \"extId\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = wavefront.NewCloudIntegrationCloudTrail(ctx, \"cloudtrail\", \u0026wavefront.CloudIntegrationCloudTrailArgs{\n\t\t\tRoleArn:    pulumi.String(\"arn:aws::1234567:role/example-arn\"),\n\t\t\tExternalId: extId.ID(),\n\t\t\tRegion:     pulumi.String(\"us-west-2\"),\n\t\t\tBucketName: pulumi.String(\"example-s3-bucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCloudTrail Cloud Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationCloudTrail:CloudIntegrationCloudTrail cloudtrail a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "Name of the S3 bucket where CloudTrail logs are stored\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The Role ARN that the customer has created in AWS IAM to allow access to Wavefront\n"
                },
                "filterRule": {
                    "type": "string",
                    "description": "Rule to filter CloudTrail log event\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The common prefix, if any, appended to all CloudTrail log files.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region of the S3 bucket where CloudTrail logs are stored\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The external id corresponding to the Role ARN\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "required": [
                "bucketName",
                "externalId",
                "name",
                "region",
                "roleArn",
                "service"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "Name of the S3 bucket where CloudTrail logs are stored\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The Role ARN that the customer has created in AWS IAM to allow access to Wavefront\n"
                },
                "filterRule": {
                    "type": "string",
                    "description": "Rule to filter CloudTrail log event\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The common prefix, if any, appended to all CloudTrail log files.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region of the S3 bucket where CloudTrail logs are stored\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The external id corresponding to the Role ARN\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "requiredInputs": [
                "bucketName",
                "externalId",
                "region",
                "roleArn",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationCloudTrail resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "bucketName": {
                        "type": "string",
                        "description": "Name of the S3 bucket where CloudTrail logs are stored\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The Role ARN that the customer has created in AWS IAM to allow access to Wavefront\n"
                    },
                    "filterRule": {
                        "type": "string",
                        "description": "Rule to filter CloudTrail log event\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The common prefix, if any, appended to all CloudTrail log files.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region of the S3 bucket where CloudTrail logs are stored\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "The external id corresponding to the Role ARN\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationCloudWatch:CloudIntegrationCloudWatch": {
            "description": "Provides a Wavefront Cloud Integration for CloudTrail. This allows CloudTrail cloud integrations to be created,\nupdated, and delete\n  \n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst extId = new wavefront.CloudIntegrationAwsExternalId(\"extId\", {});\nconst cloudwatch = new wavefront.CloudIntegrationCloudWatch(\"cloudwatch\", {\n    forceSave: true,\n    roleArn: \"arn:aws::1234567:role/example-arn\",\n    externalId: extId.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\next_id = wavefront.CloudIntegrationAwsExternalId(\"extId\")\ncloudwatch = wavefront.CloudIntegrationCloudWatch(\"cloudwatch\",\n    force_save=True,\n    role_arn=\"arn:aws::1234567:role/example-arn\",\n    external_id=ext_id.id)\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var extId = new Wavefront.CloudIntegrationAwsExternalId(\"extId\", new Wavefront.CloudIntegrationAwsExternalIdArgs\n        {\n        });\n        var cloudwatch = new Wavefront.CloudIntegrationCloudWatch(\"cloudwatch\", new Wavefront.CloudIntegrationCloudWatchArgs\n        {\n            ForceSave = true,\n            RoleArn = \"arn:aws::1234567:role/example-arn\",\n            ExternalId = extId.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\textId, err := wavefront.NewCloudIntegrationAwsExternalId(ctx, \"extId\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = wavefront.NewCloudIntegrationCloudWatch(ctx, \"cloudwatch\", \u0026wavefront.CloudIntegrationCloudWatchArgs{\n\t\t\tForceSave:  pulumi.Bool(true),\n\t\t\tRoleArn:    pulumi.String(\"arn:aws::1234567:role/example-arn\"),\n\t\t\tExternalId: extId.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCloudWatch Cloud Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationCloudWatch:CloudIntegrationCloudWatch cloudwatch a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The Role ARN that the customer has created in AWS IAM to allow access to Wavefront\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "instanceSelectionTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A string-\u003estring map whitelist of instance tag-value pairs (in AWS).\nIf the instance's AWS tags match this whitelist, CloudWatch data about this instance is ingested.\nMultiple entries are OR'ed\n"
                },
                "metricFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that a CloudWatch metric name must match (case-insensitively) in order to be ingested\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of namespaces that limit what we query from CloudWatch\n"
                },
                "pointTagFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that AWS tag key name must match (case-insensitively)\nin order to be ingested\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The external id corresponding to the Role ARN\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                },
                "volumeSelectionTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A string-\u003estring map of whitelist of volume tag-value pairs (in AWS).\nIf the volume's AWS tags match this whitelist, CloudWatch data about this volume is ingested.\nMultiple entries are OR'ed\n"
                }
            },
            "required": [
                "externalId",
                "name",
                "roleArn",
                "service"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The Role ARN that the customer has created in AWS IAM to allow access to Wavefront\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "instanceSelectionTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A string-\u003estring map whitelist of instance tag-value pairs (in AWS).\nIf the instance's AWS tags match this whitelist, CloudWatch data about this instance is ingested.\nMultiple entries are OR'ed\n"
                },
                "metricFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that a CloudWatch metric name must match (case-insensitively) in order to be ingested\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of namespaces that limit what we query from CloudWatch\n"
                },
                "pointTagFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that AWS tag key name must match (case-insensitively)\nin order to be ingested\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The external id corresponding to the Role ARN\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                },
                "volumeSelectionTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A string-\u003estring map of whitelist of volume tag-value pairs (in AWS).\nIf the volume's AWS tags match this whitelist, CloudWatch data about this volume is ingested.\nMultiple entries are OR'ed\n"
                }
            },
            "requiredInputs": [
                "externalId",
                "roleArn",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationCloudWatch resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The Role ARN that the customer has created in AWS IAM to allow access to Wavefront\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "instanceSelectionTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A string-\u003estring map whitelist of instance tag-value pairs (in AWS).\nIf the instance's AWS tags match this whitelist, CloudWatch data about this instance is ingested.\nMultiple entries are OR'ed\n"
                    },
                    "metricFilterRegex": {
                        "type": "string",
                        "description": "A regular expression that a CloudWatch metric name must match (case-insensitively) in order to be ingested\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "namespaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of namespaces that limit what we query from CloudWatch\n"
                    },
                    "pointTagFilterRegex": {
                        "type": "string",
                        "description": "A regular expression that AWS tag key name must match (case-insensitively)\nin order to be ingested\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "The external id corresponding to the Role ARN\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    },
                    "volumeSelectionTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A string-\u003estring map of whitelist of volume tag-value pairs (in AWS).\nIf the volume's AWS tags match this whitelist, CloudWatch data about this volume is ingested.\nMultiple entries are OR'ed\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationEc2:CloudIntegrationEc2": {
            "description": "Provides a Wavefront Cloud Integration for EC2. This allows EC2 cloud integrations to be created,\nupdated, and delete\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst extId = new wavefront.CloudIntegrationAwsExternalId(\"extId\", {});\nconst ec2 = new wavefront.CloudIntegrationEc2(\"ec2\", {\n    roleArn: \"arn:aws::1234567:role/example-arn\",\n    externalId: extId.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\next_id = wavefront.CloudIntegrationAwsExternalId(\"extId\")\nec2 = wavefront.CloudIntegrationEc2(\"ec2\",\n    role_arn=\"arn:aws::1234567:role/example-arn\",\n    external_id=ext_id.id)\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var extId = new Wavefront.CloudIntegrationAwsExternalId(\"extId\", new Wavefront.CloudIntegrationAwsExternalIdArgs\n        {\n        });\n        var ec2 = new Wavefront.CloudIntegrationEc2(\"ec2\", new Wavefront.CloudIntegrationEc2Args\n        {\n            RoleArn = \"arn:aws::1234567:role/example-arn\",\n            ExternalId = extId.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\textId, err := wavefront.NewCloudIntegrationAwsExternalId(ctx, \"extId\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = wavefront.NewCloudIntegrationEc2(ctx, \"ec2\", \u0026wavefront.CloudIntegrationEc2Args{\n\t\t\tRoleArn:    pulumi.String(\"arn:aws::1234567:role/example-arn\"),\n\t\t\tExternalId: extId.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEC2 Cloud Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationEc2:CloudIntegrationEc2 ec2 a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The Role ARN that the customer has created in AWS IAM to allow access to Wavefront\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "hostnameTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The external id corresponding to the Role ARN\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "required": [
                "externalId",
                "name",
                "roleArn",
                "service"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The Role ARN that the customer has created in AWS IAM to allow access to Wavefront\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "hostnameTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The external id corresponding to the Role ARN\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "requiredInputs": [
                "externalId",
                "roleArn",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationEc2 resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The Role ARN that the customer has created in AWS IAM to allow access to Wavefront\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "hostnameTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "The external id corresponding to the Role ARN\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp": {
            "description": "Provides a Wavefront Cloud Integration for GCP. This allows GCP cloud integrations to be created,\nupdated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst gcp = new wavefront.CloudIntegrationGcp(\"gcp\", {\n    jsonKey: \"{...your gcp key ...}\\n\",\n    projectId: \"example-gcp-project\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\ngcp = wavefront.CloudIntegrationGcp(\"gcp\",\n    json_key=\"\"\"{...your gcp key ...}\n\n\"\"\",\n    project_id=\"example-gcp-project\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var gcp = new Wavefront.CloudIntegrationGcp(\"gcp\", new Wavefront.CloudIntegrationGcpArgs\n        {\n            JsonKey = @\"{...your gcp key ...}\n\n\",\n            ProjectId = \"example-gcp-project\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewCloudIntegrationGcp(ctx, \"gcp\", \u0026wavefront.CloudIntegrationGcpArgs{\n\t\t\tJsonKey:   pulumi.String(fmt.Sprintf(\"%v%v\", \"{...your gcp key ...}\\n\", \"\\n\")),\n\t\t\tProjectId: pulumi.String(\"example-gcp-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGCP Cloud Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationGcp:CloudIntegrationGcp gcp a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Google Cloud Platform (GCP) services.  Valid values are `APPENGINE`, \n`BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,\n`DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,\n`LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,\n`TPU`, `VPN`\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "jsonKey": {
                    "type": "string",
                    "description": "Private key for a Google Cloud Platform (GCP) service account within your project.\nThe account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.\n"
                },
                "metricFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that a metric name must match (case-insensitively) in order to be ingested\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Google Cloud Platform (GCP) Project Id\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "required": [
                "jsonKey",
                "name",
                "projectId",
                "service"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Google Cloud Platform (GCP) services.  Valid values are `APPENGINE`, \n`BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,\n`DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,\n`LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,\n`TPU`, `VPN`\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "jsonKey": {
                    "type": "string",
                    "description": "Private key for a Google Cloud Platform (GCP) service account within your project.\nThe account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.\n"
                },
                "metricFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that a metric name must match (case-insensitively) in order to be ingested\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Google Cloud Platform (GCP) Project Id\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "requiredInputs": [
                "jsonKey",
                "projectId",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationGcp resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Google Cloud Platform (GCP) services.  Valid values are `APPENGINE`, \n`BIGQUERY`, `BIGTABLE`, `CLOUDFUNCTIONS`, `CLOUDIOT`, `CLOUDSQL`, `CLOUDTASKS`, `COMPUTE`, `CONTAINER`,\n`DATAFLOW`, `DATAPROC`, `DATASTORE`, `FIREBASEDATABASE`, `FIREBASEHOSTING`, `FIRESTORE`, `INTERCONNECT`,\n`LOADBALANCING`, `LOGGING`, `ML`, `MONITORING`, `PUBSUB`, `REDIS`, `ROUTER`, `SERVICERUNTIME`, `SPANNER`, `STORAGE`,\n`TPU`, `VPN`\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "jsonKey": {
                        "type": "string",
                        "description": "Private key for a Google Cloud Platform (GCP) service account within your project.\nThe account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.\n"
                    },
                    "metricFilterRegex": {
                        "type": "string",
                        "description": "A regular expression that a metric name must match (case-insensitively) in order to be ingested\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Google Cloud Platform (GCP) Project Id\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationGcpBilling:CloudIntegrationGcpBilling": {
            "description": "Provides a Wavefront Cloud Integration for GCP Billing. This allows GCP Billing cloud integrations to be created,\nupdated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst gcpBilling = new wavefront.CloudIntegrationGcpBilling(\"gcp_billing\", {\n    apiKey: \"example-api-key\",\n    jsonKey: \"{...your gcp key ...}\\n\",\n    projectId: \"example-gcp-project\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\ngcp_billing = wavefront.CloudIntegrationGcpBilling(\"gcpBilling\",\n    api_key=\"example-api-key\",\n    json_key=\"\"\"{...your gcp key ...}\n\n\"\"\",\n    project_id=\"example-gcp-project\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var gcpBilling = new Wavefront.CloudIntegrationGcpBilling(\"gcpBilling\", new Wavefront.CloudIntegrationGcpBillingArgs\n        {\n            ApiKey = \"example-api-key\",\n            JsonKey = @\"{...your gcp key ...}\n\n\",\n            ProjectId = \"example-gcp-project\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewCloudIntegrationGcpBilling(ctx, \"gcpBilling\", \u0026wavefront.CloudIntegrationGcpBillingArgs{\n\t\t\tApiKey:    pulumi.String(\"example-api-key\"),\n\t\t\tJsonKey:   pulumi.String(fmt.Sprintf(\"%v%v\", \"{...your gcp key ...}\\n\", \"\\n\")),\n\t\t\tProjectId: pulumi.String(\"example-gcp-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGCP Billing Cloud Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationGcpBilling:CloudIntegrationGcpBilling gcp_billing a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key for Google Cloud Platform (GCP)\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "jsonKey": {
                    "type": "string",
                    "description": "Private key for a Google Cloud Platform (GCP) service account within your project.\nThe account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Google Cloud Platform (GCP) Project Id\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "required": [
                "apiKey",
                "jsonKey",
                "name",
                "projectId",
                "service"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key for Google Cloud Platform (GCP)\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "jsonKey": {
                    "type": "string",
                    "description": "Private key for a Google Cloud Platform (GCP) service account within your project.\nThe account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Google Cloud Platform (GCP) Project Id\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "jsonKey",
                "projectId",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationGcpBilling resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key for Google Cloud Platform (GCP)\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "jsonKey": {
                        "type": "string",
                        "description": "Private key for a Google Cloud Platform (GCP) service account within your project.\nThe account must be at least granted Monitoring Viewer permissions. This key must be in the JSON format generated by GCP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Google Cloud Platform (GCP) Project Id\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic": {
            "description": "Provides a Wavefront Cloud Integration for NewRelic. This allows NewRelic cloud integrations to be created,\nupdated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst newrelic = new wavefront.CloudIntegrationNewRelic(\"newrelic\", {\n    apiKey: \"example-api-key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nnewrelic = wavefront.CloudIntegrationNewRelic(\"newrelic\", api_key=\"example-api-key\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var newrelic = new Wavefront.CloudIntegrationNewRelic(\"newrelic\", new Wavefront.CloudIntegrationNewRelicArgs\n        {\n            ApiKey = \"example-api-key\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewCloudIntegrationNewRelic(ctx, \"newrelic\", \u0026wavefront.CloudIntegrationNewRelicArgs{\n\t\t\tApiKey: pulumi.String(\"example-api-key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNewRelic Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationNewRelic:CloudIntegrationNewRelic newrelic a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "NewRelic REST api key\n"
                },
                "appFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that an application name must match (case-insensitively) iun order to collect metrics\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "hostFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that a host name must match (case-insensitively) in order to collect metrics\n"
                },
                "metricFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/CloudIntegrationNewRelicMetricFilter:CloudIntegrationNewRelicMetricFilter"
                    },
                    "description": "See Metric Filter\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "required": [
                "apiKey",
                "name",
                "service"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "NewRelic REST api key\n"
                },
                "appFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that an application name must match (case-insensitively) iun order to collect metrics\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "hostFilterRegex": {
                    "type": "string",
                    "description": "A regular expression that a host name must match (case-insensitively) in order to collect metrics\n"
                },
                "metricFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/CloudIntegrationNewRelicMetricFilter:CloudIntegrationNewRelicMetricFilter"
                    },
                    "description": "See Metric Filter\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationNewRelic resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "NewRelic REST api key\n"
                    },
                    "appFilterRegex": {
                        "type": "string",
                        "description": "A regular expression that an application name must match (case-insensitively) iun order to collect metrics\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "hostFilterRegex": {
                        "type": "string",
                        "description": "A regular expression that a host name must match (case-insensitively) in order to collect metrics\n"
                    },
                    "metricFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/wavefront:index/CloudIntegrationNewRelicMetricFilter:CloudIntegrationNewRelicMetricFilter"
                        },
                        "description": "See Metric Filter\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/cloudIntegrationTesla:CloudIntegrationTesla": {
            "description": "Provides a Wavefront Cloud Integration for Tesla. This allows NewRelic cloud integrations to be created,\nupdated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst tesla = new wavefront.CloudIntegrationTesla(\"tesla\", {\n    email: \"email@example.com\",\n    password: \"password\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\ntesla = wavefront.CloudIntegrationTesla(\"tesla\",\n    email=\"email@example.com\",\n    password=\"password\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tesla = new Wavefront.CloudIntegrationTesla(\"tesla\", new Wavefront.CloudIntegrationTeslaArgs\n        {\n            Email = \"email@example.com\",\n            Password = \"password\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewCloudIntegrationTesla(ctx, \"tesla\", \u0026wavefront.CloudIntegrationTeslaArgs{\n\t\t\tEmail:    pulumi.String(\"email@example.com\"),\n\t\t\tPassword: pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTesla Integrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/cloudIntegrationTesla:CloudIntegrationTesla tesla a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the Tesla account login\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the Tesla account login\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "required": [
                "email",
                "name",
                "password",
                "service"
            ],
            "inputProperties": {
                "additionalTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the Tesla account login\n"
                },
                "forceSave": {
                    "type": "boolean",
                    "description": "Forces this resource to save, even if errors are present\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of this integration\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the Tesla account login\n"
                },
                "service": {
                    "type": "string",
                    "description": "A value denoting which cloud service this service integrates with\n"
                },
                "serviceRefreshRateInMinutes": {
                    "type": "integer",
                    "description": "How often, in minutes, to refresh the service\n"
                }
            },
            "requiredInputs": [
                "email",
                "password",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudIntegrationTesla resources.\n",
                "properties": {
                    "additionalTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of point tag key-values to add to every point ingested using this integration\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for the Tesla account login\n"
                    },
                    "forceSave": {
                        "type": "boolean",
                        "description": "Forces this resource to save, even if errors are present\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of this integration\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the Tesla account login\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "A value denoting which cloud service this service integrates with\n"
                    },
                    "serviceRefreshRateInMinutes": {
                        "type": "integer",
                        "description": "How often, in minutes, to refresh the service\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/dashboard:Dashboard": {
            "description": "Provides a Wavefront Dashboard resource.  This allows dashboards to be created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst basic = new wavefront.User(\"basic\", {\n    email: \"test+tftesting@example.com\",\n    groups: [\n        \"agent_management\",\n        \"alerts_management\",\n    ],\n});\nconst testDashboard = new wavefront.Dashboard(\"testDashboard\", {\n    description: \"testing, testing\",\n    url: \"tftestcreate\",\n    displaySectionTableOfContents: true,\n    displayQueryParameters: true,\n    canViews: [basic.id],\n    sections: [{\n        name: \"section 1\",\n        rows: [{\n            charts: [{\n                name: \"chart 1\",\n                description: \"chart number 1\",\n                units: \"something per unit\",\n                sources: [{\n                    name: \"source name\",\n                    query: \"ts()\",\n                }],\n                chartSetting: {\n                    type: \"linear\",\n                },\n                summarization: \"MEAN\",\n            }],\n        }],\n    }],\n    parameterDetails: [{\n        name: \"param1\",\n        label: \"param1\",\n        defaultValue: \"Label\",\n        hideFromView: false,\n        parameterType: \"SIMPLE\",\n        valuesToReadableStrings: {\n            Label: \"test\",\n        },\n    }],\n    tags: [\n        \"b\",\n        \"terraform\",\n        \"a\",\n        \"test\",\n    ],\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDashboards can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/dashboard:Dashboard dashboard tftestimport\n```\n\n ",
            "properties": {
                "canModifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users that have modify ACL access to the dashboard\n"
                },
                "canViews": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users that have view ACL access to the dashboard\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-readable description of the dashboard\n"
                },
                "displayQueryParameters": {
                    "type": "boolean",
                    "description": "Whether the dashboard parameters section is opened by default when the dashboard\nis shown\n"
                },
                "displaySectionTableOfContents": {
                    "type": "boolean",
                    "description": "Whether the \"pills\" quick-linked the sections of the dashboard are \ndisplayed by default when the dashboard is shown\n"
                },
                "eventFilterType": {
                    "type": "string",
                    "description": "How charts belonging to this dashboard should display events. BYCHART is default if \nunspecified; Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard\n"
                },
                "parameterDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/DashboardParameterDetail:DashboardParameterDetail"
                    },
                    "description": "The current JSON representation of dashboard parameters. See parameter details\n"
                },
                "sections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/DashboardSection:DashboardSection"
                    },
                    "description": "Dashboard chart sections. See dashboard sections\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to assign to this resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Unique identifier, also URL slug, of the dashboard\n"
                }
            },
            "required": [
                "canModifies",
                "description",
                "name",
                "sections",
                "tags",
                "url"
            ],
            "inputProperties": {
                "canModifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users that have modify ACL access to the dashboard\n"
                },
                "canViews": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users that have view ACL access to the dashboard\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-readable description of the dashboard\n"
                },
                "displayQueryParameters": {
                    "type": "boolean",
                    "description": "Whether the dashboard parameters section is opened by default when the dashboard\nis shown\n"
                },
                "displaySectionTableOfContents": {
                    "type": "boolean",
                    "description": "Whether the \"pills\" quick-linked the sections of the dashboard are \ndisplayed by default when the dashboard is shown\n"
                },
                "eventFilterType": {
                    "type": "string",
                    "description": "How charts belonging to this dashboard should display events. BYCHART is default if \nunspecified; Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dashboard\n"
                },
                "parameterDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/DashboardParameterDetail:DashboardParameterDetail"
                    },
                    "description": "The current JSON representation of dashboard parameters. See parameter details\n"
                },
                "sections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/wavefront:index/DashboardSection:DashboardSection"
                    },
                    "description": "Dashboard chart sections. See dashboard sections\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to assign to this resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Unique identifier, also URL slug, of the dashboard\n"
                }
            },
            "requiredInputs": [
                "description",
                "sections",
                "tags",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "canModifies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users that have modify ACL access to the dashboard\n"
                    },
                    "canViews": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users that have view ACL access to the dashboard\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-readable description of the dashboard\n"
                    },
                    "displayQueryParameters": {
                        "type": "boolean",
                        "description": "Whether the dashboard parameters section is opened by default when the dashboard\nis shown\n"
                    },
                    "displaySectionTableOfContents": {
                        "type": "boolean",
                        "description": "Whether the \"pills\" quick-linked the sections of the dashboard are \ndisplayed by default when the dashboard is shown\n"
                    },
                    "eventFilterType": {
                        "type": "string",
                        "description": "How charts belonging to this dashboard should display events. BYCHART is default if \nunspecified; Valid options are: `BYCHART`, `AUTOMATIC`, `ALL`, `NONE`, `BYDASHBOARD`, and `BYCHARTANDDASHBOARD`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the dashboard\n"
                    },
                    "parameterDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/wavefront:index/DashboardParameterDetail:DashboardParameterDetail"
                        },
                        "description": "The current JSON representation of dashboard parameters. See parameter details\n"
                    },
                    "sections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/wavefront:index/DashboardSection:DashboardSection"
                        },
                        "description": "Dashboard chart sections. See dashboard sections\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of tags to assign to this resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Unique identifier, also URL slug, of the dashboard\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/dashboardJson:DashboardJson": {
            "description": "Provides a Wavefront Dashboard JSON resource.  This allows dashboards to be created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst testDashboardJson = new wavefront.DashboardJson(\"test_dashboard_json\", {\n    dashboardJson: `{\n  \"name\": \"Terraform Test Dashboard Json\",\n  \"description\": \"a\",\n  \"eventFilterType\": \"BYCHART\",\n  \"eventQuery\": \"\",\n  \"defaultTimeWindow\": \"\",\n  \"url\": \"tftestimport\",\n  \"displayDescription\": false,\n  \"displaySectionTableOfContents\": true,\n  \"displayQueryParameters\": false,\n  \"sections\": [\n    {\n      \"name\": \"section 1\",\n      \"rows\": [\n        {\n          \"charts\": [\n            {\n              \"name\": \"chart 1\",\n              \"sources\": [\n                {\n                  \"name\": \"source 1\",\n                  \"query\": \"ts()\",\n                  \"scatterPlotSource\": \"Y\",\n                  \"querybuilderEnabled\": false,\n                  \"sourceDescription\": \"\"\n                }\n              ],\n              \"units\": \"someunit\",\n              \"base\": 0,\n              \"noDefaultEvents\": false,\n              \"interpolatePoints\": false,\n              \"includeObsoleteMetrics\": false,\n              \"description\": \"This is chart 1, showing something\",\n              \"chartSettings\": {\n                \"type\": \"markdown-widget\",\n                \"max\": 100,\n                \"expectedDataSpacing\": 120,\n                \"windowing\": \"full\",\n                \"windowSize\": 10,\n                \"autoColumnTags\": false,\n                \"columnTags\": \"deprecated\",\n                \"tagMode\": \"all\",\n                \"numTags\": 2,\n                \"customTags\": [\n                  \"tag1\",\n                  \"tag2\"\n                ],\n                \"groupBySource\": true,\n                \"y1Max\": 100,\n                \"y1Units\": \"units\",\n                \"y0ScaleSIBy1024\": true,\n                \"y1ScaleSIBy1024\": true,\n                \"y0UnitAutoscaling\": true,\n                \"y1UnitAutoscaling\": true,\n                \"fixedLegendEnabled\": true,\n                \"fixedLegendUseRawStats\": true,\n                \"fixedLegendPosition\": \"RIGHT\",\n                \"fixedLegendDisplayStats\": [\n                  \"stat1\",\n                  \"stat2\"\n                ],\n                \"fixedLegendFilterSort\": \"TOP\",\n                \"fixedLegendFilterLimit\": 1,\n                \"fixedLegendFilterField\": \"CURRENT\",\n                \"plainMarkdownContent\": \"markdown content\"\n              },\n              \"summarization\": \"MEAN\"\n            }\n          ],\n          \"heightFactor\": 50\n        }\n      ]\n    }\n  ],\n  \"parameterDetails\": {\n    \"param\": {\n      \"hideFromView\": false,\n      \"description\": null,\n      \"allowAll\": null,\n      \"tagKey\": null,\n      \"queryValue\": null,\n      \"dynamicFieldType\": null,\n      \"reverseDynSort\": null,\n      \"parameterType\": \"SIMPLE\",\n      \"label\": \"test\",\n      \"defaultValue\": \"Label\",\n      \"valuesToReadableStrings\": {\n        \"Label\": \"test\"\n      },\n      \"selectedLabel\": \"Label\",\n      \"value\": \"test\"\n    }\n  },\n  \"tags\" :{\n    \"customerTags\":  [\"terraform\"]\n  }\n}\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\ntest_dashboard_json = wavefront.DashboardJson(\"testDashboardJson\", dashboard_json=\"\"\"{\n  \"name\": \"Terraform Test Dashboard Json\",\n  \"description\": \"a\",\n  \"eventFilterType\": \"BYCHART\",\n  \"eventQuery\": \"\",\n  \"defaultTimeWindow\": \"\",\n  \"url\": \"tftestimport\",\n  \"displayDescription\": false,\n  \"displaySectionTableOfContents\": true,\n  \"displayQueryParameters\": false,\n  \"sections\": [\n    {\n      \"name\": \"section 1\",\n      \"rows\": [\n        {\n          \"charts\": [\n            {\n              \"name\": \"chart 1\",\n              \"sources\": [\n                {\n                  \"name\": \"source 1\",\n                  \"query\": \"ts()\",\n                  \"scatterPlotSource\": \"Y\",\n                  \"querybuilderEnabled\": false,\n                  \"sourceDescription\": \"\"\n                }\n              ],\n              \"units\": \"someunit\",\n              \"base\": 0,\n              \"noDefaultEvents\": false,\n              \"interpolatePoints\": false,\n              \"includeObsoleteMetrics\": false,\n              \"description\": \"This is chart 1, showing something\",\n              \"chartSettings\": {\n                \"type\": \"markdown-widget\",\n                \"max\": 100,\n                \"expectedDataSpacing\": 120,\n                \"windowing\": \"full\",\n                \"windowSize\": 10,\n                \"autoColumnTags\": false,\n                \"columnTags\": \"deprecated\",\n                \"tagMode\": \"all\",\n                \"numTags\": 2,\n                \"customTags\": [\n                  \"tag1\",\n                  \"tag2\"\n                ],\n                \"groupBySource\": true,\n                \"y1Max\": 100,\n                \"y1Units\": \"units\",\n                \"y0ScaleSIBy1024\": true,\n                \"y1ScaleSIBy1024\": true,\n                \"y0UnitAutoscaling\": true,\n                \"y1UnitAutoscaling\": true,\n                \"fixedLegendEnabled\": true,\n                \"fixedLegendUseRawStats\": true,\n                \"fixedLegendPosition\": \"RIGHT\",\n                \"fixedLegendDisplayStats\": [\n                  \"stat1\",\n                  \"stat2\"\n                ],\n                \"fixedLegendFilterSort\": \"TOP\",\n                \"fixedLegendFilterLimit\": 1,\n                \"fixedLegendFilterField\": \"CURRENT\",\n                \"plainMarkdownContent\": \"markdown content\"\n              },\n              \"summarization\": \"MEAN\"\n            }\n          ],\n          \"heightFactor\": 50\n        }\n      ]\n    }\n  ],\n  \"parameterDetails\": {\n    \"param\": {\n      \"hideFromView\": false,\n      \"description\": null,\n      \"allowAll\": null,\n      \"tagKey\": null,\n      \"queryValue\": null,\n      \"dynamicFieldType\": null,\n      \"reverseDynSort\": null,\n      \"parameterType\": \"SIMPLE\",\n      \"label\": \"test\",\n      \"defaultValue\": \"Label\",\n      \"valuesToReadableStrings\": {\n        \"Label\": \"test\"\n      },\n      \"selectedLabel\": \"Label\",\n      \"value\": \"test\"\n    }\n  },\n  \"tags\" :{\n    \"customerTags\":  [\"terraform\"]\n  }\n}\n\n\"\"\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testDashboardJson = new Wavefront.DashboardJson(\"testDashboardJson\", new Wavefront.DashboardJsonArgs\n        {\n            DashboardJson = @\"{\n  \"\"name\"\": \"\"Terraform Test Dashboard Json\"\",\n  \"\"description\"\": \"\"a\"\",\n  \"\"eventFilterType\"\": \"\"BYCHART\"\",\n  \"\"eventQuery\"\": \"\"\"\",\n  \"\"defaultTimeWindow\"\": \"\"\"\",\n  \"\"url\"\": \"\"tftestimport\"\",\n  \"\"displayDescription\"\": false,\n  \"\"displaySectionTableOfContents\"\": true,\n  \"\"displayQueryParameters\"\": false,\n  \"\"sections\"\": [\n    {\n      \"\"name\"\": \"\"section 1\"\",\n      \"\"rows\"\": [\n        {\n          \"\"charts\"\": [\n            {\n              \"\"name\"\": \"\"chart 1\"\",\n              \"\"sources\"\": [\n                {\n                  \"\"name\"\": \"\"source 1\"\",\n                  \"\"query\"\": \"\"ts()\"\",\n                  \"\"scatterPlotSource\"\": \"\"Y\"\",\n                  \"\"querybuilderEnabled\"\": false,\n                  \"\"sourceDescription\"\": \"\"\"\"\n                }\n              ],\n              \"\"units\"\": \"\"someunit\"\",\n              \"\"base\"\": 0,\n              \"\"noDefaultEvents\"\": false,\n              \"\"interpolatePoints\"\": false,\n              \"\"includeObsoleteMetrics\"\": false,\n              \"\"description\"\": \"\"This is chart 1, showing something\"\",\n              \"\"chartSettings\"\": {\n                \"\"type\"\": \"\"markdown-widget\"\",\n                \"\"max\"\": 100,\n                \"\"expectedDataSpacing\"\": 120,\n                \"\"windowing\"\": \"\"full\"\",\n                \"\"windowSize\"\": 10,\n                \"\"autoColumnTags\"\": false,\n                \"\"columnTags\"\": \"\"deprecated\"\",\n                \"\"tagMode\"\": \"\"all\"\",\n                \"\"numTags\"\": 2,\n                \"\"customTags\"\": [\n                  \"\"tag1\"\",\n                  \"\"tag2\"\"\n                ],\n                \"\"groupBySource\"\": true,\n                \"\"y1Max\"\": 100,\n                \"\"y1Units\"\": \"\"units\"\",\n                \"\"y0ScaleSIBy1024\"\": true,\n                \"\"y1ScaleSIBy1024\"\": true,\n                \"\"y0UnitAutoscaling\"\": true,\n                \"\"y1UnitAutoscaling\"\": true,\n                \"\"fixedLegendEnabled\"\": true,\n                \"\"fixedLegendUseRawStats\"\": true,\n                \"\"fixedLegendPosition\"\": \"\"RIGHT\"\",\n                \"\"fixedLegendDisplayStats\"\": [\n                  \"\"stat1\"\",\n                  \"\"stat2\"\"\n                ],\n                \"\"fixedLegendFilterSort\"\": \"\"TOP\"\",\n                \"\"fixedLegendFilterLimit\"\": 1,\n                \"\"fixedLegendFilterField\"\": \"\"CURRENT\"\",\n                \"\"plainMarkdownContent\"\": \"\"markdown content\"\"\n              },\n              \"\"summarization\"\": \"\"MEAN\"\"\n            }\n          ],\n          \"\"heightFactor\"\": 50\n        }\n      ]\n    }\n  ],\n  \"\"parameterDetails\"\": {\n    \"\"param\"\": {\n      \"\"hideFromView\"\": false,\n      \"\"description\"\": null,\n      \"\"allowAll\"\": null,\n      \"\"tagKey\"\": null,\n      \"\"queryValue\"\": null,\n      \"\"dynamicFieldType\"\": null,\n      \"\"reverseDynSort\"\": null,\n      \"\"parameterType\"\": \"\"SIMPLE\"\",\n      \"\"label\"\": \"\"test\"\",\n      \"\"defaultValue\"\": \"\"Label\"\",\n      \"\"valuesToReadableStrings\"\": {\n        \"\"Label\"\": \"\"test\"\"\n      },\n      \"\"selectedLabel\"\": \"\"Label\"\",\n      \"\"value\"\": \"\"test\"\"\n    }\n  },\n  \"\"tags\"\" :{\n    \"\"customerTags\"\":  [\"\"terraform\"\"]\n  }\n}\n\n\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewDashboardJson(ctx, \"testDashboardJson\", \u0026wavefront.DashboardJsonArgs{\n\t\t\tDashboardJson: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"{\\n\", \"  \\\"name\\\": \\\"Terraform Test Dashboard Json\\\",\\n\", \"  \\\"description\\\": \\\"a\\\",\\n\", \"  \\\"eventFilterType\\\": \\\"BYCHART\\\",\\n\", \"  \\\"eventQuery\\\": \\\"\\\",\\n\", \"  \\\"defaultTimeWindow\\\": \\\"\\\",\\n\", \"  \\\"url\\\": \\\"tftestimport\\\",\\n\", \"  \\\"displayDescription\\\": false,\\n\", \"  \\\"displaySectionTableOfContents\\\": true,\\n\", \"  \\\"displayQueryParameters\\\": false,\\n\", \"  \\\"sections\\\": [\\n\", \"    {\\n\", \"      \\\"name\\\": \\\"section 1\\\",\\n\", \"      \\\"rows\\\": [\\n\", \"        {\\n\", \"          \\\"charts\\\": [\\n\", \"            {\\n\", \"              \\\"name\\\": \\\"chart 1\\\",\\n\", \"              \\\"sources\\\": [\\n\", \"                {\\n\", \"                  \\\"name\\\": \\\"source 1\\\",\\n\", \"                  \\\"query\\\": \\\"ts()\\\",\\n\", \"                  \\\"scatterPlotSource\\\": \\\"Y\\\",\\n\", \"                  \\\"querybuilderEnabled\\\": false,\\n\", \"                  \\\"sourceDescription\\\": \\\"\\\"\\n\", \"                }\\n\", \"              ],\\n\", \"              \\\"units\\\": \\\"someunit\\\",\\n\", \"              \\\"base\\\": 0,\\n\", \"              \\\"noDefaultEvents\\\": false,\\n\", \"              \\\"interpolatePoints\\\": false,\\n\", \"              \\\"includeObsoleteMetrics\\\": false,\\n\", \"              \\\"description\\\": \\\"This is chart 1, showing something\\\",\\n\", \"              \\\"chartSettings\\\": {\\n\", \"                \\\"type\\\": \\\"markdown-widget\\\",\\n\", \"                \\\"max\\\": 100,\\n\", \"                \\\"expectedDataSpacing\\\": 120,\\n\", \"                \\\"windowing\\\": \\\"full\\\",\\n\", \"                \\\"windowSize\\\": 10,\\n\", \"                \\\"autoColumnTags\\\": false,\\n\", \"                \\\"columnTags\\\": \\\"deprecated\\\",\\n\", \"                \\\"tagMode\\\": \\\"all\\\",\\n\", \"                \\\"numTags\\\": 2,\\n\", \"                \\\"customTags\\\": [\\n\", \"                  \\\"tag1\\\",\\n\", \"                  \\\"tag2\\\"\\n\", \"                ],\\n\", \"                \\\"groupBySource\\\": true,\\n\", \"                \\\"y1Max\\\": 100,\\n\", \"                \\\"y1Units\\\": \\\"units\\\",\\n\", \"                \\\"y0ScaleSIBy1024\\\": true,\\n\", \"                \\\"y1ScaleSIBy1024\\\": true,\\n\", \"                \\\"y0UnitAutoscaling\\\": true,\\n\", \"                \\\"y1UnitAutoscaling\\\": true,\\n\", \"                \\\"fixedLegendEnabled\\\": true,\\n\", \"                \\\"fixedLegendUseRawStats\\\": true,\\n\", \"                \\\"fixedLegendPosition\\\": \\\"RIGHT\\\",\\n\", \"                \\\"fixedLegendDisplayStats\\\": [\\n\", \"                  \\\"stat1\\\",\\n\", \"                  \\\"stat2\\\"\\n\", \"                ],\\n\", \"                \\\"fixedLegendFilterSort\\\": \\\"TOP\\\",\\n\", \"                \\\"fixedLegendFilterLimit\\\": 1,\\n\", \"                \\\"fixedLegendFilterField\\\": \\\"CURRENT\\\",\\n\", \"                \\\"plainMarkdownContent\\\": \\\"markdown content\\\"\\n\", \"              },\\n\", \"              \\\"summarization\\\": \\\"MEAN\\\"\\n\", \"            }\\n\", \"          ],\\n\", \"          \\\"heightFactor\\\": 50\\n\", \"        }\\n\", \"      ]\\n\", \"    }\\n\", \"  ],\\n\", \"  \\\"parameterDetails\\\": {\\n\", \"    \\\"param\\\": {\\n\", \"      \\\"hideFromView\\\": false,\\n\", \"      \\\"description\\\": null,\\n\", \"      \\\"allowAll\\\": null,\\n\", \"      \\\"tagKey\\\": null,\\n\", \"      \\\"queryValue\\\": null,\\n\", \"      \\\"dynamicFieldType\\\": null,\\n\", \"      \\\"reverseDynSort\\\": null,\\n\", \"      \\\"parameterType\\\": \\\"SIMPLE\\\",\\n\", \"      \\\"label\\\": \\\"test\\\",\\n\", \"      \\\"defaultValue\\\": \\\"Label\\\",\\n\", \"      \\\"valuesToReadableStrings\\\": {\\n\", \"        \\\"Label\\\": \\\"test\\\"\\n\", \"      },\\n\", \"      \\\"selectedLabel\\\": \\\"Label\\\",\\n\", \"      \\\"value\\\": \\\"test\\\"\\n\", \"    }\\n\", \"  },\\n\", \"  \\\"tags\\\" :{\\n\", \"    \\\"customerTags\\\":  [\\\"terraform\\\"]\\n\", \"  }\\n\", \"}\\n\", \"\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDashboard JSON can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/dashboardJson:DashboardJson dashboard_json tftestimport\n```\n\n ",
            "properties": {
                "dashboardJson": {
                    "type": "string",
                    "description": "See [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance) \nfor instructions on how to get to your API documentation for more details.\n",
                    "language": {
                        "csharp": {
                            "name": "JSON"
                        }
                    }
                }
            },
            "required": [
                "dashboardJson"
            ],
            "inputProperties": {
                "dashboardJson": {
                    "type": "string",
                    "description": "See [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance) \nfor instructions on how to get to your API documentation for more details.\n",
                    "language": {
                        "csharp": {
                            "name": "JSON"
                        }
                    }
                }
            },
            "requiredInputs": [
                "dashboardJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardJson resources.\n",
                "properties": {
                    "dashboardJson": {
                        "type": "string",
                        "description": "See [Wavefront API Documentation](https://docs.wavefront.com/wavefront_api.html#api-documentation-wavefront-instance) \nfor instructions on how to get to your API documentation for more details.\n",
                        "language": {
                            "csharp": {
                                "name": "JSON"
                            }
                        }
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/derivedMetric:DerivedMetric": {
            "description": "Provides a Wavefront Derived Metric Resource. This allows derived metrics to be created,\nupdated, and deleted.\n  \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst derived = new wavefront.DerivedMetric(\"derived\", {\n    minutes: 5,\n    query: \"aliasMetric(5, \\\"some.metric\\\")\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nderived = wavefront.DerivedMetric(\"derived\",\n    minutes=5,\n    query=\"aliasMetric(5, \\\"some.metric\\\")\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var derived = new Wavefront.DerivedMetric(\"derived\", new Wavefront.DerivedMetricArgs\n        {\n            Minutes = 5,\n            Query = \"aliasMetric(5, \\\"some.metric\\\")\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewDerivedMetric(ctx, \"derived\", \u0026wavefront.DerivedMetricArgs{\n\t\t\tMinutes: pulumi.Int(5),\n\t\t\tQuery:   pulumi.String(\"aliasMetric(5, \\\"some.metric\\\")\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDerived Metrics can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/derivedMetric:DerivedMetric derived_metric 1577102900578\n```\n\n ",
            "properties": {
                "additionalInformation": {
                    "type": "string",
                    "description": "User-supplied additional explanatory information for the derived metric\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "How frequently the query generating the derived metric is run\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Derived Metric in Wavefront\n"
                },
                "query": {
                    "type": "string",
                    "description": "A Wavefront query that is evaluated at regular intervals (default `1m`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to assign to this resource.\n"
                }
            },
            "required": [
                "minutes",
                "name",
                "query"
            ],
            "inputProperties": {
                "additionalInformation": {
                    "type": "string",
                    "description": "User-supplied additional explanatory information for the derived metric\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "How frequently the query generating the derived metric is run\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Derived Metric in Wavefront\n"
                },
                "query": {
                    "type": "string",
                    "description": "A Wavefront query that is evaluated at regular intervals (default `1m`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to assign to this resource.\n"
                }
            },
            "requiredInputs": [
                "minutes",
                "query"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DerivedMetric resources.\n",
                "properties": {
                    "additionalInformation": {
                        "type": "string",
                        "description": "User-supplied additional explanatory information for the derived metric\n"
                    },
                    "minutes": {
                        "type": "integer",
                        "description": "How frequently the query generating the derived metric is run\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Derived Metric in Wavefront\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "A Wavefront query that is evaluated at regular intervals (default `1m`)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of tags to assign to this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/externalLink:ExternalLink": {
            "description": "Provides a Wavefront External Link Resource. This allows external links to be created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst basic = new wavefront.ExternalLink(\"basic\", {\n    description: \"An external link description\",\n    template: \"https://example.com/source={{{source}}}\u0026startTime={{startEpochMillis}}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nbasic = wavefront.ExternalLink(\"basic\",\n    description=\"An external link description\",\n    template=\"https://example.com/source={{{source}}}\u0026startTime={{startEpochMillis}}\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var basic = new Wavefront.ExternalLink(\"basic\", new Wavefront.ExternalLinkArgs\n        {\n            Description = \"An external link description\",\n            Template = \"https://example.com/source={{{source}}}\u0026startTime={{startEpochMillis}}\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewExternalLink(ctx, \"basic\", \u0026wavefront.ExternalLinkArgs{\n\t\t\tDescription: pulumi.String(\"An external link description\"),\n\t\t\tTemplate:    pulumi.String(\"https://example.com/source={{{source}}}\u0026startTime={{startEpochMillis}}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nMaintenance windows can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/externalLink:ExternalLink basic fVj6fz6zYC4aBkID\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Human-readable description for this link\n"
                },
                "isLogIntegration": {
                    "type": "boolean",
                    "description": "Whether this is a \"Log Integration\" subType of external link\n"
                },
                "metricFilterRegex": {
                    "type": "string",
                    "description": "Controls whether a link is displayed in the context menu of a highlighted series. If present, the metric name of the highlighted series must match this regular expression in order for the link to be displayed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the external link\n"
                },
                "pointTagFilterRegexes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Controls whether a link is displayed in the context menu of a highlighted series. This is a map from string to regular expression. The highlighted series must contain point tags whose keys are present in the keys of this map and whose values match the regular expressions associated with those keys in order for the link to be displayed\n"
                },
                "sourceFilterRegex": {
                    "type": "string",
                    "description": "Controls whether a link is displayed in the context menu of a highlighted series. If present, the source name of the highlighted series must match this regular expression in order for the link to be displayed.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The mustache template for this link. The template must expand to a full URL, including scheme, origin, etc.\n"
                }
            },
            "required": [
                "description",
                "name",
                "template"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Human-readable description for this link\n"
                },
                "isLogIntegration": {
                    "type": "boolean",
                    "description": "Whether this is a \"Log Integration\" subType of external link\n"
                },
                "metricFilterRegex": {
                    "type": "string",
                    "description": "Controls whether a link is displayed in the context menu of a highlighted series. If present, the metric name of the highlighted series must match this regular expression in order for the link to be displayed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the external link\n"
                },
                "pointTagFilterRegexes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Controls whether a link is displayed in the context menu of a highlighted series. This is a map from string to regular expression. The highlighted series must contain point tags whose keys are present in the keys of this map and whose values match the regular expressions associated with those keys in order for the link to be displayed\n"
                },
                "sourceFilterRegex": {
                    "type": "string",
                    "description": "Controls whether a link is displayed in the context menu of a highlighted series. If present, the source name of the highlighted series must match this regular expression in order for the link to be displayed.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The mustache template for this link. The template must expand to a full URL, including scheme, origin, etc.\n"
                }
            },
            "requiredInputs": [
                "description",
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalLink resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Human-readable description for this link\n"
                    },
                    "isLogIntegration": {
                        "type": "boolean",
                        "description": "Whether this is a \"Log Integration\" subType of external link\n"
                    },
                    "metricFilterRegex": {
                        "type": "string",
                        "description": "Controls whether a link is displayed in the context menu of a highlighted series. If present, the metric name of the highlighted series must match this regular expression in order for the link to be displayed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the external link\n"
                    },
                    "pointTagFilterRegexes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Controls whether a link is displayed in the context menu of a highlighted series. This is a map from string to regular expression. The highlighted series must contain point tags whose keys are present in the keys of this map and whose values match the regular expressions associated with those keys in order for the link to be displayed\n"
                    },
                    "sourceFilterRegex": {
                        "type": "string",
                        "description": "Controls whether a link is displayed in the context menu of a highlighted series. If present, the source name of the highlighted series must match this regular expression in order for the link to be displayed.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The mustache template for this link. The template must expand to a full URL, including scheme, origin, etc.\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/maintenanceWindow:MaintenanceWindow": {
            "description": "Provides a Wavefront Maintenance Window Resource. This allows maintenance windows to be created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst basic = new wavefront.MaintenanceWindow(\"basic\", {\n    endTimeInSeconds: 1601123456,\n    reason: \"Routine maintenance for 2020\",\n    relevantHostNames: [\n        \"my_hostname\",\n        \"my_other_hostname\",\n    ],\n    startTimeInSeconds: 1600123456,\n    title: \"Routine maintenance\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nbasic = wavefront.MaintenanceWindow(\"basic\",\n    end_time_in_seconds=1601123456,\n    reason=\"Routine maintenance for 2020\",\n    relevant_host_names=[\n        \"my_hostname\",\n        \"my_other_hostname\",\n    ],\n    start_time_in_seconds=1600123456,\n    title=\"Routine maintenance\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var basic = new Wavefront.MaintenanceWindow(\"basic\", new Wavefront.MaintenanceWindowArgs\n        {\n            EndTimeInSeconds = 1601123456,\n            Reason = \"Routine maintenance for 2020\",\n            RelevantHostNames = \n            {\n                \"my_hostname\",\n                \"my_other_hostname\",\n            },\n            StartTimeInSeconds = 1600123456,\n            Title = \"Routine maintenance\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewMaintenanceWindow(ctx, \"basic\", \u0026wavefront.MaintenanceWindowArgs{\n\t\t\tEndTimeInSeconds: pulumi.Int(1601123456),\n\t\t\tReason:           pulumi.String(\"Routine maintenance for 2020\"),\n\t\t\tRelevantHostNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my_hostname\"),\n\t\t\t\tpulumi.String(\"my_other_hostname\"),\n\t\t\t},\n\t\t\tStartTimeInSeconds: pulumi.Int(1600123456),\n\t\t\tTitle:              pulumi.String(\"Routine maintenance\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nMaintenance windows can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/maintenanceWindow:MaintenanceWindow basic 1600383357095\n```\n\n ",
            "properties": {
                "endTimeInSeconds": {
                    "type": "integer",
                    "description": "end time in seconds after 1 Jan 1970 GMT.\n"
                },
                "hostTagGroupHostNamesGroupAnded": {
                    "type": "boolean",
                    "description": "If true, a source/host must be in 'relevantHostNames' and have tags matching the specification formed by 'relevantHostTags' and 'relevantHostTagsAnded' in order for this maintenance window to apply. If false, a source/host must either be in 'relevantHostNames' or match 'relevantHostTags' and 'relevantHostTagsAnded'. Default: false\n"
                },
                "reason": {
                    "type": "string",
                    "description": "The reason for the maintenance window\n"
                },
                "relevantCustomerTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of alert tags whose matching alerts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.\n"
                },
                "relevantHostNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of source/host names that will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.\n"
                },
                "relevantHostTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of source/host tags whose matching sources/hosts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.\n"
                },
                "relevantHostTagsAnded": {
                    "type": "boolean",
                    "description": "Whether to AND source/host tags listed in relevantHostTags. If true, a source/host must contain all tags in order for the maintenance window to apply. If false, the tags are OR'ed, and a source/host must contain one of the tags. Default: false\n"
                },
                "startTimeInSeconds": {
                    "type": "integer",
                    "description": "start time in seconds after 1 Jan 1970 GMT.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the maintenance window\n"
                }
            },
            "required": [
                "endTimeInSeconds",
                "reason",
                "startTimeInSeconds",
                "title"
            ],
            "inputProperties": {
                "endTimeInSeconds": {
                    "type": "integer",
                    "description": "end time in seconds after 1 Jan 1970 GMT.\n"
                },
                "hostTagGroupHostNamesGroupAnded": {
                    "type": "boolean",
                    "description": "If true, a source/host must be in 'relevantHostNames' and have tags matching the specification formed by 'relevantHostTags' and 'relevantHostTagsAnded' in order for this maintenance window to apply. If false, a source/host must either be in 'relevantHostNames' or match 'relevantHostTags' and 'relevantHostTagsAnded'. Default: false\n"
                },
                "reason": {
                    "type": "string",
                    "description": "The reason for the maintenance window\n"
                },
                "relevantCustomerTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of alert tags whose matching alerts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.\n"
                },
                "relevantHostNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of source/host names that will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.\n"
                },
                "relevantHostTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of source/host tags whose matching sources/hosts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.\n"
                },
                "relevantHostTagsAnded": {
                    "type": "boolean",
                    "description": "Whether to AND source/host tags listed in relevantHostTags. If true, a source/host must contain all tags in order for the maintenance window to apply. If false, the tags are OR'ed, and a source/host must contain one of the tags. Default: false\n"
                },
                "startTimeInSeconds": {
                    "type": "integer",
                    "description": "start time in seconds after 1 Jan 1970 GMT.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the maintenance window\n"
                }
            },
            "requiredInputs": [
                "endTimeInSeconds",
                "reason",
                "startTimeInSeconds",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaintenanceWindow resources.\n",
                "properties": {
                    "endTimeInSeconds": {
                        "type": "integer",
                        "description": "end time in seconds after 1 Jan 1970 GMT.\n"
                    },
                    "hostTagGroupHostNamesGroupAnded": {
                        "type": "boolean",
                        "description": "If true, a source/host must be in 'relevantHostNames' and have tags matching the specification formed by 'relevantHostTags' and 'relevantHostTagsAnded' in order for this maintenance window to apply. If false, a source/host must either be in 'relevantHostNames' or match 'relevantHostTags' and 'relevantHostTagsAnded'. Default: false\n"
                    },
                    "reason": {
                        "type": "string",
                        "description": "The reason for the maintenance window\n"
                    },
                    "relevantCustomerTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of alert tags whose matching alerts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.\n"
                    },
                    "relevantHostNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of source/host names that will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.\n"
                    },
                    "relevantHostTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of source/host tags whose matching sources/hosts will be put into maintenance because of this maintenance window. At least one of relevant_customer_tags, relevant_host_tags, or relevant_host_names is required.\n"
                    },
                    "relevantHostTagsAnded": {
                        "type": "boolean",
                        "description": "Whether to AND source/host tags listed in relevantHostTags. If true, a source/host must contain all tags in order for the maintenance window to apply. If false, the tags are OR'ed, and a source/host must contain one of the tags. Default: false\n"
                    },
                    "startTimeInSeconds": {
                        "type": "integer",
                        "description": "start time in seconds after 1 Jan 1970 GMT.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the maintenance window\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/role:Role": {
            "description": "Provides a Wavefront Role Resource. This allows user groups to be created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst role = new wavefront.Role(\"role\", {});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nrole = wavefront.Role(\"role\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var role = new Wavefront.Role(\"role\", new Wavefront.RoleArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewRole(ctx, \"role\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUser Groups can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/role:Role some_group a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "assignees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user groups or accounts to assign to this role.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the user group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of permissions to assign to this role. Valid options are \n`agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,\n`host_tag_management`, `metrics_management`, `user_management`\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "assignees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user groups or accounts to assign to this role.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the user group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of permissions to assign to this role. Valid options are \n`agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,\n`host_tag_management`, `metrics_management`, `user_management`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "assignees": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user groups or accounts to assign to this role.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the user group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of permissions to assign to this role. Valid options are \n`agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,\n`host_tag_management`, `metrics_management`, `user_management`\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/serviceAccount:ServiceAccount": {
            "description": "Provides a Wavefront Service Account Resource. This allows service accounts to be created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst basic = new wavefront.ServiceAccount(\"basic\", {\n    active: true,\n    identifier: \"sa::tftesting\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nbasic = wavefront.ServiceAccount(\"basic\",\n    active=True,\n    identifier=\"sa::tftesting\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var basic = new Wavefront.ServiceAccount(\"basic\", new Wavefront.ServiceAccountArgs\n        {\n            Active = true,\n            Identifier = \"sa::tftesting\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewServiceAccount(ctx, \"basic\", \u0026wavefront.ServiceAccountArgs{\n\t\t\tActive:     pulumi.Bool(true),\n\t\t\tIdentifier: pulumi.String(\"sa::tftesting\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nService accounts can be imported using `identifier`, e.g.\n\n```sh\n $ pulumi import wavefront:index/serviceAccount:ServiceAccount basic sa::tftesting\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether or not the service account is active\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the service account\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The (unique) identifier of the service account to create. Must start with sa::\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permission to grant to this service account.  Valid options are\n`agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,\n`host_tag_management`, `metrics_management`, `user_management`\n"
                },
                "userGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user groups for this service account\n"
                }
            },
            "required": [
                "identifier",
                "permissions",
                "userGroups"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether or not the service account is active\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the service account\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The (unique) identifier of the service account to create. Must start with sa::\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permission to grant to this service account.  Valid options are\n`agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,\n`host_tag_management`, `metrics_management`, `user_management`\n"
                },
                "userGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user groups for this service account\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether or not the service account is active\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the service account\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The (unique) identifier of the service account to create. Must start with sa::\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of permission to grant to this service account.  Valid options are\n`agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,\n`host_tag_management`, `metrics_management`, `user_management`\n"
                    },
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of user groups for this service account\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/user:User": {
            "description": "Provides a Wavefront User Resource. This allows users to be created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst basic = new wavefront.User(\"basic\", {\n    email: \"test+tftesting@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nbasic = wavefront.User(\"basic\", email=\"test+tftesting@example.com\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var basic = new Wavefront.User(\"basic\", new Wavefront.UserArgs\n        {\n            Email = \"test+tftesting@example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewUser(ctx, \"basic\", \u0026wavefront.UserArgs{\n\t\t\tEmail: pulumi.String(\"test+tftesting@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUsers can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/user:User some_user test@example.com\n```\n\n ",
            "properties": {
                "customer": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "description": "The (unique) identifier of the user to create. Must be a valid email address\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permission to grant to this user.  Valid options are\n`agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,\n`host_tag_management`, `metrics_management`, `user_management`\n"
                },
                "userGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user groups to this user\n"
                }
            },
            "required": [
                "customer",
                "email",
                "permissions",
                "userGroups"
            ],
            "inputProperties": {
                "customer": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "description": "The (unique) identifier of the user to create. Must be a valid email address\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permission to grant to this user.  Valid options are\n`agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,\n`host_tag_management`, `metrics_management`, `user_management`\n"
                },
                "userGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user groups to this user\n"
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "customer": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "description": "The (unique) identifier of the user to create. Must be a valid email address\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of permission to grant to this user.  Valid options are\n`agent_management`, `alerts_management`, `dashboard_management`, `embedded_charts`, `events_management`, `external_links_management`,\n`host_tag_management`, `metrics_management`, `user_management`\n"
                    },
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of user groups to this user\n"
                    }
                },
                "type": "object"
            }
        },
        "wavefront:index/userGroup:UserGroup": {
            "description": "Provides a Wavefront User Group Resource. This allows user groups to be created, updated, and deleted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\nconst basic = new wavefront.UserGroup(\"basic\", {\n    description: \"Basic User Group for Unit Tests\",\n});\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\nbasic = wavefront.UserGroup(\"basic\", description=\"Basic User Group for Unit Tests\")\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var basic = new Wavefront.UserGroup(\"basic\", new Wavefront.UserGroupArgs\n        {\n            Description = \"Basic User Group for Unit Tests\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.NewUserGroup(ctx, \"basic\", \u0026wavefront.UserGroupArgs{\n\t\t\tDescription: pulumi.String(\"Basic User Group for Unit Tests\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUser Groups can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import wavefront:index/userGroup:UserGroup some_group a411c16b-3cf7-4f03-bf11-8ca05aab898d\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A short description of the user group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group\n"
                }
            },
            "required": [
                "description",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A short description of the user group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group\n"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A short description of the user group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "wavefront:index/getDefaultUserGroup:getDefaultUserGroup": {
            "description": "Use this data source to get the Group ID of the `Everyone` group in Wavefront. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as wavefront from \"@pulumi/wavefront\";\n\n// Get the default user group \"Everyone\"\nconst everyoneGroup = pulumi.output(wavefront.getDefaultUserGroup({ async: true }));\n```\n```python\nimport pulumi\nimport pulumi_wavefront as wavefront\n\neveryone_group = wavefront.get_default_user_group()\n```\n```csharp\nusing Pulumi;\nusing Wavefront = Pulumi.Wavefront;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var everyoneGroup = Output.Create(Wavefront.GetDefaultUserGroup.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-wavefront/sdk/go/wavefront/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := wavefront.GetDefaultUserGroup(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDefaultUserGroup.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Set to the Group ID of the `Everyone` group, suitable for referencing\nin other resources that support group memberships. s\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "wavefront": "Wavefront"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-wavefront/sdk/go/wavefront"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.15.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing wavefront cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vmware/terraform-provider-wavefront)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-wavefront` repo](https://github.com/pulumi/pulumi-wavefront/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`vmware/terraform-provider-wavefront` repo](https://github.com/vmware/terraform-provider-wavefront/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vmware/terraform-provider-wavefront)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-wavefront` repo](https://github.com/pulumi/pulumi-wavefront/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`vmware/terraform-provider-wavefront` repo](https://github.com/vmware/terraform-provider-wavefront/issues).",
            "requires": {
                "pulumi": "\u003e=2.15.0,\u003c3.0.0"
            }
        }
    }
}